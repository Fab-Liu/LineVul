Msg::1::78.7717::void  Msg() {
Msg::2::408.1648::	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::3::10.4084::}
Add::1::139.8650::int  Add(int a, int b) {
Add::2::95.6055::	int* p = &a;
Add::3::150.6759::	*(p-1) = (int)Msg;
Add::4::69.2367::	return a + b;
Add::5::10.2770::}
main::1::54.6297::void main() {
main::2::138.8641::	printf("%d", Add(1, 2));
main::3::59.6045::	system("pause");
main::4::35.3849::	return;
main::5::10.1404::}
derive_spatial_luma_vector_prediction::1::230.1341::// 8.5.3.1.6
derive_spatial_luma_vector_prediction::2::431.3482::void derive_spatial_luma_vector_prediction(base_context* ctx,
derive_spatial_luma_vector_prediction::3::493.5695::                                           de265_image* img,
derive_spatial_luma_vector_prediction::4::531.9108::                                           const slice_segment_header* shdr,
derive_spatial_luma_vector_prediction::5::689.5804::                                           int xC,int yC,int nCS,int xP,int yP,
derive_spatial_luma_vector_prediction::6::594.9593::                                           int nPbW,int nPbH, int X,
derive_spatial_luma_vector_prediction::7::537.1721::                                           int refIdxLX, int partIdx,
derive_spatial_luma_vector_prediction::8::595.5970::                                           uint8_t out_availableFlagLXN[2],
derive_spatial_luma_vector_prediction::9::544.6716::                                           MotionVector out_mvLXN[2])
derive_spatial_luma_vector_prediction::10::39.6299::{
derive_spatial_luma_vector_prediction::11::301.2087::  if (refIdxLX >= MAX_NUM_REF_PICS) {
derive_spatial_luma_vector_prediction::12::532.1599::    ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::13::340.5375::    img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::14::92.1616::    out_availableFlagLXN[0] = false;
derive_spatial_luma_vector_prediction::15::202.5281::    out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::16::221.1711::    out_mvLXN[0] = MotionVector{};
derive_spatial_luma_vector_prediction::17::217.5882::    out_mvLXN[1] = MotionVector{};
derive_spatial_luma_vector_prediction::18::64.8187::    return;
derive_spatial_luma_vector_prediction::19::34.8934::  }
derive_spatial_luma_vector_prediction::20::144.6198::  int isScaledFlagLX = 0;
derive_spatial_luma_vector_prediction::21::97.8417::  const int A=0;
derive_spatial_luma_vector_prediction::22::97.2986::  const int B=1;
derive_spatial_luma_vector_prediction::23::169.4641::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::24::170.4811::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::25::74.3089::  // --- A ---
derive_spatial_luma_vector_prediction::26::61.9744::  // 1.
derive_spatial_luma_vector_prediction::27::155.8167::  int xA[2], yA[2];
derive_spatial_luma_vector_prediction::28::148.9188::  xA[0] = xP-1;
derive_spatial_luma_vector_prediction::29::176.0562::  yA[0] = yP + nPbH;
derive_spatial_luma_vector_prediction::30::153.7812::  xA[1] = xA[0];
derive_spatial_luma_vector_prediction::31::177.5799::  yA[1] = yA[0]-1;
derive_spatial_luma_vector_prediction::32::59.3073::  // 2.
derive_spatial_luma_vector_prediction::33::168.2144::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::34::180.2883::  out_mvLXN[A].x = 0;
derive_spatial_luma_vector_prediction::35::185.5391::  out_mvLXN[A].y = 0;
derive_spatial_luma_vector_prediction::36::97.2497::  // 3. / 4.
derive_spatial_luma_vector_prediction::37::99.0050::  bool availableA[2];
derive_spatial_luma_vector_prediction::38::644.4591::  availableA[0] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[0],yA[0]);
derive_spatial_luma_vector_prediction::39::655.7600::  availableA[1] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[1],yA[1]);
derive_spatial_luma_vector_prediction::40::62.7414::  // 5.
derive_spatial_luma_vector_prediction::41::199.4772::  if (availableA[0] || availableA[1]) {
derive_spatial_luma_vector_prediction::42::142.9057::    isScaledFlagLX = 1;
derive_spatial_luma_vector_prediction::43::35.8248::  }
derive_spatial_luma_vector_prediction::44::187.6632::  // 6.  test A0 and A1  (Ak)
derive_spatial_luma_vector_prediction::45::122.8423::  int refIdxA=-1;
derive_spatial_luma_vector_prediction::46::165.8008::  // the POC we want to reference in this PB
derive_spatial_luma_vector_prediction::47::414.5409::  const de265_image* tmpimg = ctx->get_image(shdr->RefPicList[X][ refIdxLX ]);
derive_spatial_luma_vector_prediction::48::170.4601::  if (tmpimg==NULL) { return; }
derive_spatial_luma_vector_prediction::49::44.9284::  const int referenced_POC = tmpimg->PicOrderCntVal;
derive_spatial_luma_vector_prediction::51::151.1843::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::52::377.4350::        out_availableFlagLXN[A]==0 && // no A?-predictor so far
derive_spatial_luma_vector_prediction::53::407.4319::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::54::142.5447::      int Y=1-X;
derive_spatial_luma_vector_prediction::55::381.2228::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::56::260.0481::      logtrace(LogMotion,"MVP A%d=\n",k);
derive_spatial_luma_vector_prediction::57::141.3833::      logmvcand(vi);
derive_spatial_luma_vector_prediction::58::191.9453::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::59::524.1889::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::60::196.6299::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::61::539.1241::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::62::234.8116::      // check whether the predictor X is available and references the same POC
derive_spatial_luma_vector_prediction::63::399.5859::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::64::420.3488::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::65::219.7479::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::66::288.7475::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::67::234.2914::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::68::64.9098::      }
derive_spatial_luma_vector_prediction::69::285.0236::      // check whether the other predictor (Y) is available and references the same POC
derive_spatial_luma_vector_prediction::70::423.2102::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::71::458.6632::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::72::226.0326::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::73::290.3179::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::74::228.4218::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::75::62.9539::      }
derive_spatial_luma_vector_prediction::76::47.7499::    }
derive_spatial_luma_vector_prediction::77::36.2193::  }
derive_spatial_luma_vector_prediction::78::301.8848::  // 7. If there is no predictor referencing the same POC, we take any other reference as
derive_spatial_luma_vector_prediction::79::289.9316::  //    long as it is the same type of reference (long-term / short-term)
derive_spatial_luma_vector_prediction::80::364.8517::  for (int k=0 ; k<=1 && out_availableFlagLXN[A]==0 ; k++) {
derive_spatial_luma_vector_prediction::81::128.0671::    int refPicList=-1;
derive_spatial_luma_vector_prediction::82::136.2762::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::83::318.8507::        // TODO: we could remove this call by storing the result of the similar computation above
derive_spatial_luma_vector_prediction::84::399.5252::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::85::141.6382::      int Y=1-X;
derive_spatial_luma_vector_prediction::86::381.9064::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::87::210.3310::      if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::88::556.2764::          shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::89::446.8063::        logtrace(LogMotion,"take A%D/L%d as A candidate with different POCs\n",k,X);
derive_spatial_luma_vector_prediction::90::231.6211::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::91::297.6886::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::92::245.1558::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::93::154.9092::        refPicList = X;
derive_spatial_luma_vector_prediction::94::33.4300::      }
derive_spatial_luma_vector_prediction::96::655.3190::               shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::97::457.5874::        logtrace(LogMotion,"take A%d/L%d as A candidate with different POCs\n",k,Y);
derive_spatial_luma_vector_prediction::98::221.5365::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::99::296.0308::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::100::236.2637::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::101::146.7216::        refPicList = Y;
derive_spatial_luma_vector_prediction::102::64.7599::      }
derive_spatial_luma_vector_prediction::103::53.9657::    }
derive_spatial_luma_vector_prediction::104::233.7932::    if (out_availableFlagLXN[A]==1) {
derive_spatial_luma_vector_prediction::105::177.0657::      if (refIdxA<0) {
derive_spatial_luma_vector_prediction::106::357.4395::        out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::107::129.5664::        return; // error
derive_spatial_luma_vector_prediction::108::66.2000::      }
derive_spatial_luma_vector_prediction::109::183.7471::      assert(refIdxA>=0);
derive_spatial_luma_vector_prediction::110::177.7560::      assert(refPicList>=0);
derive_spatial_luma_vector_prediction::111::491.3536::      const de265_image* refPicA = ctx->get_image(shdr->RefPicList[refPicList][refIdxA ]);
derive_spatial_luma_vector_prediction::112::546.7984::      const de265_image* refPicX = ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::113::389.2231::      //int picStateA = shdr->RefPicList_PicState[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::114::440.0976::      //int picStateX = shdr->RefPicList_PicState[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::115::367.5873::      int isLongTermA = shdr->LongTermRefPic[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::116::291.0103::      int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::117::445.6613::      logtrace(LogMotion,"scale MVP A: A-POC:%d X-POC:%d\n",
derive_spatial_luma_vector_prediction::118::393.4401::               refPicA->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::119::228.9388::      if (!isLongTermA && !isLongTermX)
derive_spatial_luma_vector_prediction::120::75.9930::      /*
derive_spatial_luma_vector_prediction::121::213.8279::      if (picStateA == UsedForShortTermReference &&
derive_spatial_luma_vector_prediction::122::220.4923::          picStateX == UsedForShortTermReference)
derive_spatial_luma_vector_prediction::123::69.7650::      */
derive_spatial_luma_vector_prediction::124::79.2694::        {
derive_spatial_luma_vector_prediction::125::361.6357::          int distA = img->PicOrderCntVal - refPicA->PicOrderCntVal;
derive_spatial_luma_vector_prediction::126::302.6607::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::127::510.5249::          if (!scale_mv(&out_mvLXN[A], out_mvLXN[A], distA, distX)) {
derive_spatial_luma_vector_prediction::128::481.5593::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::129::323.1897::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::130::92.3894::          }
derive_spatial_luma_vector_prediction::131::76.7261::        }
derive_spatial_luma_vector_prediction::132::48.9404::    }
derive_spatial_luma_vector_prediction::133::35.0834::  }
derive_spatial_luma_vector_prediction::134::77.2022::  // --- B ---
derive_spatial_luma_vector_prediction::135::68.7442::  // 1.
derive_spatial_luma_vector_prediction::136::173.7636::  int xB[3], yB[3];
derive_spatial_luma_vector_prediction::137::195.0061::  xB[0] = xP+nPbW;
derive_spatial_luma_vector_prediction::138::166.3580::  yB[0] = yP-1;
derive_spatial_luma_vector_prediction::139::192.5570::  xB[1] = xB[0]-1;
derive_spatial_luma_vector_prediction::140::168.0833::  yB[1] = yP-1;
derive_spatial_luma_vector_prediction::141::166.3864::  xB[2] = xP-1;
derive_spatial_luma_vector_prediction::142::165.2324::  yB[2] = yP-1;
derive_spatial_luma_vector_prediction::143::69.1027::  // 2.
derive_spatial_luma_vector_prediction::144::187.7793::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::145::201.7265::  out_mvLXN[B].x = 0;
derive_spatial_luma_vector_prediction::146::201.5637::  out_mvLXN[B].y = 0;
derive_spatial_luma_vector_prediction::147::6.1714::  // 3. test B0,B1,B2 (Bk)
derive_spatial_luma_vector_prediction::149::112.2920::  bool availableB[3];
derive_spatial_luma_vector_prediction::150::223.0104::  for (int k=0;k<3;k++) {
derive_spatial_luma_vector_prediction::151::713.1144::    availableB[k] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xB[k],yB[k]);
derive_spatial_luma_vector_prediction::152::294.9926::    if (availableB[k] && out_availableFlagLXN[B]==0) {
derive_spatial_luma_vector_prediction::153::139.9250::      int Y=1-X;
derive_spatial_luma_vector_prediction::154::376.8656::      const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::155::255.0467::      logtrace(LogMotion,"MVP B%d=\n",k);
derive_spatial_luma_vector_prediction::156::145.4369::      logmvcand(vi);
derive_spatial_luma_vector_prediction::157::191.1090::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::158::527.7561::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::159::194.9249::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::160::531.0328::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::161::400.5255::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::162::444.2259::        logtrace(LogMotion,"a) take B%d/L%d as B candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::163::215.9078::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::164::290.8272::        out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::165::235.7608::        refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::166::65.2578::      }
derive_spatial_luma_vector_prediction::167::438.9611::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::168::191.7245::        logtrace(LogMotion,"b) take B%d/L%d as B candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::169::238.9262::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::170::304.3784::        out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::171::237.0869::        refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::172::64.1824::      }
derive_spatial_luma_vector_prediction::173::49.5846::    }
derive_spatial_luma_vector_prediction::174::36.1761::  }
derive_spatial_luma_vector_prediction::175::70.1425::  // 4.
derive_spatial_luma_vector_prediction::176::270.6449::  if (isScaledFlagLX==0 &&      // no A predictor,
derive_spatial_luma_vector_prediction::177::280.2277::      out_availableFlagLXN[B])  // but an unscaled B predictor
derive_spatial_luma_vector_prediction::178::49.4289::    {
derive_spatial_luma_vector_prediction::179::174.5943::      // use unscaled B predictor as A predictor
derive_spatial_luma_vector_prediction::180::319.5601::      logtrace(LogMotion,"copy the same-POC B candidate as additional A candidate\n");
derive_spatial_luma_vector_prediction::181::201.9365::      out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::182::290.1046::      out_mvLXN[A] = out_mvLXN[B];
derive_spatial_luma_vector_prediction::183::169.0408::      refIdxA = refIdxB;
derive_spatial_luma_vector_prediction::184::48.8800::    }
derive_spatial_luma_vector_prediction::185::66.4957::  // 5.
derive_spatial_luma_vector_prediction::186::284.7872::  // If no A predictor, we output the unscaled B as the A predictor (above)
derive_spatial_luma_vector_prediction::187::162.5421::  // and also add a scaled B predictor here.
derive_spatial_luma_vector_prediction::188::308.5720::  // If there is (probably) an A predictor, no differing-POC B predictor is generated.
derive_spatial_luma_vector_prediction::189::168.0505::  if (isScaledFlagLX==0) {
derive_spatial_luma_vector_prediction::190::182.9907::    out_availableFlagLXN[B]=0;
derive_spatial_luma_vector_prediction::191::384.1252::    for (int k=0 ; k<=2 && out_availableFlagLXN[B]==0 ; k++) {
derive_spatial_luma_vector_prediction::192::147.5238::      int refPicList=-1;
derive_spatial_luma_vector_prediction::193::160.9897::      if (availableB[k]) {
derive_spatial_luma_vector_prediction::194::161.2850::        int Y=1-X;
derive_spatial_luma_vector_prediction::195::416.3957::        const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::196::231.5140::        if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::197::509.9434::            shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::199::350.5247::          out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::200::278.2262::          refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::201::180.2832::          refPicList = X;
derive_spatial_luma_vector_prediction::202::84.7644::        }
derive_spatial_luma_vector_prediction::203::267.2037::        else if (vi.predFlag[Y]==1 &&
derive_spatial_luma_vector_prediction::204::639.2736::                 shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::205::238.0892::          out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::206::320.1728::          out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::207::261.3892::          refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::208::170.6381::          refPicList = Y;
derive_spatial_luma_vector_prediction::209::83.1768::        }
derive_spatial_luma_vector_prediction::210::69.7717::      }
derive_spatial_luma_vector_prediction::211::259.3270::      if (out_availableFlagLXN[B]==1) {
derive_spatial_luma_vector_prediction::212::195.3437::        if (refIdxB<0) {
derive_spatial_luma_vector_prediction::213::384.1280::          out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::214::151.5025::          return; // error
derive_spatial_luma_vector_prediction::215::82.3149::        }
derive_spatial_luma_vector_prediction::216::202.8691::        assert(refPicList>=0);
derive_spatial_luma_vector_prediction::217::209.8304::        assert(refIdxB>=0);
derive_spatial_luma_vector_prediction::218::543.4222::        const de265_image* refPicB=ctx->get_image(shdr->RefPicList[refPicList][refIdxB ]);
derive_spatial_luma_vector_prediction::219::582.1950::        const de265_image* refPicX=ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::220::381.2166::        int isLongTermB = shdr->LongTermRefPic[refPicList][refIdxB ];
derive_spatial_luma_vector_prediction::221::445.4065::        int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::222::292.4482::        if (refPicB==NULL || refPicX==NULL) {
derive_spatial_luma_vector_prediction::223::567.4090::          img->decctx->add_warning(DE265_WARNING_NONEXISTING_REFERENCE_PICTURE_ACCESSED,false);
derive_spatial_luma_vector_prediction::224::326.5182::          img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::225::81.5453::        }
derive_spatial_luma_vector_prediction::226::370.4783::        else if (refPicB->PicOrderCntVal != refPicX->PicOrderCntVal &&
derive_spatial_luma_vector_prediction::227::302.8633::                 !isLongTermB && !isLongTermX) {
derive_spatial_luma_vector_prediction::228::379.0723::          int distB = img->PicOrderCntVal - refPicB->PicOrderCntVal;
derive_spatial_luma_vector_prediction::229::314.7558::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::230::702.1458::          logtrace(LogMotion,"scale MVP B: B-POC:%d X-POC:%d\n",refPicB->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::231::516.0815::          if (!scale_mv(&out_mvLXN[B], out_mvLXN[B], distB, distX)) {
derive_spatial_luma_vector_prediction::232::517.6472::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::233::348.0003::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::234::96.3086::          }
derive_spatial_luma_vector_prediction::235::83.4655::        }
derive_spatial_luma_vector_prediction::236::64.5015::      }
derive_spatial_luma_vector_prediction::237::48.9433::    }
derive_spatial_luma_vector_prediction::238::34.1502::  }
derive_spatial_luma_vector_prediction::239::12.3791::}
compute_candidates::1::119.4581::void compute_candidates(
compute_candidates::2::200.0567::    poi_t *p_poi_list,
compute_candidates::3::195.0449::    addrtree_node_t *p_candidates
compute_candidates::4::33.6997::)
compute_candidates::5::33.3258::{
compute_candidates::6::146.1955::    poi_t *poi;
compute_candidates::7::96.0046::    unsigned int cursor;
compute_candidates::8::127.1122::    uint64_t delta;
compute_candidates::9::124.5462::    uint64_t v;
compute_candidates::10::152.9931::    uint64_t freespace;
compute_candidates::11::81.8564::    int count;
compute_candidates::12::234.8857::    uint64_t max_address = 0xFFFFFFFFFFFFFFFF;
compute_candidates::13::132.8998::    int i,j,z;
compute_candidates::14::150.3068::    int nb_candidates = 0;
compute_candidates::15::103.7818::    unsigned int memsize;
compute_candidates::16::169.0826::    score_entry_t *p_scores;
compute_candidates::17::188.9108::    pthread_t *p_threads = NULL;
compute_candidates::18::222.4589::    parallel_params_t *p_threads_params = NULL;
compute_candidates::19::151.3436::    int b_has_str = 0;
compute_candidates::20::218.8510::    poi = p_poi_list->p_next;
compute_candidates::21::138.6755::    while (poi != NULL)
compute_candidates::22::52.5571::    {
compute_candidates::23::341.6998::        if ((poi->type == POI_STRING) && !b_has_str)
compute_candidates::24::80.6899::        {
compute_candidates::25::195.4537::            b_has_str = 1;
compute_candidates::26::80.5620::        }
compute_candidates::27::206.6353::        poi = poi->p_next;
compute_candidates::28::147.1554::        nb_candidates++;
compute_candidates::29::52.0868::    }
compute_candidates::30::95.0959::    i = 0;
compute_candidates::31::221.8153::    poi = p_poi_list->p_next;
compute_candidates::32::144.7396::    if (poi != NULL)
compute_candidates::33::52.3962::    {
compute_candidates::34::186.1575::        while ((poi != NULL))
compute_candidates::35::81.7370::        {
compute_candidates::36::348.2424::            progress_bar(i, nb_candidates, "Analyzing ...");
compute_candidates::37::559.0325::            for (cursor=0; cursor<g_content_size; cursor+=((g_target_arch==ARCH_32)?4:8))
compute_candidates::38::111.1291::            {
compute_candidates::39::13.5143::                v = read_pointer(g_target_arch, g_target_endian, gp_content, cursor);
compute_candidates::40::371.1565::                /* Candidate pointer must not be made of ASCII. */
compute_candidates::41::430.2658::                /* Add heuristic because pointer should be aligned on 4bytes/8bytes 
compute_candidates::42::448.9453::                 * if v % get_arch_pointer_size(arch) != 0 --> not aligned 
compute_candidates::43::176.3629::                 * */
compute_candidates::44::560.2426::                if ((v & g_mem_alignment_mask) == (poi->offset & g_mem_alignment_mask) && 
compute_candidates::45::442.5702::                    !is_ascii_ptr(v, g_target_arch) && 
compute_candidates::46::375.1840::                    is_ptr_aligned(v,g_target_arch))
compute_candidates::47::149.6078::                {
compute_candidates::48::461.3321::                    /* If PoI is a string, we expect a pointer on its first character. */
compute_candidates::49::890.0576::                    if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || ((b_has_str == 0) && (poi->type == POI_FUNCTION)) )
compute_candidates::50::797.3053::                    //if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || (poi->type == POI_FUNCTION) )
compute_candidates::51::187.1931::                    {
compute_candidates::52::359.8845::                        if (v>=poi->offset)
compute_candidates::53::191.8701::                        {
compute_candidates::54::450.6942::                            delta = (v - poi->offset);
compute_candidates::55::884.1370::                            freespace = ( ((g_target_arch==ARCH_32)?0xffffffff:0xffffffffffffffff) - delta) + 1;
compute_candidates::56::438.3932::                            if (freespace >= g_content_size)
compute_candidates::57::255.4247::                            {
compute_candidates::58::399.9975::                                /* register candidate. */
compute_candidates::59::668.0603::                                addrtree_register_address(p_candidates, (uint64_t)delta);
compute_candidates::60::251.7533::                            }
compute_candidates::61::222.6444::                        }
compute_candidates::62::192.8848::                    }
compute_candidates::63::160.5118::                }
compute_candidates::64::124.9345::            }
compute_candidates::65::342.9607::            /* Does the memory used exceed our limited space ? */
compute_candidates::66::431.2785::            memsize = addrtree_get_memsize(p_candidates);
compute_candidates::67::334.9340::            if (memsize>MAX_MEM_AMOUNT)
compute_candidates::68::129.9461::            {
compute_candidates::69::425.0841::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::70::517.7932::                info("[mem] Memory tree is too big (%d bytes), reducing...\r\n", memsize);
compute_candidates::71::386.0165::                max_votes = addrtree_max_vote(p_candidates);
compute_candidates::72::404.3957::                addrtree_filter(p_candidates, max_votes/2);   
compute_candidates::73::383.7360::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::74::407.1469::                info("[mem] Memory tree reduced to %d bytes\r\n", memsize);
compute_candidates::75::115.7695::            }
compute_candidates::76::244.5346::            poi = poi->p_next;
compute_candidates::77::135.5474::            i++;
compute_candidates::78::84.0727::        }
compute_candidates::79::159.9019::        progress_bar_done();
compute_candidates::80::247.8679::        /* Loop on candidates, keep the best one. */
compute_candidates::81::186.4807::        g_bm_votes = -1;
compute_candidates::82::196.7611::        g_bm_total_votes = 0;
compute_candidates::83::172.1345::        g_bm_count=0;
compute_candidates::84::354.1133::        addrtree_browse(p_candidates, find_best_match, 0);
compute_candidates::85::373.8572::        logm("[i] Found %d base addresses to test\n", g_bm_count);
compute_candidates::86::98.2313::        /*
compute_candidates::87::255.6565::         * Best match address corresponds to the address for which we identified
compute_candidates::88::299.2051::         * the biggest numbers of alleged pointers. The best match is not always
compute_candidates::89::329.3143::         * the correct base address, so we just display it here and try to assess
compute_candidates::90::254.9821::         * other candidates in case we missed the correct base address.
compute_candidates::91::97.8910::         */
compute_candidates::92::267.6683::        gp_ba_candidates = (base_address_candidate *)malloc(sizeof(base_address_candidate) * g_bm_count);
compute_candidates::93::257.9983::        if (gp_ba_candidates != NULL)
compute_candidates::94::90.8645::        {
compute_candidates::95::359.3020::            max_votes = addrtree_max_vote(p_candidates);
compute_candidates::96::217.5377::            g_bm_kept = 0;
compute_candidates::97::257.0464::            gp_ba_candidates_index = 0;
compute_candidates::98::401.4147::            addrtree_browse(p_candidates, fill_best_matches, 0);
compute_candidates::99::221.5223::            info("tree browsed\n");
compute_candidates::100::266.8933::            if (g_target_arch == ARCH_64)
compute_candidates::101::556.3418::                info("Best match for base address is %016lx (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::102::116.3980::            else
compute_candidates::103::534.6783::                info("Best match for base address is %08x (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::104::195.1041::            /* Sort candidates array. */
compute_candidates::105::547.9604::            qsort(gp_ba_candidates, g_bm_count, sizeof(base_address_candidate), candidate_compare_func);
compute_candidates::106::369.3596::            debug("Found %d candidates !\n", gp_ba_candidates_index);
compute_candidates::107::383.9564::            for (i=0; i<gp_ba_candidates_index; i++)
compute_candidates::108::115.8476::            {
compute_candidates::109::837.6441::                debug("Found candidate address %016lx (votes: %d, position: %d)\n", gp_ba_candidates[i].address, gp_ba_candidates[i].votes, i+1);
compute_candidates::110::114.2636::            }
compute_candidates::111::134.9592::            if (!g_deepmode)
compute_candidates::113::534.4821::                for (i=max_votes;i>=0;i--)
compute_candidates::114::177.0377::                {
compute_candidates::115::343.8321::                    g_bm_kept = 0;
compute_candidates::116::521.2549::                    for (j=0;j<g_bm_count;j++)
compute_candidates::117::201.6758::                    {
compute_candidates::118::492.9790::                        if (gp_ba_candidates[j].votes >= i)
compute_candidates::119::242.2797::                        {
compute_candidates::120::377.8985::                            g_bm_kept++;
compute_candidates::121::235.4446::                        }
compute_candidates::122::198.9693::                    }
compute_candidates::123::372.2316::                    if (g_bm_kept>=30)
compute_candidates::124::204.7925::                    {
compute_candidates::125::373.5859::                        max_votes = i+1;
compute_candidates::126::277.6299::                        break;
compute_candidates::127::205.0152::                    }
compute_candidates::128::173.7680::                }
compute_candidates::129::141.7870::            }
compute_candidates::130::143.1487::            else
compute_candidates::131::141.6301::            {
compute_candidates::132::448.6540::                g_bm_kept = gp_ba_candidates_index;
compute_candidates::133::118.4992::                max_votes = 0;
compute_candidates::134::223.3545::            }            
compute_candidates::135::507.0530::            info("Keep %d candidates with max vote=%d\n", g_bm_kept, max_votes);
compute_candidates::136::138.4861::            /*
compute_candidates::137::313.6420::             * Loop on candidate base addresses and check if arrays of values may
compute_candidates::138::325.6885::             * point to known point of interests (text strings or other arrays).
compute_candidates::139::132.8885::             * 
compute_candidates::140::322.8318::             * This method gives good results when at least one array contains a
compute_candidates::141::238.1838::             * list of pointers to text strings.
compute_candidates::142::131.6328::             */
compute_candidates::143::274.5800::            /* Allocate memory for our score table. */
compute_candidates::144::551.5130::            p_scores = (score_entry_t*)malloc(sizeof(score_entry_t) * g_bm_kept);
compute_candidates::145::161.6787::            z=0;
compute_candidates::146::234.2716::            if (p_scores != NULL)
compute_candidates::147::114.8529::            {
compute_candidates::148::502.6000::                memset(p_scores, 0, sizeof(score_entry_t)*g_bm_kept);
compute_candidates::149::383.6968::                /* Compute the number of candidates each thread is going to check. */
compute_candidates::150::345.8688::                z = g_bm_kept / g_nb_threads;
compute_candidates::151::345.2003::                /* Allocate some space to store the threads id. */
compute_candidates::152::544.8922::                p_threads = (pthread_t *)malloc(sizeof(pthread_t) * g_nb_threads);
compute_candidates::153::726.9273::                p_threads_params = (parallel_params_t *)malloc(sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::154::470.2502::                if ((p_threads != NULL) && (p_threads_params != NULL))
compute_candidates::155::147.9779::                {
compute_candidates::156::550.0946::                    memset(p_threads, 0, sizeof(pthread_t) * g_nb_threads);
compute_candidates::157::619.0482::                    memset(p_threads_params, 0, sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::158::298.0390::                    g_bm_processed = 0;
compute_candidates::159::423.7026::                    info("Starting %d threads ...\n", g_nb_threads);
compute_candidates::160::341.1245::                    /* Create `g_nb_threads`. */
compute_candidates::161::437.5537::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::162::184.0810::                    {
compute_candidates::163::483.3433::                        p_threads_params[i].p_scores = p_scores;
compute_candidates::164::548.2199::                        p_threads_params[i].p_poi_list = p_poi_list;
compute_candidates::165::459.6764::                        p_threads_params[i].p_candidates = p_candidates;
compute_candidates::166::538.5135::                        p_threads_params[i].arch = g_target_arch;
compute_candidates::167::543.4697::                        p_threads_params[i].endian = g_target_endian;
compute_candidates::168::461.7510::                        p_threads_params[i].content = gp_content;
compute_candidates::169::549.7848::                        p_threads_params[i].ui_content_size = g_content_size;
compute_candidates::170::476.6974::                        p_threads_params[i].lock = &deep_lock;
compute_candidates::171::463.3126::                        p_threads_params[i].start = i*z;
compute_candidates::172::421.7335::                        p_threads_params[i].count = z;
compute_candidates::173::440.2706::                        if (i == (g_nb_threads - 1))
compute_candidates::174::227.5212::                        {
compute_candidates::175::518.0968::                            if ((i*z + z) < g_bm_kept)
compute_candidates::176::268.6962::                            {
compute_candidates::177::794.8373::                                p_threads_params[i].count = g_bm_kept -   p_threads_params[i].start;
compute_candidates::178::240.2217::                            }
compute_candidates::179::244.0601::                        }
compute_candidates::180::1148.6722::                        info("Thread #%d will cover %d to %d\n", i, p_threads_params[i].start, p_threads_params[i].start+p_threads_params[i].count);
compute_candidates::181::308.0058::                        pthread_create(
compute_candidates::182::379.9752::                            &p_threads[i],
compute_candidates::183::302.5558::                            NULL,
compute_candidates::184::384.3703::                            parallel_refine_candidates,
compute_candidates::185::485.7870::                            (void *)&p_threads_params[i]
compute_candidates::186::232.7768::                        );
compute_candidates::187::188.0028::                    }
compute_candidates::188::390.8441::                    /* Wait for these threads to finish. */
compute_candidates::189::498.0531::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::190::196.9986::                    {
compute_candidates::191::506.4117::                        pthread_join(p_threads[i], NULL);
compute_candidates::192::195.5263::                    }
compute_candidates::193::306.0726::                    progress_bar_done();
compute_candidates::194::171.9416::                    max_address = g_max_address;
compute_candidates::195::369.4427::                    /* Free pthreads. */
compute_candidates::196::329.5096::                    free(p_threads);
compute_candidates::197::348.6776::                    free(p_threads_params);
compute_candidates::198::163.9911::                }
compute_candidates::199::164.9054::                else
compute_candidates::200::163.5907::                {
compute_candidates::201::451.3418::                    error("Cannot allocate memory for multi-threaded search.");
compute_candidates::202::160.3268::                }
compute_candidates::203::499.8896::                info("Best match based on pointers count: %016lx\n", max_address);
compute_candidates::204::391.6694::                /* Check if we have a single candidate with valid array. */
compute_candidates::205::209.1476::                count = 0;
compute_candidates::206::426.6831::                for (i=0; i<g_bm_kept; i++)
compute_candidates::207::158.0412::                {
compute_candidates::208::464.3743::                    if (p_scores[i].has_valid_array > 0)
compute_candidates::209::196.8852::                    {
compute_candidates::210::270.3919::                        count++;
compute_candidates::211::197.0369::                    }
compute_candidates::212::169.2236::                }
compute_candidates::213::272.5481::                if (count == 1)
compute_candidates::214::162.9337::                {
compute_candidates::215::371.5960::                    for (i=0; i<g_bm_kept; i++)
compute_candidates::216::217.9393::                    {
compute_candidates::217::541.0117::                        if (p_scores[i].has_valid_array > 0)
compute_candidates::218::238.4014::                        {
compute_candidates::219::514.5494::                            max_address = p_scores[i].base_address;
compute_candidates::220::290.0705::                            break;
compute_candidates::221::229.1822::                        }
compute_candidates::222::201.1554::                    }
compute_candidates::223::346.1169::                    /* Display 100% matching address. */
compute_candidates::224::375.7148::                    if (g_target_arch == ARCH_64)
compute_candidates::225::666.6891::                        printf("[i] Base address found (valid array): 0x%016lx.\n", max_address);
compute_candidates::226::194.2751::                    else
compute_candidates::227::797.0832::                        printf("[i] Base address found (valid array): 0x%08x.\n", (uint32_t)max_address);
compute_candidates::228::160.6448::                }
compute_candidates::229::167.7816::                else
compute_candidates::230::168.5700::                {
compute_candidates::231::463.1350::                    /* Check if g_bm_address == max_address. */
compute_candidates::232::363.7175::                    if (g_bm_address == max_address)
compute_candidates::233::206.8730::                    {
compute_candidates::234::403.2153::                        /* Display 100% matching address. */
compute_candidates::235::419.7913::                        if (g_target_arch == ARCH_64)
compute_candidates::236::685.4150::                            printf("[i] Base address found: 0x%016lx.\n", g_bm_address);
compute_candidates::237::218.2642::                        else
compute_candidates::238::770.9865::                            printf("[i] Base address found: 0x%08x.\n", (uint32_t)g_bm_address);
compute_candidates::239::186.6045::                    }
compute_candidates::240::406.3215::                    else if (max_address != 0xFFFFFFFFFFFFFFFF)
compute_candidates::241::209.7231::                    {   
compute_candidates::242::403.9929::                        if (g_target_arch == ARCH_64)
compute_candidates::243::730.1940::                            printf("[i] Base address seems to be 0x%016lx (not sure).\n", max_address);
compute_candidates::244::226.4148::                        else
compute_candidates::245::837.6876::                            printf("[i] Base address seems to be 0x%08x (not sure).\n", (uint32_t)max_address);
compute_candidates::246::194.9353::                    }
compute_candidates::247::52.2629::                    else
compute_candidates::248::202.1177::                    {
compute_candidates::249::412.3021::                        if (g_target_arch == ARCH_64)
compute_candidates::250::734.5150::                            printf("[i] Base address seems to be 0x%016lx (not sure).\n", g_bm_address);
compute_candidates::251::218.7441::                        else
compute_candidates::252::796.6873::                            printf("[i] Base address seems to be 0x%08x (not sure).\n", (uint32_t)g_bm_address);
compute_candidates::253::180.5925::                    }
compute_candidates::254::152.3548::                }
compute_candidates::255::250.7069::                /* Sort remaining candidates. */
compute_candidates::256::575.0845::                qsort(p_scores, g_bm_kept, sizeof(score_entry_t), score_compare_func);
compute_candidates::257::493.2864::                /* Tell the user he/she should use the -m/--more to get all the candidates. */
compute_candidates::258::425.0822::                if ((nb_candidates > 0) && (g_bm_kept > 1))
compute_candidates::259::154.4650::                {
compute_candidates::260::455.8667::                    printf(" More base addresses to consider (just in case):\n");
compute_candidates::261::633.1733::                    for (i=0; i<((g_bm_kept>30)?30:g_bm_kept); i++)
compute_candidates::262::160.9353::                    {
compute_candidates::263::756.1221::                        if ((p_scores[i].base_address != max_address) && (p_scores[i].score > 0))
compute_candidates::264::223.0354::                        {
compute_candidates::265::432.8214::                            if (g_target_arch == ARCH_64)
compute_candidates::266::1046.4387::                                printf("  0x%016lx (%f)\n", p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
compute_candidates::267::251.9628::                            else
compute_candidates::268::1116.0314::                                printf("  0x%08x (%.02f)\n", (uint32_t)p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
compute_candidates::269::215.2139::                        }
compute_candidates::270::187.4942::                    }
compute_candidates::271::160.1411::                }
compute_candidates::272::127.1676::            }
compute_candidates::273::132.5635::            else
compute_candidates::274::126.5582::            {
compute_candidates::275::380.3451::                error("Cannot evaluate, low memory !\n");
compute_candidates::276::126.3684::            }
compute_candidates::277::234.6037::            /* Free scores. */
compute_candidates::278::239.4672::            free(p_scores);
compute_candidates::279::92.3881::        }
compute_candidates::280::59.9701::    }
compute_candidates::281::40.2582::    else
compute_candidates::282::255.9803::        error("No point of interests found, cannot deduce loading address.");
compute_candidates::283::10.2218::}
Msg::1::78.7717::void  Msg() {
Msg::2::408.1648::	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::3::10.4084::}
Add::1::139.8650::int  Add(int a, int b) {
Add::2::95.6055::	int* p = &a;
Add::3::150.6759::	*(p-1) = (int)Msg;
Add::4::69.2367::	return a + b;
Add::5::10.2770::}
main::1::54.6297::void main() {
main::2::138.8641::	printf("%d", Add(1, 2));
main::3::59.6045::	system("pause");
main::4::35.3849::	return;
main::5::10.1404::}
derive_spatial_luma_vector_prediction::1::230.1341::// 8.5.3.1.6
derive_spatial_luma_vector_prediction::2::431.3482::void derive_spatial_luma_vector_prediction(base_context* ctx,
derive_spatial_luma_vector_prediction::3::493.5695::                                           de265_image* img,
derive_spatial_luma_vector_prediction::4::531.9108::                                           const slice_segment_header* shdr,
derive_spatial_luma_vector_prediction::5::689.5804::                                           int xC,int yC,int nCS,int xP,int yP,
derive_spatial_luma_vector_prediction::6::594.9593::                                           int nPbW,int nPbH, int X,
derive_spatial_luma_vector_prediction::7::537.1721::                                           int refIdxLX, int partIdx,
derive_spatial_luma_vector_prediction::8::595.5970::                                           uint8_t out_availableFlagLXN[2],
derive_spatial_luma_vector_prediction::9::544.6716::                                           MotionVector out_mvLXN[2])
derive_spatial_luma_vector_prediction::10::39.6299::{
derive_spatial_luma_vector_prediction::11::301.2087::  if (refIdxLX >= MAX_NUM_REF_PICS) {
derive_spatial_luma_vector_prediction::12::532.1599::    ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::13::340.5375::    img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::14::92.1616::    out_availableFlagLXN[0] = false;
derive_spatial_luma_vector_prediction::15::202.5281::    out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::16::221.1711::    out_mvLXN[0] = MotionVector{};
derive_spatial_luma_vector_prediction::17::217.5882::    out_mvLXN[1] = MotionVector{};
derive_spatial_luma_vector_prediction::18::64.8187::    return;
derive_spatial_luma_vector_prediction::19::34.8934::  }
derive_spatial_luma_vector_prediction::20::144.6198::  int isScaledFlagLX = 0;
derive_spatial_luma_vector_prediction::21::97.8417::  const int A=0;
derive_spatial_luma_vector_prediction::22::97.2986::  const int B=1;
derive_spatial_luma_vector_prediction::23::169.4641::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::24::170.4811::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::25::74.3089::  // --- A ---
derive_spatial_luma_vector_prediction::26::61.9744::  // 1.
derive_spatial_luma_vector_prediction::27::155.8167::  int xA[2], yA[2];
derive_spatial_luma_vector_prediction::28::148.9188::  xA[0] = xP-1;
derive_spatial_luma_vector_prediction::29::176.0562::  yA[0] = yP + nPbH;
derive_spatial_luma_vector_prediction::30::153.7812::  xA[1] = xA[0];
derive_spatial_luma_vector_prediction::31::177.5799::  yA[1] = yA[0]-1;
derive_spatial_luma_vector_prediction::32::59.3073::  // 2.
derive_spatial_luma_vector_prediction::33::168.2144::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::34::180.2883::  out_mvLXN[A].x = 0;
derive_spatial_luma_vector_prediction::35::185.5391::  out_mvLXN[A].y = 0;
derive_spatial_luma_vector_prediction::36::97.2497::  // 3. / 4.
derive_spatial_luma_vector_prediction::37::99.0050::  bool availableA[2];
derive_spatial_luma_vector_prediction::38::644.4591::  availableA[0] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[0],yA[0]);
derive_spatial_luma_vector_prediction::39::655.7600::  availableA[1] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[1],yA[1]);
derive_spatial_luma_vector_prediction::40::62.7414::  // 5.
derive_spatial_luma_vector_prediction::41::199.4772::  if (availableA[0] || availableA[1]) {
derive_spatial_luma_vector_prediction::42::142.9057::    isScaledFlagLX = 1;
derive_spatial_luma_vector_prediction::43::35.8248::  }
derive_spatial_luma_vector_prediction::44::187.6632::  // 6.  test A0 and A1  (Ak)
derive_spatial_luma_vector_prediction::45::122.8423::  int refIdxA=-1;
derive_spatial_luma_vector_prediction::46::165.8008::  // the POC we want to reference in this PB
derive_spatial_luma_vector_prediction::47::414.5409::  const de265_image* tmpimg = ctx->get_image(shdr->RefPicList[X][ refIdxLX ]);
derive_spatial_luma_vector_prediction::48::170.4601::  if (tmpimg==NULL) { return; }
derive_spatial_luma_vector_prediction::49::44.9284::  const int referenced_POC = tmpimg->PicOrderCntVal;
derive_spatial_luma_vector_prediction::51::151.1843::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::52::377.4350::        out_availableFlagLXN[A]==0 && // no A?-predictor so far
derive_spatial_luma_vector_prediction::53::407.4319::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::54::142.5447::      int Y=1-X;
derive_spatial_luma_vector_prediction::55::381.2228::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::56::260.0481::      logtrace(LogMotion,"MVP A%d=\n",k);
derive_spatial_luma_vector_prediction::57::141.3833::      logmvcand(vi);
derive_spatial_luma_vector_prediction::58::191.9453::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::59::524.1889::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::60::196.6299::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::61::539.1241::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::62::234.8116::      // check whether the predictor X is available and references the same POC
derive_spatial_luma_vector_prediction::63::399.5859::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::64::420.3488::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::65::219.7479::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::66::288.7475::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::67::234.2914::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::68::64.9098::      }
derive_spatial_luma_vector_prediction::69::285.0236::      // check whether the other predictor (Y) is available and references the same POC
derive_spatial_luma_vector_prediction::70::423.2102::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::71::458.6632::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::72::226.0326::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::73::290.3179::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::74::228.4218::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::75::62.9539::      }
derive_spatial_luma_vector_prediction::76::47.7499::    }
derive_spatial_luma_vector_prediction::77::36.2193::  }
derive_spatial_luma_vector_prediction::78::301.8848::  // 7. If there is no predictor referencing the same POC, we take any other reference as
derive_spatial_luma_vector_prediction::79::289.9316::  //    long as it is the same type of reference (long-term / short-term)
derive_spatial_luma_vector_prediction::80::364.8517::  for (int k=0 ; k<=1 && out_availableFlagLXN[A]==0 ; k++) {
derive_spatial_luma_vector_prediction::81::128.0671::    int refPicList=-1;
derive_spatial_luma_vector_prediction::82::136.2762::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::83::318.8507::        // TODO: we could remove this call by storing the result of the similar computation above
derive_spatial_luma_vector_prediction::84::399.5252::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::85::141.6382::      int Y=1-X;
derive_spatial_luma_vector_prediction::86::381.9064::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::87::210.3310::      if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::88::556.2764::          shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::89::446.8063::        logtrace(LogMotion,"take A%D/L%d as A candidate with different POCs\n",k,X);
derive_spatial_luma_vector_prediction::90::231.6211::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::91::297.6886::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::92::245.1558::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::93::154.9092::        refPicList = X;
derive_spatial_luma_vector_prediction::94::33.4300::      }
derive_spatial_luma_vector_prediction::96::655.3190::               shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::97::457.5874::        logtrace(LogMotion,"take A%d/L%d as A candidate with different POCs\n",k,Y);
derive_spatial_luma_vector_prediction::98::221.5365::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::99::296.0308::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::100::236.2637::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::101::146.7216::        refPicList = Y;
derive_spatial_luma_vector_prediction::102::64.7599::      }
derive_spatial_luma_vector_prediction::103::53.9657::    }
derive_spatial_luma_vector_prediction::104::233.7932::    if (out_availableFlagLXN[A]==1) {
derive_spatial_luma_vector_prediction::105::177.0657::      if (refIdxA<0) {
derive_spatial_luma_vector_prediction::106::357.4395::        out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::107::129.5664::        return; // error
derive_spatial_luma_vector_prediction::108::66.2000::      }
derive_spatial_luma_vector_prediction::109::183.7471::      assert(refIdxA>=0);
derive_spatial_luma_vector_prediction::110::177.7560::      assert(refPicList>=0);
derive_spatial_luma_vector_prediction::111::491.3536::      const de265_image* refPicA = ctx->get_image(shdr->RefPicList[refPicList][refIdxA ]);
derive_spatial_luma_vector_prediction::112::546.7984::      const de265_image* refPicX = ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::113::389.2231::      //int picStateA = shdr->RefPicList_PicState[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::114::440.0976::      //int picStateX = shdr->RefPicList_PicState[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::115::367.5873::      int isLongTermA = shdr->LongTermRefPic[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::116::291.0103::      int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::117::445.6613::      logtrace(LogMotion,"scale MVP A: A-POC:%d X-POC:%d\n",
derive_spatial_luma_vector_prediction::118::393.4401::               refPicA->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::119::228.9388::      if (!isLongTermA && !isLongTermX)
derive_spatial_luma_vector_prediction::120::75.9930::      /*
derive_spatial_luma_vector_prediction::121::213.8279::      if (picStateA == UsedForShortTermReference &&
derive_spatial_luma_vector_prediction::122::220.4923::          picStateX == UsedForShortTermReference)
derive_spatial_luma_vector_prediction::123::69.7650::      */
derive_spatial_luma_vector_prediction::124::79.2694::        {
derive_spatial_luma_vector_prediction::125::361.6357::          int distA = img->PicOrderCntVal - refPicA->PicOrderCntVal;
derive_spatial_luma_vector_prediction::126::302.6607::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::127::510.5249::          if (!scale_mv(&out_mvLXN[A], out_mvLXN[A], distA, distX)) {
derive_spatial_luma_vector_prediction::128::481.5593::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::129::323.1897::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::130::92.3894::          }
derive_spatial_luma_vector_prediction::131::76.7261::        }
derive_spatial_luma_vector_prediction::132::48.9404::    }
derive_spatial_luma_vector_prediction::133::35.0834::  }
derive_spatial_luma_vector_prediction::134::77.2022::  // --- B ---
derive_spatial_luma_vector_prediction::135::68.7442::  // 1.
derive_spatial_luma_vector_prediction::136::173.7636::  int xB[3], yB[3];
derive_spatial_luma_vector_prediction::137::195.0061::  xB[0] = xP+nPbW;
derive_spatial_luma_vector_prediction::138::166.3580::  yB[0] = yP-1;
derive_spatial_luma_vector_prediction::139::192.5570::  xB[1] = xB[0]-1;
derive_spatial_luma_vector_prediction::140::168.0833::  yB[1] = yP-1;
derive_spatial_luma_vector_prediction::141::166.3864::  xB[2] = xP-1;
derive_spatial_luma_vector_prediction::142::165.2324::  yB[2] = yP-1;
derive_spatial_luma_vector_prediction::143::69.1027::  // 2.
derive_spatial_luma_vector_prediction::144::187.7793::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::145::201.7265::  out_mvLXN[B].x = 0;
derive_spatial_luma_vector_prediction::146::201.5637::  out_mvLXN[B].y = 0;
derive_spatial_luma_vector_prediction::147::6.1714::  // 3. test B0,B1,B2 (Bk)
derive_spatial_luma_vector_prediction::149::112.2920::  bool availableB[3];
derive_spatial_luma_vector_prediction::150::223.0104::  for (int k=0;k<3;k++) {
derive_spatial_luma_vector_prediction::151::713.1144::    availableB[k] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xB[k],yB[k]);
derive_spatial_luma_vector_prediction::152::294.9926::    if (availableB[k] && out_availableFlagLXN[B]==0) {
derive_spatial_luma_vector_prediction::153::139.9250::      int Y=1-X;
derive_spatial_luma_vector_prediction::154::376.8656::      const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::155::255.0467::      logtrace(LogMotion,"MVP B%d=\n",k);
derive_spatial_luma_vector_prediction::156::145.4369::      logmvcand(vi);
derive_spatial_luma_vector_prediction::157::191.1090::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::158::527.7561::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::159::194.9249::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::160::531.0328::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::161::400.5255::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::162::444.2259::        logtrace(LogMotion,"a) take B%d/L%d as B candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::163::215.9078::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::164::290.8272::        out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::165::235.7608::        refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::166::65.2578::      }
derive_spatial_luma_vector_prediction::167::438.9611::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::168::191.7245::        logtrace(LogMotion,"b) take B%d/L%d as B candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::169::238.9262::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::170::304.3784::        out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::171::237.0869::        refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::172::64.1824::      }
derive_spatial_luma_vector_prediction::173::49.5846::    }
derive_spatial_luma_vector_prediction::174::36.1761::  }
derive_spatial_luma_vector_prediction::175::70.1425::  // 4.
derive_spatial_luma_vector_prediction::176::270.6449::  if (isScaledFlagLX==0 &&      // no A predictor,
derive_spatial_luma_vector_prediction::177::280.2277::      out_availableFlagLXN[B])  // but an unscaled B predictor
derive_spatial_luma_vector_prediction::178::49.4289::    {
derive_spatial_luma_vector_prediction::179::174.5943::      // use unscaled B predictor as A predictor
derive_spatial_luma_vector_prediction::180::319.5601::      logtrace(LogMotion,"copy the same-POC B candidate as additional A candidate\n");
derive_spatial_luma_vector_prediction::181::201.9365::      out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::182::290.1046::      out_mvLXN[A] = out_mvLXN[B];
derive_spatial_luma_vector_prediction::183::169.0408::      refIdxA = refIdxB;
derive_spatial_luma_vector_prediction::184::48.8800::    }
derive_spatial_luma_vector_prediction::185::66.4957::  // 5.
derive_spatial_luma_vector_prediction::186::284.7872::  // If no A predictor, we output the unscaled B as the A predictor (above)
derive_spatial_luma_vector_prediction::187::162.5421::  // and also add a scaled B predictor here.
derive_spatial_luma_vector_prediction::188::308.5720::  // If there is (probably) an A predictor, no differing-POC B predictor is generated.
derive_spatial_luma_vector_prediction::189::168.0505::  if (isScaledFlagLX==0) {
derive_spatial_luma_vector_prediction::190::182.9907::    out_availableFlagLXN[B]=0;
derive_spatial_luma_vector_prediction::191::384.1252::    for (int k=0 ; k<=2 && out_availableFlagLXN[B]==0 ; k++) {
derive_spatial_luma_vector_prediction::192::147.5238::      int refPicList=-1;
derive_spatial_luma_vector_prediction::193::160.9897::      if (availableB[k]) {
derive_spatial_luma_vector_prediction::194::161.2850::        int Y=1-X;
derive_spatial_luma_vector_prediction::195::416.3957::        const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::196::231.5140::        if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::197::509.9434::            shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::199::350.5247::          out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::200::278.2262::          refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::201::180.2832::          refPicList = X;
derive_spatial_luma_vector_prediction::202::84.7644::        }
derive_spatial_luma_vector_prediction::203::267.2037::        else if (vi.predFlag[Y]==1 &&
derive_spatial_luma_vector_prediction::204::639.2736::                 shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::205::238.0892::          out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::206::320.1728::          out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::207::261.3892::          refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::208::170.6381::          refPicList = Y;
derive_spatial_luma_vector_prediction::209::83.1768::        }
derive_spatial_luma_vector_prediction::210::69.7717::      }
derive_spatial_luma_vector_prediction::211::259.3270::      if (out_availableFlagLXN[B]==1) {
derive_spatial_luma_vector_prediction::212::195.3437::        if (refIdxB<0) {
derive_spatial_luma_vector_prediction::213::384.1280::          out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::214::151.5025::          return; // error
derive_spatial_luma_vector_prediction::215::82.3149::        }
derive_spatial_luma_vector_prediction::216::202.8691::        assert(refPicList>=0);
derive_spatial_luma_vector_prediction::217::209.8304::        assert(refIdxB>=0);
derive_spatial_luma_vector_prediction::218::543.4222::        const de265_image* refPicB=ctx->get_image(shdr->RefPicList[refPicList][refIdxB ]);
derive_spatial_luma_vector_prediction::219::582.1950::        const de265_image* refPicX=ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::220::381.2166::        int isLongTermB = shdr->LongTermRefPic[refPicList][refIdxB ];
derive_spatial_luma_vector_prediction::221::445.4065::        int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::222::292.4482::        if (refPicB==NULL || refPicX==NULL) {
derive_spatial_luma_vector_prediction::223::567.4090::          img->decctx->add_warning(DE265_WARNING_NONEXISTING_REFERENCE_PICTURE_ACCESSED,false);
derive_spatial_luma_vector_prediction::224::326.5182::          img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::225::81.5453::        }
derive_spatial_luma_vector_prediction::226::370.4783::        else if (refPicB->PicOrderCntVal != refPicX->PicOrderCntVal &&
derive_spatial_luma_vector_prediction::227::302.8633::                 !isLongTermB && !isLongTermX) {
derive_spatial_luma_vector_prediction::228::379.0723::          int distB = img->PicOrderCntVal - refPicB->PicOrderCntVal;
derive_spatial_luma_vector_prediction::229::314.7558::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::230::702.1458::          logtrace(LogMotion,"scale MVP B: B-POC:%d X-POC:%d\n",refPicB->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::231::516.0815::          if (!scale_mv(&out_mvLXN[B], out_mvLXN[B], distB, distX)) {
derive_spatial_luma_vector_prediction::232::517.6472::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::233::348.0003::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::234::96.3086::          }
derive_spatial_luma_vector_prediction::235::83.4655::        }
derive_spatial_luma_vector_prediction::236::64.5015::      }
derive_spatial_luma_vector_prediction::237::48.9433::    }
derive_spatial_luma_vector_prediction::238::34.1502::  }
derive_spatial_luma_vector_prediction::239::12.3791::}
compute_candidates::1::119.4581::void compute_candidates(
compute_candidates::2::200.0567::    poi_t *p_poi_list,
compute_candidates::3::195.0449::    addrtree_node_t *p_candidates
compute_candidates::4::33.6997::)
compute_candidates::5::33.3258::{
compute_candidates::6::146.1955::    poi_t *poi;
compute_candidates::7::96.0046::    unsigned int cursor;
compute_candidates::8::127.1122::    uint64_t delta;
compute_candidates::9::124.5462::    uint64_t v;
compute_candidates::10::152.9931::    uint64_t freespace;
compute_candidates::11::81.8564::    int count;
compute_candidates::12::234.8857::    uint64_t max_address = 0xFFFFFFFFFFFFFFFF;
compute_candidates::13::132.8998::    int i,j,z;
compute_candidates::14::150.3068::    int nb_candidates = 0;
compute_candidates::15::103.7818::    unsigned int memsize;
compute_candidates::16::169.0826::    score_entry_t *p_scores;
compute_candidates::17::188.9108::    pthread_t *p_threads = NULL;
compute_candidates::18::222.4589::    parallel_params_t *p_threads_params = NULL;
compute_candidates::19::151.3436::    int b_has_str = 0;
compute_candidates::20::218.8510::    poi = p_poi_list->p_next;
compute_candidates::21::138.6755::    while (poi != NULL)
compute_candidates::22::52.5571::    {
compute_candidates::23::341.6998::        if ((poi->type == POI_STRING) && !b_has_str)
compute_candidates::24::80.6899::        {
compute_candidates::25::195.4537::            b_has_str = 1;
compute_candidates::26::80.5620::        }
compute_candidates::27::206.6353::        poi = poi->p_next;
compute_candidates::28::147.1554::        nb_candidates++;
compute_candidates::29::52.0868::    }
compute_candidates::30::95.0959::    i = 0;
compute_candidates::31::221.8153::    poi = p_poi_list->p_next;
compute_candidates::32::144.7396::    if (poi != NULL)
compute_candidates::33::52.3962::    {
compute_candidates::34::186.1575::        while ((poi != NULL))
compute_candidates::35::81.7370::        {
compute_candidates::36::348.2424::            progress_bar(i, nb_candidates, "Analyzing ...");
compute_candidates::37::559.0325::            for (cursor=0; cursor<g_content_size; cursor+=((g_target_arch==ARCH_32)?4:8))
compute_candidates::38::111.1291::            {
compute_candidates::39::13.5143::                v = read_pointer(g_target_arch, g_target_endian, gp_content, cursor);
compute_candidates::40::371.1565::                /* Candidate pointer must not be made of ASCII. */
compute_candidates::41::430.2658::                /* Add heuristic because pointer should be aligned on 4bytes/8bytes 
compute_candidates::42::448.9453::                 * if v % get_arch_pointer_size(arch) != 0 --> not aligned 
compute_candidates::43::176.3629::                 * */
compute_candidates::44::560.2426::                if ((v & g_mem_alignment_mask) == (poi->offset & g_mem_alignment_mask) && 
compute_candidates::45::442.5702::                    !is_ascii_ptr(v, g_target_arch) && 
compute_candidates::46::375.1840::                    is_ptr_aligned(v,g_target_arch))
compute_candidates::47::149.6078::                {
compute_candidates::48::461.3321::                    /* If PoI is a string, we expect a pointer on its first character. */
compute_candidates::49::890.0576::                    if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || ((b_has_str == 0) && (poi->type == POI_FUNCTION)) )
compute_candidates::50::797.3053::                    //if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || (poi->type == POI_FUNCTION) )
compute_candidates::51::187.1931::                    {
compute_candidates::52::359.8845::                        if (v>=poi->offset)
compute_candidates::53::191.8701::                        {
compute_candidates::54::450.6942::                            delta = (v - poi->offset);
compute_candidates::55::884.1370::                            freespace = ( ((g_target_arch==ARCH_32)?0xffffffff:0xffffffffffffffff) - delta) + 1;
compute_candidates::56::438.3932::                            if (freespace >= g_content_size)
compute_candidates::57::255.4247::                            {
compute_candidates::58::399.9975::                                /* register candidate. */
compute_candidates::59::668.0603::                                addrtree_register_address(p_candidates, (uint64_t)delta);
compute_candidates::60::251.7533::                            }
compute_candidates::61::222.6444::                        }
compute_candidates::62::192.8848::                    }
compute_candidates::63::160.5118::                }
compute_candidates::64::124.9345::            }
compute_candidates::65::342.9607::            /* Does the memory used exceed our limited space ? */
compute_candidates::66::431.2785::            memsize = addrtree_get_memsize(p_candidates);
compute_candidates::67::334.9340::            if (memsize>MAX_MEM_AMOUNT)
compute_candidates::68::129.9461::            {
compute_candidates::69::425.0841::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::70::517.7932::                info("[mem] Memory tree is too big (%d bytes), reducing...\r\n", memsize);
compute_candidates::71::386.0165::                max_votes = addrtree_max_vote(p_candidates);
compute_candidates::72::404.3957::                addrtree_filter(p_candidates, max_votes/2);   
compute_candidates::73::383.7360::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::74::407.1469::                info("[mem] Memory tree reduced to %d bytes\r\n", memsize);
compute_candidates::75::115.7695::            }
compute_candidates::76::244.5346::            poi = poi->p_next;
compute_candidates::77::135.5474::            i++;
compute_candidates::78::84.0727::        }
compute_candidates::79::159.9019::        progress_bar_done();
compute_candidates::80::247.8679::        /* Loop on candidates, keep the best one. */
compute_candidates::81::186.4807::        g_bm_votes = -1;
compute_candidates::82::196.7611::        g_bm_total_votes = 0;
compute_candidates::83::172.1345::        g_bm_count=0;
compute_candidates::84::354.1133::        addrtree_browse(p_candidates, find_best_match, 0);
compute_candidates::85::373.8572::        logm("[i] Found %d base addresses to test\n", g_bm_count);
compute_candidates::86::98.2313::        /*
compute_candidates::87::255.6565::         * Best match address corresponds to the address for which we identified
compute_candidates::88::299.2051::         * the biggest numbers of alleged pointers. The best match is not always
compute_candidates::89::329.3143::         * the correct base address, so we just display it here and try to assess
compute_candidates::90::254.9821::         * other candidates in case we missed the correct base address.
compute_candidates::91::97.8910::         */
compute_candidates::92::267.6683::        gp_ba_candidates = (base_address_candidate *)malloc(sizeof(base_address_candidate) * g_bm_count);
compute_candidates::93::257.9983::        if (gp_ba_candidates != NULL)
compute_candidates::94::90.8645::        {
compute_candidates::95::359.3020::            max_votes = addrtree_max_vote(p_candidates);
compute_candidates::96::217.5377::            g_bm_kept = 0;
compute_candidates::97::257.0464::            gp_ba_candidates_index = 0;
compute_candidates::98::401.4147::            addrtree_browse(p_candidates, fill_best_matches, 0);
compute_candidates::99::221.5223::            info("tree browsed\n");
compute_candidates::100::266.8933::            if (g_target_arch == ARCH_64)
compute_candidates::101::556.3418::                info("Best match for base address is %016lx (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::102::116.3980::            else
compute_candidates::103::534.6783::                info("Best match for base address is %08x (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::104::195.1041::            /* Sort candidates array. */
compute_candidates::105::547.9604::            qsort(gp_ba_candidates, g_bm_count, sizeof(base_address_candidate), candidate_compare_func);
compute_candidates::106::369.3596::            debug("Found %d candidates !\n", gp_ba_candidates_index);
compute_candidates::107::383.9564::            for (i=0; i<gp_ba_candidates_index; i++)
compute_candidates::108::115.8476::            {
compute_candidates::109::837.6441::                debug("Found candidate address %016lx (votes: %d, position: %d)\n", gp_ba_candidates[i].address, gp_ba_candidates[i].votes, i+1);
compute_candidates::110::114.2636::            }
compute_candidates::111::134.9592::            if (!g_deepmode)
compute_candidates::113::534.4821::                for (i=max_votes;i>=0;i--)
compute_candidates::114::177.0377::                {
compute_candidates::115::343.8321::                    g_bm_kept = 0;
compute_candidates::116::521.2549::                    for (j=0;j<g_bm_count;j++)
compute_candidates::117::201.6758::                    {
compute_candidates::118::492.9790::                        if (gp_ba_candidates[j].votes >= i)
compute_candidates::119::242.2797::                        {
compute_candidates::120::377.8985::                            g_bm_kept++;
compute_candidates::121::235.4446::                        }
compute_candidates::122::198.9693::                    }
compute_candidates::123::372.2316::                    if (g_bm_kept>=30)
compute_candidates::124::204.7925::                    {
compute_candidates::125::373.5859::                        max_votes = i+1;
compute_candidates::126::277.6299::                        break;
compute_candidates::127::205.0152::                    }
compute_candidates::128::173.7680::                }
compute_candidates::129::141.7870::            }
compute_candidates::130::143.1487::            else
compute_candidates::131::141.6301::            {
compute_candidates::132::448.6540::                g_bm_kept = gp_ba_candidates_index;
compute_candidates::133::118.4992::                max_votes = 0;
compute_candidates::134::223.3545::            }            
compute_candidates::135::507.0530::            info("Keep %d candidates with max vote=%d\n", g_bm_kept, max_votes);
compute_candidates::136::138.4861::            /*
compute_candidates::137::313.6420::             * Loop on candidate base addresses and check if arrays of values may
compute_candidates::138::325.6885::             * point to known point of interests (text strings or other arrays).
compute_candidates::139::132.8885::             * 
compute_candidates::140::322.8318::             * This method gives good results when at least one array contains a
compute_candidates::141::238.1838::             * list of pointers to text strings.
compute_candidates::142::131.6328::             */
compute_candidates::143::274.5800::            /* Allocate memory for our score table. */
compute_candidates::144::551.5130::            p_scores = (score_entry_t*)malloc(sizeof(score_entry_t) * g_bm_kept);
compute_candidates::145::161.6787::            z=0;
compute_candidates::146::234.2716::            if (p_scores != NULL)
compute_candidates::147::114.8529::            {
compute_candidates::148::502.6000::                memset(p_scores, 0, sizeof(score_entry_t)*g_bm_kept);
compute_candidates::149::383.6968::                /* Compute the number of candidates each thread is going to check. */
compute_candidates::150::345.8688::                z = g_bm_kept / g_nb_threads;
compute_candidates::151::345.2003::                /* Allocate some space to store the threads id. */
compute_candidates::152::544.8922::                p_threads = (pthread_t *)malloc(sizeof(pthread_t) * g_nb_threads);
compute_candidates::153::726.9273::                p_threads_params = (parallel_params_t *)malloc(sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::154::470.2502::                if ((p_threads != NULL) && (p_threads_params != NULL))
compute_candidates::155::147.9779::                {
compute_candidates::156::550.0946::                    memset(p_threads, 0, sizeof(pthread_t) * g_nb_threads);
compute_candidates::157::619.0482::                    memset(p_threads_params, 0, sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::158::298.0390::                    g_bm_processed = 0;
compute_candidates::159::423.7026::                    info("Starting %d threads ...\n", g_nb_threads);
compute_candidates::160::341.1245::                    /* Create `g_nb_threads`. */
compute_candidates::161::437.5537::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::162::184.0810::                    {
compute_candidates::163::483.3433::                        p_threads_params[i].p_scores = p_scores;
compute_candidates::164::548.2199::                        p_threads_params[i].p_poi_list = p_poi_list;
compute_candidates::165::459.6764::                        p_threads_params[i].p_candidates = p_candidates;
compute_candidates::166::538.5135::                        p_threads_params[i].arch = g_target_arch;
compute_candidates::167::543.4697::                        p_threads_params[i].endian = g_target_endian;
compute_candidates::168::461.7510::                        p_threads_params[i].content = gp_content;
compute_candidates::169::549.7848::                        p_threads_params[i].ui_content_size = g_content_size;
compute_candidates::170::476.6974::                        p_threads_params[i].lock = &deep_lock;
compute_candidates::171::463.3126::                        p_threads_params[i].start = i*z;
compute_candidates::172::421.7335::                        p_threads_params[i].count = z;
compute_candidates::173::440.2706::                        if (i == (g_nb_threads - 1))
compute_candidates::174::227.5212::                        {
compute_candidates::175::518.0968::                            if ((i*z + z) < g_bm_kept)
compute_candidates::176::268.6962::                            {
compute_candidates::177::794.8373::                                p_threads_params[i].count = g_bm_kept -   p_threads_params[i].start;
compute_candidates::178::240.2217::                            }
compute_candidates::179::244.0601::                        }
compute_candidates::180::1148.6722::                        info("Thread #%d will cover %d to %d\n", i, p_threads_params[i].start, p_threads_params[i].start+p_threads_params[i].count);
compute_candidates::181::308.0058::                        pthread_create(
compute_candidates::182::379.9752::                            &p_threads[i],
compute_candidates::183::302.5558::                            NULL,
compute_candidates::184::384.3703::                            parallel_refine_candidates,
compute_candidates::185::485.7870::                            (void *)&p_threads_params[i]
compute_candidates::186::232.7768::                        );
compute_candidates::187::188.0028::                    }
compute_candidates::188::390.8441::                    /* Wait for these threads to finish. */
compute_candidates::189::498.0531::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::190::196.9986::                    {
compute_candidates::191::506.4117::                        pthread_join(p_threads[i], NULL);
compute_candidates::192::195.5263::                    }
compute_candidates::193::306.0726::                    progress_bar_done();
compute_candidates::194::171.9416::                    max_address = g_max_address;
compute_candidates::195::369.4427::                    /* Free pthreads. */
compute_candidates::196::329.5096::                    free(p_threads);
compute_candidates::197::348.6776::                    free(p_threads_params);
compute_candidates::198::163.9911::                }
compute_candidates::199::164.9054::                else
compute_candidates::200::163.5907::                {
compute_candidates::201::451.3418::                    error("Cannot allocate memory for multi-threaded search.");
compute_candidates::202::160.3268::                }
compute_candidates::203::499.8896::                info("Best match based on pointers count: %016lx\n", max_address);
compute_candidates::204::391.6694::                /* Check if we have a single candidate with valid array. */
compute_candidates::205::209.1476::                count = 0;
compute_candidates::206::426.6831::                for (i=0; i<g_bm_kept; i++)
compute_candidates::207::158.0412::                {
compute_candidates::208::464.3743::                    if (p_scores[i].has_valid_array > 0)
compute_candidates::209::196.8852::                    {
compute_candidates::210::270.3919::                        count++;
compute_candidates::211::197.0369::                    }
compute_candidates::212::169.2236::                }
compute_candidates::213::272.5481::                if (count == 1)
compute_candidates::214::162.9337::                {
compute_candidates::215::371.5960::                    for (i=0; i<g_bm_kept; i++)
Msg::1::78.7717::void  Msg() {
Msg::2::408.1648::	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::3::10.4084::}
Add::1::139.8650::int  Add(int a, int b) {
Add::2::95.6055::	int* p = &a;
Add::3::150.6759::	*(p-1) = (int)Msg;
Add::4::69.2367::	return a + b;
Add::5::10.2770::}
main::1::54.6297::void main() {
main::2::138.8641::	printf("%d", Add(1, 2));
main::3::59.6045::	system("pause");
main::4::35.3849::	return;
main::5::10.1404::}
derive_spatial_luma_vector_prediction::1::230.1341::// 8.5.3.1.6
derive_spatial_luma_vector_prediction::2::431.3482::void derive_spatial_luma_vector_prediction(base_context* ctx,
derive_spatial_luma_vector_prediction::3::493.5695::                                           de265_image* img,
derive_spatial_luma_vector_prediction::4::531.9108::                                           const slice_segment_header* shdr,
derive_spatial_luma_vector_prediction::5::689.5804::                                           int xC,int yC,int nCS,int xP,int yP,
derive_spatial_luma_vector_prediction::6::594.9593::                                           int nPbW,int nPbH, int X,
derive_spatial_luma_vector_prediction::7::537.1721::                                           int refIdxLX, int partIdx,
derive_spatial_luma_vector_prediction::8::595.5970::                                           uint8_t out_availableFlagLXN[2],
derive_spatial_luma_vector_prediction::9::544.6716::                                           MotionVector out_mvLXN[2])
derive_spatial_luma_vector_prediction::10::39.6299::{
derive_spatial_luma_vector_prediction::11::301.2087::  if (refIdxLX >= MAX_NUM_REF_PICS) {
derive_spatial_luma_vector_prediction::12::532.1599::    ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::13::340.5375::    img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::14::92.1616::    out_availableFlagLXN[0] = false;
derive_spatial_luma_vector_prediction::15::202.5281::    out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::16::221.1711::    out_mvLXN[0] = MotionVector{};
derive_spatial_luma_vector_prediction::17::217.5882::    out_mvLXN[1] = MotionVector{};
derive_spatial_luma_vector_prediction::18::64.8187::    return;
derive_spatial_luma_vector_prediction::19::34.8934::  }
derive_spatial_luma_vector_prediction::20::144.6198::  int isScaledFlagLX = 0;
derive_spatial_luma_vector_prediction::21::97.8417::  const int A=0;
derive_spatial_luma_vector_prediction::22::97.2986::  const int B=1;
derive_spatial_luma_vector_prediction::23::169.4641::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::24::170.4811::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::25::74.3089::  // --- A ---
derive_spatial_luma_vector_prediction::26::61.9744::  // 1.
derive_spatial_luma_vector_prediction::27::155.8167::  int xA[2], yA[2];
derive_spatial_luma_vector_prediction::28::148.9188::  xA[0] = xP-1;
derive_spatial_luma_vector_prediction::29::176.0562::  yA[0] = yP + nPbH;
derive_spatial_luma_vector_prediction::30::153.7812::  xA[1] = xA[0];
derive_spatial_luma_vector_prediction::31::177.5799::  yA[1] = yA[0]-1;
derive_spatial_luma_vector_prediction::32::59.3073::  // 2.
derive_spatial_luma_vector_prediction::33::168.2144::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::34::180.2883::  out_mvLXN[A].x = 0;
derive_spatial_luma_vector_prediction::35::185.5391::  out_mvLXN[A].y = 0;
derive_spatial_luma_vector_prediction::36::97.2497::  // 3. / 4.
derive_spatial_luma_vector_prediction::37::99.0050::  bool availableA[2];
derive_spatial_luma_vector_prediction::38::644.4591::  availableA[0] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[0],yA[0]);
derive_spatial_luma_vector_prediction::39::655.7600::  availableA[1] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[1],yA[1]);
derive_spatial_luma_vector_prediction::40::62.7414::  // 5.
derive_spatial_luma_vector_prediction::41::199.4772::  if (availableA[0] || availableA[1]) {
derive_spatial_luma_vector_prediction::42::142.9057::    isScaledFlagLX = 1;
derive_spatial_luma_vector_prediction::43::35.8248::  }
derive_spatial_luma_vector_prediction::44::187.6632::  // 6.  test A0 and A1  (Ak)
derive_spatial_luma_vector_prediction::45::122.8423::  int refIdxA=-1;
derive_spatial_luma_vector_prediction::46::165.8008::  // the POC we want to reference in this PB
derive_spatial_luma_vector_prediction::47::414.5409::  const de265_image* tmpimg = ctx->get_image(shdr->RefPicList[X][ refIdxLX ]);
derive_spatial_luma_vector_prediction::48::170.4601::  if (tmpimg==NULL) { return; }
derive_spatial_luma_vector_prediction::49::44.9284::  const int referenced_POC = tmpimg->PicOrderCntVal;
derive_spatial_luma_vector_prediction::51::151.1843::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::52::377.4350::        out_availableFlagLXN[A]==0 && // no A?-predictor so far
derive_spatial_luma_vector_prediction::53::407.4319::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::54::142.5447::      int Y=1-X;
derive_spatial_luma_vector_prediction::55::381.2228::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::56::260.0481::      logtrace(LogMotion,"MVP A%d=\n",k);
derive_spatial_luma_vector_prediction::57::141.3833::      logmvcand(vi);
derive_spatial_luma_vector_prediction::58::191.9453::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::59::524.1889::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::60::196.6299::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::61::539.1241::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::62::234.8116::      // check whether the predictor X is available and references the same POC
derive_spatial_luma_vector_prediction::63::399.5859::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::64::420.3488::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::65::219.7479::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::66::288.7475::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::67::234.2914::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::68::64.9098::      }
derive_spatial_luma_vector_prediction::69::285.0236::      // check whether the other predictor (Y) is available and references the same POC
derive_spatial_luma_vector_prediction::70::423.2102::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::71::458.6632::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::72::226.0326::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::73::290.3179::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::74::228.4218::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::75::62.9539::      }
derive_spatial_luma_vector_prediction::76::47.7499::    }
derive_spatial_luma_vector_prediction::77::36.2193::  }
derive_spatial_luma_vector_prediction::78::301.8848::  // 7. If there is no predictor referencing the same POC, we take any other reference as
derive_spatial_luma_vector_prediction::79::289.9316::  //    long as it is the same type of reference (long-term / short-term)
derive_spatial_luma_vector_prediction::80::364.8517::  for (int k=0 ; k<=1 && out_availableFlagLXN[A]==0 ; k++) {
derive_spatial_luma_vector_prediction::81::128.0671::    int refPicList=-1;
derive_spatial_luma_vector_prediction::82::136.2762::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::83::318.8507::        // TODO: we could remove this call by storing the result of the similar computation above
derive_spatial_luma_vector_prediction::84::399.5252::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::85::141.6382::      int Y=1-X;
derive_spatial_luma_vector_prediction::86::381.9064::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::87::210.3310::      if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::88::556.2764::          shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::89::446.8063::        logtrace(LogMotion,"take A%D/L%d as A candidate with different POCs\n",k,X);
derive_spatial_luma_vector_prediction::90::231.6211::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::91::297.6886::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::92::245.1558::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::93::154.9092::        refPicList = X;
derive_spatial_luma_vector_prediction::94::33.4300::      }
derive_spatial_luma_vector_prediction::96::655.3190::               shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::97::457.5874::        logtrace(LogMotion,"take A%d/L%d as A candidate with different POCs\n",k,Y);
derive_spatial_luma_vector_prediction::98::221.5365::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::99::296.0308::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::100::236.2637::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::101::146.7216::        refPicList = Y;
derive_spatial_luma_vector_prediction::102::64.7599::      }
derive_spatial_luma_vector_prediction::103::53.9657::    }
derive_spatial_luma_vector_prediction::104::233.7932::    if (out_availableFlagLXN[A]==1) {
derive_spatial_luma_vector_prediction::105::177.0657::      if (refIdxA<0) {
derive_spatial_luma_vector_prediction::106::357.4395::        out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::107::129.5664::        return; // error
derive_spatial_luma_vector_prediction::108::66.2000::      }
derive_spatial_luma_vector_prediction::109::183.7471::      assert(refIdxA>=0);
derive_spatial_luma_vector_prediction::110::177.7560::      assert(refPicList>=0);
derive_spatial_luma_vector_prediction::111::491.3536::      const de265_image* refPicA = ctx->get_image(shdr->RefPicList[refPicList][refIdxA ]);
derive_spatial_luma_vector_prediction::112::546.7984::      const de265_image* refPicX = ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::113::389.2231::      //int picStateA = shdr->RefPicList_PicState[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::114::440.0976::      //int picStateX = shdr->RefPicList_PicState[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::115::367.5873::      int isLongTermA = shdr->LongTermRefPic[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::116::291.0103::      int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::117::445.6613::      logtrace(LogMotion,"scale MVP A: A-POC:%d X-POC:%d\n",
derive_spatial_luma_vector_prediction::118::393.4401::               refPicA->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::119::228.9388::      if (!isLongTermA && !isLongTermX)
derive_spatial_luma_vector_prediction::120::75.9930::      /*
derive_spatial_luma_vector_prediction::121::213.8279::      if (picStateA == UsedForShortTermReference &&
derive_spatial_luma_vector_prediction::122::220.4923::          picStateX == UsedForShortTermReference)
derive_spatial_luma_vector_prediction::123::69.7650::      */
derive_spatial_luma_vector_prediction::124::79.2694::        {
derive_spatial_luma_vector_prediction::125::361.6357::          int distA = img->PicOrderCntVal - refPicA->PicOrderCntVal;
derive_spatial_luma_vector_prediction::126::302.6607::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::127::510.5249::          if (!scale_mv(&out_mvLXN[A], out_mvLXN[A], distA, distX)) {
derive_spatial_luma_vector_prediction::128::481.5593::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::129::323.1897::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::130::92.3894::          }
derive_spatial_luma_vector_prediction::131::76.7261::        }
derive_spatial_luma_vector_prediction::132::48.9404::    }
derive_spatial_luma_vector_prediction::133::35.0834::  }
derive_spatial_luma_vector_prediction::134::77.2022::  // --- B ---
derive_spatial_luma_vector_prediction::135::68.7442::  // 1.
derive_spatial_luma_vector_prediction::136::173.7636::  int xB[3], yB[3];
derive_spatial_luma_vector_prediction::137::195.0061::  xB[0] = xP+nPbW;
derive_spatial_luma_vector_prediction::138::166.3580::  yB[0] = yP-1;
derive_spatial_luma_vector_prediction::139::192.5570::  xB[1] = xB[0]-1;
derive_spatial_luma_vector_prediction::140::168.0833::  yB[1] = yP-1;
derive_spatial_luma_vector_prediction::141::166.3864::  xB[2] = xP-1;
derive_spatial_luma_vector_prediction::142::165.2324::  yB[2] = yP-1;
derive_spatial_luma_vector_prediction::143::69.1027::  // 2.
derive_spatial_luma_vector_prediction::144::187.7793::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::145::201.7265::  out_mvLXN[B].x = 0;
derive_spatial_luma_vector_prediction::146::201.5637::  out_mvLXN[B].y = 0;
derive_spatial_luma_vector_prediction::147::6.1714::  // 3. test B0,B1,B2 (Bk)
xmlValidateElementContent::1::231.4843::xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
xmlValidateElementContent::2::277.9716::if ((elemDecl == NULL) || (parent == NULL) || (ctxt == NULL))
xmlValidateElementContent::3::68.0715::return(-1);
xmlValidateElementContent::4::101.2808::cont = elemDecl->content;
xmlValidateElementContent::5::177.3839::ret = xmlValidBuildContentModel(ctxt, elemDecl);
xmlValidateElementContent::6::141.9623::if (elemDecl->contModel == NULL) {
xmlValidateElementContent::7::65.5963::return(-1);
xmlValidateElementContent::8::97.3728::xmlRegExecCtxtPtr exec;
xmlValidateElementContent::9::60.7869::return(-1);
xmlValidateElementContent::10::98.9142::ctxt->nodeMax = 0;
xmlValidateElementContent::11::58.9500::cur = child;
xmlValidateElementContent::12::96.2391::while (cur != NULL) {
xmlValidateElementContent::13::89.6512::switch (cur->type) {
xmlValidateElementContent::14::125.0150::if ((cur->children != NULL) &&
xmlValidateElementContent::15::134.1884::(cur->children->children != NULL)) {
xmlValidateElementContent::16::113.1826::nodeVPush(ctxt, cur);
xmlValidateElementContent::17::38.1961::break;
xmlValidateElementContent::18::124.5482::if (xmlIsBlankNode(cur))
xmlValidateElementContent::19::40.7488::break;
xmlValidateElementContent::20::57.2571::ret = 0;
xmlValidateElementContent::21::55.8067::ret = 0;
xmlValidateElementContent::22::236.4633::if ((cur->ns != NULL) && (cur->ns->prefix != NULL)) {
xmlValidateElementContent::23::80.9933::xmlChar fn[50];
xmlValidateElementContent::24::67.7538::ret = -1;
xmlValidateElementContent::25::182.7823::ret = xmlRegExecPushString(exec, fullname, NULL);
xmlValidateElementContent::26::212.0552::if ((fullname != fn) && (fullname != cur->name))
xmlValidateElementContent::27::87.8150::xmlFree(fullname);
xmlValidateElementContent::28::47.9498::} else {
xmlValidateElementContent::29::197.7066::ret = xmlRegExecPushString(exec, cur->name, NULL);
xmlValidateElementContent::30::38.2441::break;
xmlValidateElementContent::31::39.1788::break;
xmlValidateElementContent::32::83.2723::cur = cur->next;
xmlValidateElementContent::33::96.3375::while (cur == NULL) {
xmlValidateElementContent::34::111.9582::cur = nodeVPop(ctxt);
xmlValidateElementContent::35::38.2359::break;
xmlValidateElementContent::36::83.3555::cur = cur->next;
xmlValidateElementContent::37::174.3302::ret = xmlRegExecPushString(exec, NULL, NULL);
xmlValidateElementContent::38::113.7528::xmlRegFreeExecCtxt(exec);
xmlValidateElementContent::39::236.8989::if ((warn) && ((ret != 1) && (ret != -3))) {
xmlValidateElementContent::40::104.5833::if (ctxt != NULL) {
xmlValidateElementContent::41::74.7096::char expr[5000];
xmlValidateElementContent::42::258.2154::xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,
xmlValidateElementContent::43::258.9551::xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,
xmlValidateElementContent::44::50.1479::} else {
xmlValidateElementContent::45::98.6967::if (name != NULL) {
xmlValidateElementContent::46::261.7969::xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,
xmlValidateElementContent::47::268.6311::xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,
xmlValidateElementContent::48::63.2403::ret = 0;
xmlValidateElementContent::49::94.9872::if (ret == -3)
xmlValidateElementContent::50::61.1895::ret = 1;
xmlValidateElementContent::51::21.2127::ctxt->nodeMax = 0;
xmlAddRef::1::283.5717::xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
xmlAddRef::2::75.1079::return(NULL);
xmlAddRef::3::99.5161::if (value == NULL) {
xmlAddRef::4::74.4607::return(NULL);
xmlAddRef::5::100.2503::if (attr == NULL) {
xmlAddRef::6::72.8582::return(NULL);
xmlAddRef::7::161.5318::table = (xmlRefTablePtr) doc->refs;
xmlAddRef::8::224.2728::doc->refs = table = xmlHashCreateDict(0, doc->dict);
xmlAddRef::9::93.6295::if (table == NULL) {
xmlAddRef::10::101.8713::xmlVErrMemory(ctxt,
xmlAddRef::11::218.2621::ret = (xmlRefPtr) xmlMalloc(sizeof(xmlRef));
xmlAddRef::12::162.9993::xmlVErrMemory(ctxt, "malloc failed");
xmlAddRef::13::136.9154::ret->value = xmlStrdup(value);
xmlAddRef::14::237.4514::if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {
xmlAddRef::15::163.7675::ret->name = xmlStrdup(attr->name);
xmlAddRef::16::84.8453::ret->name = NULL;
xmlAddRef::17::176.2567::ret->lineno = xmlGetLineNo(attr->parent);
xmlAddRef::18::278.3838::if (NULL == (ref_list = xmlListCreate(xmlFreeRef, xmlDummyCompare))) {
xmlAddRef::19::216.8588::xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,
xmlAddRef::20::223.0087::if (xmlHashAddEntry(table, value, ref_list) < 0) {
xmlAddRef::21::107.8909::xmlListDelete(ref_list);
xmlAddRef::22::27.7471::}
xmlAddRef::23::201.0310::if (xmlListAppend(ref_list, ret) != 0) {
xmlAddRef::24::202.3536::xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,
xmlAddRef::25::64.5075::return(ret);
xmlAddRef::26::93.3576::if (ret != NULL) {
xmlAddRef::27::103.3814::if (ret->value != NULL)
xmlAddRef::28::120.8020::xmlFree((char *)ret->value);
xmlAddRef::29::102.6470::if (ret->name != NULL)
xmlAddRef::30::123.3394::xmlFree((char *)ret->name);
xmlAddRef::31::71.7462::xmlFree(ret);
xmlAddRef::32::47.0342::return(NULL);
xmlValidateNotationUse::1::253.4958::xmlValidateNotationUse(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
xmlValidateNotationUse::2::230.0538::if ((doc == NULL) || (doc->intSubset == NULL) ||
xmlValidateNotationUse::3::144.6149::(notationName == NULL)) return(-1);
xmlValidateNotationUse::4::252.6930::notaDecl = xmlGetDtdNotationDesc(doc->intSubset, notationName);
xmlValidateNotationUse::5::229.3221::if ((notaDecl == NULL) && (doc->extSubset != NULL))
xmlValidateNotationUse::6::241.3764::notaDecl = xmlGetDtdNotationDesc(doc->extSubset, notationName);
xmlValidateNotationUse::7::202.4194::if ((notaDecl == NULL) && (ctxt != NULL)) {
xmlValidateNotationUse::8::289.3184::xmlErrValidNode(ctxt, (xmlNodePtr) doc, XML_DTD_UNKNOWN_NOTATION,
xmlValidateNotationUse::9::43.0633::return(1);
xmlValidGetValidElements::1::287.3413::xmlValidGetValidElements(xmlNode *prev, xmlNode *next, const xmlChar **names,
xmlValidGetValidElements::2::145.2028::if (prev == NULL && next == NULL)
xmlValidGetValidElements::3::71.7299::return(-1);
xmlValidGetValidElements::4::140.2831::if (names == NULL) return(-1);
xmlValidGetValidElements::5::135.3471::if (max <= 0) return(-1);
xmlValidGetValidElements::6::199.6421::memset(&vctxt, 0, sizeof (xmlValidCtxt));
xmlValidGetValidElements::7::128.4949::ref_node = prev ? prev : next;
xmlValidGetValidElements::8::246.7806::if ((element_desc == NULL) && (parent->doc->extSubset != NULL))
xmlValidGetValidElements::9::218.9359::element_desc = xmlGetDtdElementDesc(parent->doc->extSubset,
xmlValidGetValidElements::10::154.0370::if (element_desc == NULL) return(-1);
xmlValidGetValidElements::11::159.5523::prev_next = prev ? prev->next : NULL;
xmlValidGetValidElements::12::158.2443::next_prev = next ? next->prev : NULL;
xmlValidGetValidElements::13::66.9503::return(-1);
xmlValidGetValidElements::14::104.7729::test_node->parent = parent;
xmlValidGetValidElements::15::152.1536::if (prev) prev->next = test_node;
xmlValidGetValidElements::16::117.6489::else parent->children = test_node;
xmlValidGetValidElements::17::153.3584::if (next) next->prev = test_node;
xmlValidGetValidElements::18::119.3823::else parent->last = test_node;
xmlValidGetValidElements::19::218.2662::nb_elements = xmlValidGetPotentialChildren(element_desc->content,
xmlValidGetValidElements::20::206.7146::for (i = 0;i < nb_elements;i++) {
xmlValidGetValidElements::21::130.7542::test_node->name = elements[i];
xmlValidGetValidElements::22::49.7080::int j;
xmlValidGetValidElements::23::207.2618::for (j = 0; j < nb_valid_elements;j++)
xmlValidGetValidElements::24::227.0202::if (xmlStrEqual(elements[i], names[j])) break;
xmlValidGetValidElements::25::174.3733::names[nb_valid_elements++] = elements[i];
xmlValidGetValidElements::26::154.1715::if (nb_valid_elements >= max) break;
xmlValidGetValidElements::27::24.5577::}
xmlValidGetValidElements::28::24.2832::}
xmlValidGetValidElements::29::155.0285::if (prev) prev->next = prev_next;
xmlValidGetValidElements::30::152.0786::if (next) next->prev = next_prev;
xmlValidGetValidElements::31::94.5918::parent->children = parent_childs;
xmlFreeValidCtxt::1::171.8865::xmlFreeValidCtxt(xmlValidCtxtPtr cur) {
xmlFreeValidCtxt::2::114.5012::xmlFree(cur->vstateTab);
xmlFreeValidCtxt::3::112.1723::if (cur->nodeTab != NULL)
xmlFreeValidCtxt::4::86.5758::xmlFree(cur->nodeTab);
xmlFreeNotation::1::164.0596::xmlFreeNotation(xmlNotationPtr nota) {
xmlFreeNotation::2::122.1203::if (nota == NULL) return;
xmlFreeNotation::3::121.8510::if (nota->name != NULL)
xmlFreeNotation::4::149.2005::xmlFree((xmlChar *) nota->name);
xmlFreeNotation::5::126.4912::if (nota->PublicID != NULL)
xmlFreeNotation::6::154.5560::xmlFree((xmlChar *) nota->PublicID);
xmlFreeNotation::7::116.8256::if (nota->SystemID != NULL)
xmlFreeNotation::8::143.4351::xmlFree((xmlChar *) nota->SystemID);
xmlFreeNotation::9::62.0113::xmlFree(nota);
xmlValidateElement::1::318.1756::xmlValidateElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem) {
xmlValidateElement::2::157.6943::if (elem == NULL) return(0);
xmlValidateElement::3::244.8051::if ((elem->type == XML_XINCLUDE_START) ||
xmlValidateElement::4::206.5701::(elem->type == XML_XINCLUDE_END) ||
xmlValidateElement::5::198.0705::(elem->type == XML_NAMESPACE_DECL))
xmlValidateElement::6::64.4689::return(1);
xmlValidateElement::7::67.1651::CHECK_DTD;
xmlValidateElement::8::212.9265::if (elem->type == XML_ENTITY_REF_NODE) {
xmlValidateElement::9::67.8929::return(1);
xmlValidateElement::10::205.2926::ret &= xmlValidateOneElement(ctxt, doc, elem);
xmlValidateElement::11::93.0141::attr = elem->properties;
xmlValidateElement::12::97.1053::while (attr != NULL) {
xmlValidateElement::13::201.0947::value = xmlNodeListGetString(doc, attr->children, 0);
xmlValidateElement::14::102.5696::xmlFree((char *)value);
xmlValidateElement::15::98.3110::attr= attr->next;
xmlValidateElement::16::100.5831::ns = elem->nsDef;
xmlValidateElement::17::94.9464::while (ns != NULL) {
xmlValidateElement::18::116.8272::if (elem->ns == NULL)
xmlValidateElement::19::239.2143::ret &= xmlValidateOneNamespace(ctxt, doc, elem, NULL,
xmlValidateElement::20::214.1454::ret &= xmlValidateOneNamespace(ctxt, doc, elem,
xmlValidateElement::21::88.4262::ns = ns->next;
xmlValidateElement::22::27.2732::}
xmlValidateElement::23::91.1765::child = elem->children;
xmlValidateElement::24::93.9168::while (child != NULL) {
xmlValidateElement::25::168.3288::ret &= xmlValidateElement(ctxt, doc, child);
xmlValidateElement::26::44.7961::return(ret);
xmlDumpElementContent::1::264.1280::xmlDumpElementContent(xmlBufferPtr buf, xmlElementContentPtr content, int glob) {
xmlDumpElementContent::2::115.2130::if (content == NULL) return;
xmlDumpElementContent::3::195.2047::if (glob) xmlBufferWriteChar(buf, "(");
xmlDumpElementContent::4::94.6543::switch (content->type) {
xmlDumpElementContent::5::146.7267::xmlBufferWriteChar(buf, "#PCDATA");
xmlDumpElementContent::6::114.3780::if (content->prefix != NULL) {
xmlDumpElementContent::7::147.3573::xmlBufferWriteCHAR(buf, content->prefix);
xmlDumpElementContent::8::141.9102::xmlBufferWriteCHAR(buf, content->name);
xmlDumpElementContent::9::244.3259::if ((content->c1->type == XML_ELEMENT_CONTENT_OR) ||
xmlDumpElementContent::10::235.9818::(content->c1->type == XML_ELEMENT_CONTENT_SEQ))
xmlDumpElementContent::11::183.1851::xmlDumpElementContent(buf, content->c1, 1);
xmlDumpElementContent::12::181.2018::xmlDumpElementContent(buf, content->c1, 0);
xmlDumpElementContent::13::138.0697::xmlBufferWriteChar(buf, " , ");
xmlDumpElementContent::14::246.4073::((content->c2->type == XML_ELEMENT_CONTENT_SEQ) &&
xmlDumpElementContent::15::258.8085::(content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)))
xmlDumpElementContent::16::190.6616::xmlDumpElementContent(buf, content->c2, 1);
xmlDumpElementContent::17::186.9776::xmlDumpElementContent(buf, content->c2, 0);
xmlDumpElementContent::18::39.4287::break;
xmlDumpElementContent::19::259.7545::if ((content->c1->type == XML_ELEMENT_CONTENT_OR) ||
xmlDumpElementContent::20::239.4531::(content->c1->type == XML_ELEMENT_CONTENT_SEQ))
xmlDumpElementContent::21::181.1976::xmlDumpElementContent(buf, content->c1, 1);
xmlDumpElementContent::22::187.6613::xmlDumpElementContent(buf, content->c1, 0);
xmlDumpElementContent::23::138.9396::xmlBufferWriteChar(buf, " | ");
xmlDumpElementContent::24::246.1705::((content->c2->type == XML_ELEMENT_CONTENT_OR) &&
xmlDumpElementContent::25::264.4305::(content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)))
xmlDumpElementContent::26::190.9012::xmlDumpElementContent(buf, content->c2, 1);
xmlDumpElementContent::27::186.9905::xmlDumpElementContent(buf, content->c2, 0);
xmlDumpElementContent::28::40.8379::break;
xmlDumpElementContent::29::216.8636::xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,
xmlDumpElementContent::30::72.1820::if (glob)
xmlDumpElementContent::31::136.9820::xmlBufferWriteChar(buf, ")");
xmlDumpElementContent::32::104.0171::switch (content->ocur) {
xmlDumpElementContent::33::42.2362::break;
xmlDumpElementContent::34::145.4631::xmlBufferWriteChar(buf, "?");
xmlDumpElementContent::35::138.5531::xmlBufferWriteChar(buf, "*");
xmlDumpElementContent::36::98.3615::xmlBufferWriteChar(buf, "+");
xmlIsDocNameStartChar::1::196.0305::xmlIsDocNameStartChar(xmlDocPtr doc, int c) {
xmlIsDocNameStartChar::2::295.3090::if ((doc == NULL) || (doc->properties & XML_DOC_OLD10) == 0) {
xmlIsDocNameStartChar::3::232.3288::if (((c >= 'a') && (c <= 'z')) ||
xmlIsDocNameStartChar::4::198.1741::((c >= 'A') && (c <= 'Z')) ||
xmlIsDocNameStartChar::5::178.5626::(c == '_') || (c == ':') ||
xmlIsDocNameStartChar::6::217.2351::((c >= 0xC0) && (c <= 0xD6)) ||
xmlIsDocNameStartChar::7::223.4035::((c >= 0xD8) && (c <= 0xF6)) ||
xmlIsDocNameStartChar::8::224.7858::((c >= 0xF8) && (c <= 0x2FF)) ||
xmlIsDocNameStartChar::9::208.8106::((c >= 0x370) && (c <= 0x37D)) ||
xmlIsDocNameStartChar::10::235.4855::((c >= 0x37F) && (c <= 0x1FFF)) ||
xmlIsDocNameStartChar::11::218.9649::((c >= 0x200C) && (c <= 0x200D)) ||
xmlIsDocNameStartChar::12::222.1825::((c >= 0x2070) && (c <= 0x218F)) ||
xmlIsDocNameStartChar::13::243.4955::((c >= 0x2C00) && (c <= 0x2FEF)) ||
xmlIsDocNameStartChar::14::237.9808::((c >= 0x3001) && (c <= 0xD7FF)) ||
xmlIsDocNameStartChar::15::241.0246::((c >= 0xF900) && (c <= 0xFDCF)) ||
xmlIsDocNameStartChar::16::233.8162::((c >= 0xFDF0) && (c <= 0xFFFD)) ||
xmlIsDocNameStartChar::17::198.3010::((c >= 0x10000) && (c <= 0xEFFFF)))
xmlIsDocNameStartChar::18::61.6862::return(1);
xmlIsDocNameStartChar::19::47.2167::} else {
xmlIsDocNameStartChar::20::252.3943::if (IS_LETTER(c) || (c == '_') || (c == ':'))
xmlIsDocNameStartChar::21::57.1624::return(1);
xmlIsDocNameStartChar::22::44.9373::return(0);
xmlDumpElementTable::1::215.4487::xmlDumpElementTable(xmlBufferPtr buf, xmlElementTablePtr table) {
xmlDumpElementTable::2::159.0663::if ((buf == NULL) || (table == NULL))
xmlDumpElementTable::3::41.5482::return;
xmlDumpElementTable::4::219.6275::xmlHashScan(table, (xmlHashScanner) xmlDumpElementDeclScan, buf);
xmlValidateNotationCallback::1::248.9720::xmlValidateNotationCallback(xmlEntityPtr cur, xmlValidCtxtPtr ctxt,
xmlValidateNotationCallback::2::44.0178::return;
xmlValidateNotationCallback::3::294.3613::if (cur->etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY) {
xmlValidateNotationCallback::4::109.0996::xmlChar *notation = cur->content;
xmlValidateNotationCallback::5::48.9139::int ret;
xmlValidateNotationCallback::6::84.0351::ctxt->valid = 0;
xmlValidateNotationCallback::7::23.5077::}
xmlValidateNotationCallback::8::9.2782::}
xmlFreeAttribute::1::141.1349::xmlFreeAttribute(xmlAttributePtr attr) {
xmlFreeAttribute::2::111.5145::if (attr == NULL) return;
xmlFreeAttribute::3::109.9828::if (attr->doc != NULL)
xmlFreeAttribute::4::121.5518::dict = attr->doc->dict;
xmlFreeAttribute::5::64.8326::dict = NULL;
xmlFreeAttribute::6::159.5009::xmlUnlinkNode((xmlNodePtr) attr);
xmlFreeAttribute::7::126.2627::xmlFreeEnumeration(attr->tree);
xmlFreeAttribute::8::65.6520::if (dict) {
xmlFreeAttribute::9::310.9113::if ((attr->elem != NULL) && (!xmlDictOwns(dict, attr->elem)))
xmlFreeAttribute::10::153.6781::xmlFree((xmlChar *) attr->elem);
xmlFreeAttribute::11::285.7333::if ((attr->name != NULL) && (!xmlDictOwns(dict, attr->name)))
xmlFreeAttribute::12::141.7728::xmlFree((xmlChar *) attr->name);
xmlFreeAttribute::13::280.9003::if ((attr->prefix != NULL) && (!xmlDictOwns(dict, attr->prefix)))
xmlFreeAttribute::14::142.6008::xmlFree((xmlChar *) attr->prefix);
xmlFreeAttribute::15::129.4537::if ((attr->defaultValue != NULL) &&
xmlFreeAttribute::16::191.4677::(!xmlDictOwns(dict, attr->defaultValue)))
xmlFreeAttribute::17::149.6354::xmlFree((xmlChar *) attr->defaultValue);
xmlFreeAttribute::18::47.1304::} else {
xmlFreeAttribute::19::116.0413::if (attr->elem != NULL)
xmlFreeAttribute::20::157.1765::xmlFree((xmlChar *) attr->elem);
xmlFreeAttribute::21::101.9615::if (attr->name != NULL)
xmlFreeAttribute::22::143.9037::xmlFree((xmlChar *) attr->name);
xmlFreeAttribute::23::111.2449::if (attr->defaultValue != NULL)
xmlFreeAttribute::24::147.3715::xmlFree((xmlChar *) attr->defaultValue);
xmlFreeAttribute::25::98.6557::if (attr->prefix != NULL)
xmlFreeAttribute::26::129.5496::xmlFree((xmlChar *) attr->prefix);
xmlFreeAttribute::27::50.2705::xmlFree(attr);
xmlCopyAttribute::1::146.5981::xmlCopyAttribute(xmlAttributePtr attr) {
xmlCopyAttribute::2::156.7598::xmlVErrMemory(NULL, "malloc failed");
xmlCopyAttribute::3::169.3916::memset(cur, 0, sizeof(xmlAttribute));
xmlCopyAttribute::4::187.7995::cur->elem = xmlStrdup(attr->elem);
xmlCopyAttribute::5::108.0205::if (attr->name != NULL)
xmlCopyAttribute::6::153.5389::cur->name = xmlStrdup(attr->name);
xmlCopyAttribute::7::103.4581::if (attr->prefix != NULL)
xmlCopyAttribute::8::151.1651::cur->prefix = xmlStrdup(attr->prefix);
xmlCopyAttribute::9::108.2681::if (attr->defaultValue != NULL)
xmlCopyAttribute::10::168.2945::cur->defaultValue = xmlStrdup(attr->defaultValue);
xmlCopyAttribute::11::46.4945::return(cur);
xmlValidateOneAttribute::1::237.2000::xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
xmlValidateOneAttribute::2::70.9274::CHECK_DTD;
xmlValidateOneAttribute::3::277.0089::if ((elem == NULL) || (elem->name == NULL)) return(0);
xmlValidateOneAttribute::4::248.2841::if ((attr == NULL) || (attr->name == NULL)) return(0);
xmlValidateOneAttribute::5::262.5507::if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {
xmlValidateOneAttribute::6::79.8955::xmlChar fn[50];
xmlValidateOneAttribute::7::64.4659::return(0);
xmlValidateOneAttribute::8::114.5093::if (attr->ns != NULL) {
xmlValidateOneAttribute::9::241.4438::attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, fullname,
xmlValidateOneAttribute::10::216.6160::if ((attrDecl == NULL) && (doc->extSubset != NULL))
xmlValidateOneAttribute::11::235.2245::attrDecl = xmlGetDtdQAttrDesc(doc->extSubset, fullname,
xmlValidateOneAttribute::12::50.3125::} else {
xmlValidateOneAttribute::13::286.1796::attrDecl = xmlGetDtdAttrDesc(doc->intSubset, fullname, attr->name);
xmlValidateOneAttribute::14::220.8012::if ((attrDecl == NULL) && (doc->extSubset != NULL))
xmlValidateOneAttribute::15::200.6543::attrDecl = xmlGetDtdAttrDesc(doc->extSubset,
xmlValidateOneAttribute::16::225.8897::if ((fullname != fn) && (fullname != elem->name))
xmlValidateOneAttribute::17::90.2887::xmlFree(fullname);
xmlValidateOneAttribute::18::27.0385::}
xmlValidateOneAttribute::19::105.3792::if (attrDecl == NULL) {
xmlValidateOneAttribute::20::118.4069::if (attr->ns != NULL) {
xmlValidateOneAttribute::21::260.6728::attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, elem->name,
xmlValidateOneAttribute::22::217.4206::if ((attrDecl == NULL) && (doc->extSubset != NULL))
xmlValidateOneAttribute::23::264.7663::attrDecl = xmlGetDtdQAttrDesc(doc->extSubset, elem->name,
xmlValidateOneAttribute::24::50.0530::} else {
xmlValidateOneAttribute::25::203.3892::attrDecl = xmlGetDtdAttrDesc(doc->intSubset,
xmlValidateOneAttribute::26::229.0616::if ((attrDecl == NULL) && (doc->extSubset != NULL))
xmlValidateOneAttribute::27::204.5266::attrDecl = xmlGetDtdAttrDesc(doc->extSubset,
xmlValidateOneAttribute::28::26.2118::}
xmlValidateOneAttribute::29::110.4729::if (attrDecl == NULL) {
xmlValidateOneAttribute::30::298.1170::xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,
xmlValidateOneAttribute::31::151.8409::attr->atype = attrDecl->atype;
xmlValidateOneAttribute::32::280.5492::xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_VALUE,
xmlValidateOneAttribute::33::228.3087::if (attrDecl->def == XML_ATTRIBUTE_FIXED) {
xmlValidateOneAttribute::34::96.9376::if (!xmlStrEqual(value, attrDecl->defaultValue)) {
xmlValidateOneAttribute::35::319.8753::xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_DEFAULT,
xmlValidateOneAttribute::36::28.9985::}
xmlValidateOneAttribute::37::231.3860::if (attrDecl->atype == XML_ATTRIBUTE_ID) {
xmlValidateOneAttribute::38::239.8155::if (xmlAddID(ctxt, doc, value, attr) == NULL)
xmlValidateOneAttribute::39::60.7760::ret = 0;
xmlValidateOneAttribute::40::26.9928::}
xmlValidateOneAttribute::41::238.8687::if ((attrDecl->atype == XML_ATTRIBUTE_IDREF) ||
xmlValidateOneAttribute::42::234.3371::(attrDecl->atype == XML_ATTRIBUTE_IDREFS)) {
xmlValidateOneAttribute::43::229.6808::if (xmlAddRef(ctxt, doc, value, attr) == NULL)
xmlValidateOneAttribute::44::59.3635::ret = 0;
xmlValidateOneAttribute::45::27.9035::}
xmlValidateOneAttribute::46::229.5327::if (attrDecl->atype == XML_ATTRIBUTE_NOTATION) {
xmlValidateOneAttribute::47::157.1528::xmlEnumerationPtr tree = attrDecl->tree;
xmlValidateOneAttribute::48::224.8760::nota = xmlGetDtdNotationDesc(doc->extSubset, value);
xmlValidateOneAttribute::49::105.3350::if (nota == NULL) {
xmlValidateOneAttribute::50::278.0334::xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_NOTATION,
xmlValidateOneAttribute::51::99.1187::while (tree != NULL) {
xmlValidateOneAttribute::52::194.1529::if (xmlStrEqual(tree->name, value)) break;
xmlValidateOneAttribute::53::84.0561::tree = tree->next;
xmlValidateOneAttribute::54::95.3879::if (tree == NULL) {
xmlValidateOneAttribute::55::262.3522::xmlErrValidNode(ctxt, elem, XML_DTD_NOTATION_VALUE,
xmlValidateOneAttribute::56::26.4754::}
xmlValidateOneAttribute::57::250.3347::if (attrDecl->atype == XML_ATTRIBUTE_ENUMERATION) {
xmlValidateOneAttribute::58::155.8448::xmlEnumerationPtr tree = attrDecl->tree;
xmlValidateOneAttribute::59::101.5075::while (tree != NULL) {
xmlValidateOneAttribute::60::188.8284::if (xmlStrEqual(tree->name, value)) break;
xmlValidateOneAttribute::61::83.9262::tree = tree->next;
xmlValidateOneAttribute::62::97.5845::if (tree == NULL) {
xmlValidateOneAttribute::63::288.1986::xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_VALUE,
xmlValidateOneAttribute::64::26.7377::}
xmlValidateOneAttribute::65::232.1111::if ((attrDecl->def == XML_ATTRIBUTE_FIXED) &&
xmlValidateOneAttribute::66::209.8575::(!xmlStrEqual(attrDecl->defaultValue, value))) {
xmlValidateOneAttribute::67::287.7870::xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_VALUE,
xmlValidateOneAttribute::68::217.0019::ret &= xmlValidateAttributeValue2(ctxt, doc, attr->name,
xmlValidateNameValueInternal::1::225.4938::xmlValidateNameValueInternal(xmlDocPtr doc, const xmlChar *value) {
xmlValidateNameValueInternal::2::140.5340::if (value == NULL) return(0);
xmlValidateNameValueInternal::3::63.4854::cur = value;
xmlValidateNameValueInternal::4::70.4566::return(0);
xmlValidateNameValueInternal::5::174.6642::val = xmlStringCurrentChar(NULL, cur, &len);
xmlValidateNameValueInternal::6::154.7533::while (xmlIsDocNameChar(doc, val)) {
xmlValidateNameValueInternal::7::160.7858::val = xmlStringCurrentChar(NULL, cur, &len);
xmlValidateNameValueInternal::8::121.3539::if (val != 0) return(0);
xmlValidateNameValueInternal::9::42.2446::return(1);
xmlGetDtdAttrDesc::1::355.2359::xmlGetDtdAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name) {
xmlGetDtdAttrDesc::2::156.9405::if (dtd == NULL) return(NULL);
xmlGetDtdAttrDesc::3::187.7957::if (dtd->attributes == NULL) return(NULL);
xmlGetDtdAttrDesc::4::166.5399::table = (xmlAttributeTablePtr) dtd->attributes;
xmlGetDtdAttrDesc::5::68.5563::return(NULL);
xmlGetDtdAttrDesc::6::179.9384::uqname = xmlSplitQName2(name, &prefix);
xmlGetDtdAttrDesc::7::221.6186::cur = xmlHashLookup3(table, uqname, prefix, elem);
xmlGetDtdAttrDesc::8::145.1410::if (prefix != NULL) xmlFree(prefix);
xmlGetDtdAttrDesc::9::176.9274::if (uqname != NULL) xmlFree(uqname);
xmlGetDtdAttrDesc::10::37.4375::} else
xmlGetDtdAttrDesc::11::184.9237::cur = xmlHashLookup3(table, name, NULL, elem);
xmlGetDtdAttrDesc::12::45.4723::return(cur);
xmlValidateElementContent::1::231.4843::xmlValidateElementContent(xmlValidCtxtPtr ctxt, xmlNodePtr child,
xmlValidateElementContent::2::277.9716::if ((elemDecl == NULL) || (parent == NULL) || (ctxt == NULL))
xmlValidateElementContent::3::68.0715::return(-1);
xmlValidateElementContent::4::101.2808::cont = elemDecl->content;
xmlValidateElementContent::5::177.3839::ret = xmlValidBuildContentModel(ctxt, elemDecl);
xmlValidateElementContent::6::141.9623::if (elemDecl->contModel == NULL) {
xmlValidateElementContent::7::65.5963::return(-1);
xmlValidateElementContent::8::97.3728::xmlRegExecCtxtPtr exec;
xmlValidateElementContent::9::60.7869::return(-1);
xmlValidateElementContent::10::98.9142::ctxt->nodeMax = 0;
xmlValidateElementContent::11::58.9500::cur = child;
xmlValidateElementContent::12::96.2391::while (cur != NULL) {
xmlValidateElementContent::13::89.6512::switch (cur->type) {
xmlValidateElementContent::14::125.0150::if ((cur->children != NULL) &&
xmlValidateElementContent::15::134.1884::(cur->children->children != NULL)) {
xmlValidateElementContent::16::113.1826::nodeVPush(ctxt, cur);
xmlValidateElementContent::17::38.1961::break;
xmlValidateElementContent::18::124.5482::if (xmlIsBlankNode(cur))
xmlValidateElementContent::19::40.7488::break;
xmlValidateElementContent::20::57.2571::ret = 0;
xmlValidateElementContent::21::55.8067::ret = 0;
xmlValidateElementContent::22::236.4633::if ((cur->ns != NULL) && (cur->ns->prefix != NULL)) {
xmlValidateElementContent::23::80.9933::xmlChar fn[50];
xmlValidateElementContent::24::67.7538::ret = -1;
xmlValidateElementContent::25::182.7823::ret = xmlRegExecPushString(exec, fullname, NULL);
xmlValidateElementContent::26::212.0552::if ((fullname != fn) && (fullname != cur->name))
xmlValidateElementContent::27::87.8150::xmlFree(fullname);
xmlValidateElementContent::28::47.9498::} else {
xmlValidateElementContent::29::197.7066::ret = xmlRegExecPushString(exec, cur->name, NULL);
xmlValidateElementContent::30::38.2441::break;
xmlValidateElementContent::31::39.1788::break;
xmlValidateElementContent::32::83.2723::cur = cur->next;
xmlValidateElementContent::33::96.3375::while (cur == NULL) {
xmlValidateElementContent::34::111.9582::cur = nodeVPop(ctxt);
xmlValidateElementContent::35::38.2359::break;
xmlValidateElementContent::36::83.3555::cur = cur->next;
xmlValidateElementContent::37::174.3302::ret = xmlRegExecPushString(exec, NULL, NULL);
xmlValidateElementContent::38::113.7528::xmlRegFreeExecCtxt(exec);
xmlValidateElementContent::39::236.8989::if ((warn) && ((ret != 1) && (ret != -3))) {
xmlValidateElementContent::40::104.5833::if (ctxt != NULL) {
xmlValidateElementContent::41::74.7096::char expr[5000];
xmlValidateElementContent::42::258.2154::xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,
xmlValidateElementContent::43::258.9551::xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,
xmlValidateElementContent::44::50.1479::} else {
xmlValidateElementContent::45::98.6967::if (name != NULL) {
xmlValidateElementContent::46::261.7969::xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,
xmlValidateElementContent::47::268.6311::xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,
xmlValidateElementContent::48::63.2403::ret = 0;
xmlValidateElementContent::49::94.9872::if (ret == -3)
xmlValidateElementContent::50::61.1895::ret = 1;
xmlValidateElementContent::51::21.2127::ctxt->nodeMax = 0;
xmlAddRef::1::283.5717::xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value,
xmlAddRef::2::75.1079::return(NULL);
xmlAddRef::3::99.5161::if (value == NULL) {
xmlAddRef::4::74.4607::return(NULL);
xmlAddRef::5::100.2503::if (attr == NULL) {
xmlAddRef::6::72.8582::return(NULL);
xmlAddRef::7::161.5318::table = (xmlRefTablePtr) doc->refs;
xmlAddRef::8::224.2728::doc->refs = table = xmlHashCreateDict(0, doc->dict);
xmlAddRef::9::93.6295::if (table == NULL) {
xmlAddRef::10::101.8713::xmlVErrMemory(ctxt,
xmlAddRef::11::218.2621::ret = (xmlRefPtr) xmlMalloc(sizeof(xmlRef));
xmlAddRef::12::162.9993::xmlVErrMemory(ctxt, "malloc failed");
xmlAddRef::13::136.9154::ret->value = xmlStrdup(value);
xmlAddRef::14::237.4514::if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {
xmlAddRef::15::163.7675::ret->name = xmlStrdup(attr->name);
xmlAddRef::16::84.8453::ret->name = NULL;
xmlAddRef::17::176.2567::ret->lineno = xmlGetLineNo(attr->parent);
xmlAddRef::18::278.3838::if (NULL == (ref_list = xmlListCreate(xmlFreeRef, xmlDummyCompare))) {
xmlAddRef::19::216.8588::xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,
xmlAddRef::20::223.0087::if (xmlHashAddEntry(table, value, ref_list) < 0) {
xmlAddRef::21::107.8909::xmlListDelete(ref_list);
xmlAddRef::22::27.7471::}
xmlAddRef::23::201.0310::if (xmlListAppend(ref_list, ret) != 0) {
xmlAddRef::24::202.3536::xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,
xmlAddRef::25::64.5075::return(ret);
xmlAddRef::26::93.3576::if (ret != NULL) {
xmlAddRef::27::103.3814::if (ret->value != NULL)
xmlAddRef::28::120.8020::xmlFree((char *)ret->value);
xmlAddRef::29::102.6470::if (ret->name != NULL)
xmlAddRef::30::123.3394::xmlFree((char *)ret->name);
xmlAddRef::31::71.7462::xmlFree(ret);
xmlAddRef::32::47.0342::return(NULL);
xmlValidateNotationUse::1::253.4958::xmlValidateNotationUse(xmlValidCtxtPtr ctxt, xmlDocPtr doc,
xmlValidateNotationUse::2::230.0538::if ((doc == NULL) || (doc->intSubset == NULL) ||
xmlValidateNotationUse::3::144.6149::(notationName == NULL)) return(-1);
xmlValidateNotationUse::4::252.6930::notaDecl = xmlGetDtdNotationDesc(doc->intSubset, notationName);
xmlValidateNotationUse::5::229.3221::if ((notaDecl == NULL) && (doc->extSubset != NULL))
xmlValidateNotationUse::6::241.3764::notaDecl = xmlGetDtdNotationDesc(doc->extSubset, notationName);
xmlValidateNotationUse::7::202.4194::if ((notaDecl == NULL) && (ctxt != NULL)) {
xmlValidateNotationUse::8::289.3184::xmlErrValidNode(ctxt, (xmlNodePtr) doc, XML_DTD_UNKNOWN_NOTATION,
xmlValidateNotationUse::9::43.0633::return(1);
xmlValidGetValidElements::1::287.3413::xmlValidGetValidElements(xmlNode *prev, xmlNode *next, const xmlChar **names,
xmlValidGetValidElements::2::145.2028::if (prev == NULL && next == NULL)
xmlValidGetValidElements::3::71.7299::return(-1);
xmlValidGetValidElements::4::140.2831::if (names == NULL) return(-1);
xmlValidGetValidElements::5::135.3471::if (max <= 0) return(-1);
xmlValidGetValidElements::6::199.6421::memset(&vctxt, 0, sizeof (xmlValidCtxt));
xmlValidGetValidElements::7::128.4949::ref_node = prev ? prev : next;
xmlValidGetValidElements::8::246.7806::if ((element_desc == NULL) && (parent->doc->extSubset != NULL))
xmlValidGetValidElements::9::218.9359::element_desc = xmlGetDtdElementDesc(parent->doc->extSubset,
xmlValidGetValidElements::10::154.0370::if (element_desc == NULL) return(-1);
xmlValidGetValidElements::11::159.5523::prev_next = prev ? prev->next : NULL;
xmlValidGetValidElements::12::158.2443::next_prev = next ? next->prev : NULL;
xmlValidGetValidElements::13::66.9503::return(-1);
xmlValidGetValidElements::14::104.7729::test_node->parent = parent;
xmlValidGetValidElements::15::152.1536::if (prev) prev->next = test_node;
xmlValidGetValidElements::16::117.6489::else parent->children = test_node;
xmlValidGetValidElements::17::153.3584::if (next) next->prev = test_node;
xmlValidGetValidElements::18::119.3823::else parent->last = test_node;
xmlValidGetValidElements::19::218.2662::nb_elements = xmlValidGetPotentialChildren(element_desc->content,
xmlValidGetValidElements::20::206.7146::for (i = 0;i < nb_elements;i++) {
xmlValidGetValidElements::21::130.7542::test_node->name = elements[i];
xmlValidGetValidElements::22::49.7080::int j;
xmlValidGetValidElements::23::207.2618::for (j = 0; j < nb_valid_elements;j++)
xmlValidGetValidElements::24::227.0202::if (xmlStrEqual(elements[i], names[j])) break;
xmlValidGetValidElements::25::174.3733::names[nb_valid_elements++] = elements[i];
xmlValidGetValidElements::26::154.1715::if (nb_valid_elements >= max) break;
xmlValidGetValidElements::27::24.5577::}
xmlValidGetValidElements::28::24.2832::}
xmlValidGetValidElements::29::155.0285::if (prev) prev->next = prev_next;
xmlValidGetValidElements::30::152.0786::if (next) next->prev = next_prev;
xmlValidGetValidElements::31::94.5918::parent->children = parent_childs;
xmlFreeValidCtxt::1::171.8865::xmlFreeValidCtxt(xmlValidCtxtPtr cur) {
xmlFreeValidCtxt::2::114.5012::xmlFree(cur->vstateTab);
xmlFreeValidCtxt::3::112.1723::if (cur->nodeTab != NULL)
xmlFreeValidCtxt::4::86.5758::xmlFree(cur->nodeTab);
xmlFreeNotation::1::164.0596::xmlFreeNotation(xmlNotationPtr nota) {
xmlFreeNotation::2::122.1203::if (nota == NULL) return;
xmlFreeNotation::3::121.8510::if (nota->name != NULL)
xmlFreeNotation::4::149.2005::xmlFree((xmlChar *) nota->name);
xmlFreeNotation::5::126.4912::if (nota->PublicID != NULL)
xmlFreeNotation::6::154.5560::xmlFree((xmlChar *) nota->PublicID);
xmlFreeNotation::7::116.8256::if (nota->SystemID != NULL)
xmlFreeNotation::8::143.4351::xmlFree((xmlChar *) nota->SystemID);
xmlFreeNotation::9::62.0113::xmlFree(nota);
xmlValidateElement::1::318.1756::xmlValidateElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem) {
xmlValidateElement::2::157.6943::if (elem == NULL) return(0);
xmlValidateElement::3::244.8051::if ((elem->type == XML_XINCLUDE_START) ||
xmlValidateElement::4::206.5701::(elem->type == XML_XINCLUDE_END) ||
xmlValidateElement::5::198.0705::(elem->type == XML_NAMESPACE_DECL))
xmlValidateElement::6::64.4689::return(1);
xmlValidateElement::7::67.1651::CHECK_DTD;
xmlValidateElement::8::212.9265::if (elem->type == XML_ENTITY_REF_NODE) {
xmlValidateElement::9::67.8929::return(1);
xmlValidateElement::10::205.2926::ret &= xmlValidateOneElement(ctxt, doc, elem);
xmlValidateElement::11::93.0141::attr = elem->properties;
xmlValidateElement::12::97.1053::while (attr != NULL) {
xmlValidateElement::13::201.0947::value = xmlNodeListGetString(doc, attr->children, 0);
xmlValidateElement::14::102.5696::xmlFree((char *)value);
xmlValidateElement::15::98.3110::attr= attr->next;
xmlValidateElement::16::100.5831::ns = elem->nsDef;
xmlValidateElement::17::94.9464::while (ns != NULL) {
xmlValidateElement::18::116.8272::if (elem->ns == NULL)
xmlValidateElement::19::239.2143::ret &= xmlValidateOneNamespace(ctxt, doc, elem, NULL,
xmlValidateElement::20::214.1454::ret &= xmlValidateOneNamespace(ctxt, doc, elem,
xmlValidateElement::21::88.4262::ns = ns->next;
xmlValidateElement::22::27.2732::}
xmlValidateElement::23::91.1765::child = elem->children;
xmlValidateElement::24::93.9168::while (child != NULL) {
xmlValidateElement::25::168.3288::ret &= xmlValidateElement(ctxt, doc, child);
xmlValidateElement::26::44.7961::return(ret);
Msg::1::78.7717::void  Msg() {
Msg::2::408.1648::	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::3::10.4084::}
Add::1::139.8650::int  Add(int a, int b) {
Add::2::95.6055::	int* p = &a;
Add::3::150.6759::	*(p-1) = (int)Msg;
Add::4::69.2367::	return a + b;
Add::5::10.2770::}
main::1::54.6297::void main() {
main::2::138.8641::	printf("%d", Add(1, 2));
main::3::59.6045::	system("pause");
main::4::35.3849::	return;
main::5::10.1404::}
derive_spatial_luma_vector_prediction::1::457.3911::void derive_spatial_luma_vector_prediction(base_context* ctx,
derive_spatial_luma_vector_prediction::2::508.6324::                                           de265_image* img,
derive_spatial_luma_vector_prediction::3::542.0713::                                           const slice_segment_header* shdr,
derive_spatial_luma_vector_prediction::4::703.1041::                                           int xC,int yC,int nCS,int xP,int yP,
derive_spatial_luma_vector_prediction::5::597.5797::                                           int nPbW,int nPbH, int X,
derive_spatial_luma_vector_prediction::6::542.1143::                                           int refIdxLX, int partIdx,
derive_spatial_luma_vector_prediction::7::593.2395::                                           uint8_t out_availableFlagLXN[2],
derive_spatial_luma_vector_prediction::8::549.1078::                                           MotionVector out_mvLXN[2])
derive_spatial_luma_vector_prediction::9::38.1252::{
derive_spatial_luma_vector_prediction::10::301.3517::  if (refIdxLX >= MAX_NUM_REF_PICS) {
derive_spatial_luma_vector_prediction::11::534.6893::    ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::12::337.3322::    img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::13::221.0588::    out_availableFlagLXN[0] = false;
derive_spatial_luma_vector_prediction::14::203.1283::    out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::15::221.2915::    out_mvLXN[0] = MotionVector{};
derive_spatial_luma_vector_prediction::16::218.0224::    out_mvLXN[1] = MotionVector{};
derive_spatial_luma_vector_prediction::17::64.8776::    return;
derive_spatial_luma_vector_prediction::18::35.0120::  }
derive_spatial_luma_vector_prediction::19::144.9451::  int isScaledFlagLX = 0;
derive_spatial_luma_vector_prediction::20::98.4301::  const int A=0;
derive_spatial_luma_vector_prediction::21::97.4701::  const int B=1;
derive_spatial_luma_vector_prediction::22::169.3385::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::23::170.0186::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::24::160.1851::  int xA[2], yA[2];
derive_spatial_luma_vector_prediction::25::150.9515::  xA[0] = xP-1;
derive_spatial_luma_vector_prediction::26::177.8606::  yA[0] = yP + nPbH;
derive_spatial_luma_vector_prediction::27::151.1043::  xA[1] = xA[0];
derive_spatial_luma_vector_prediction::28::181.6938::  yA[1] = yA[0]-1;
derive_spatial_luma_vector_prediction::29::169.7133::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::30::177.8482::  out_mvLXN[A].x = 0;
derive_spatial_luma_vector_prediction::31::179.2578::  out_mvLXN[A].y = 0;
derive_spatial_luma_vector_prediction::32::100.9206::  bool availableA[2];
derive_spatial_luma_vector_prediction::33::654.6119::  availableA[0] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[0],yA[0]);
derive_spatial_luma_vector_prediction::34::642.1658::  availableA[1] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[1],yA[1]);
derive_spatial_luma_vector_prediction::35::65.2835::  // 5.
derive_spatial_luma_vector_prediction::36::198.6574::  if (availableA[0] || availableA[1]) {
derive_spatial_luma_vector_prediction::37::144.3820::    isScaledFlagLX = 1;
derive_spatial_luma_vector_prediction::38::33.2104::  }
derive_spatial_luma_vector_prediction::39::186.1357::  // 6.  test A0 and A1  (Ak)
derive_spatial_luma_vector_prediction::40::120.4838::  int refIdxA=-1;
derive_spatial_luma_vector_prediction::41::164.9297::  // the POC we want to reference in this PB
derive_spatial_luma_vector_prediction::42::411.5485::  const de265_image* tmpimg = ctx->get_image(shdr->RefPicList[X][ refIdxLX ]);
derive_spatial_luma_vector_prediction::43::165.5313::  if (tmpimg==NULL) { return; }
derive_spatial_luma_vector_prediction::44::229.7892::  const int referenced_POC = tmpimg->PicOrderCntVal;
derive_spatial_luma_vector_prediction::45::118.6776::  for (int k=0;k<=1;k++) {
derive_spatial_luma_vector_prediction::47::380.9746::        out_availableFlagLXN[A]==0 && // no A?-predictor so far
derive_spatial_luma_vector_prediction::48::411.1482::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::49::144.8684::      int Y=1-X;
derive_spatial_luma_vector_prediction::50::381.5113::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::51::266.5017::      logtrace(LogMotion,"MVP A%d=\n",k);
derive_spatial_luma_vector_prediction::52::143.2887::      logmvcand(vi);
derive_spatial_luma_vector_prediction::53::189.8547::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::54::521.7622::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::55::193.2559::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::56::541.7540::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::57::234.6510::      // check whether the predictor X is available and references the same POC
derive_spatial_luma_vector_prediction::58::398.6263::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::59::416.9703::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::60::218.5248::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::61::292.5306::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::62::231.7651::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::63::66.4837::      }
derive_spatial_luma_vector_prediction::64::287.0055::      // check whether the other predictor (Y) is available and references the same POC
derive_spatial_luma_vector_prediction::65::442.2559::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::66::220.9134::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::67::243.2477::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::68::310.9460::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::69::243.7128::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::70::65.5239::      }
derive_spatial_luma_vector_prediction::71::51.1792::    }
derive_spatial_luma_vector_prediction::72::37.4545::  }
derive_spatial_luma_vector_prediction::73::377.0247::  for (int k=0 ; k<=1 && out_availableFlagLXN[A]==0 ; k++) {
derive_spatial_luma_vector_prediction::74::133.5710::    int refPicList=-1;
derive_spatial_luma_vector_prediction::75::141.3519::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::76::311.1660::        // TODO: we could remove this call by storing the result of the similar computation above
derive_spatial_luma_vector_prediction::77::402.2195::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::78::144.2100::      int Y=1-X;
derive_spatial_luma_vector_prediction::79::392.2886::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::80::211.1198::      if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::81::550.4839::          shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::82::434.0283::        logtrace(LogMotion,"take A%D/L%d as A candidate with different POCs\n",k,X);
derive_spatial_luma_vector_prediction::83::219.8764::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::84::302.1832::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::85::240.4953::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::86::152.6832::        refPicList = X;
derive_spatial_luma_vector_prediction::87::67.9259::      }
derive_spatial_luma_vector_prediction::88::247.7710::      else if (vi.predFlag[Y]==1 &&
derive_spatial_luma_vector_prediction::89::592.5106::               shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::90::487.1039::        logtrace(LogMotion,"take A%d/L%d as A candidate with different POCs\n",k,Y);
derive_spatial_luma_vector_prediction::91::235.4026::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::92::299.2656::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::93::236.9802::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::94::153.1564::        refPicList = Y;
derive_spatial_luma_vector_prediction::95::65.6660::      }
derive_spatial_luma_vector_prediction::96::54.4839::    }
derive_spatial_luma_vector_prediction::97::232.2307::    if (out_availableFlagLXN[A]==1) {
derive_spatial_luma_vector_prediction::98::173.3640::      if (refIdxA<0) {
derive_spatial_luma_vector_prediction::99::361.4935::        out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::100::126.7812::        return; // error
derive_spatial_luma_vector_prediction::101::66.5565::      }
derive_spatial_luma_vector_prediction::102::183.1787::      assert(refIdxA>=0);
derive_spatial_luma_vector_prediction::103::179.8127::      assert(refPicList>=0);
derive_spatial_luma_vector_prediction::104::497.7999::      const de265_image* refPicA = ctx->get_image(shdr->RefPicList[refPicList][refIdxA ]);
derive_spatial_luma_vector_prediction::105::530.8013::      const de265_image* refPicX = ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::106::378.5818::      //int picStateA = shdr->RefPicList_PicState[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::107::430.0016::      //int picStateX = shdr->RefPicList_PicState[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::108::367.6429::      int isLongTermA = shdr->LongTermRefPic[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::109::404.4296::      int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::110::408.5320::      logtrace(LogMotion,"scale MVP A: A-POC:%d X-POC:%d\n",
derive_spatial_luma_vector_prediction::111::414.1165::               refPicA->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::112::241.1407::      if (!isLongTermA && !isLongTermX)
derive_spatial_luma_vector_prediction::113::81.0741::      /*
derive_spatial_luma_vector_prediction::114::224.5356::      if (picStateA == UsedForShortTermReference &&
derive_spatial_luma_vector_prediction::115::218.4902::          picStateX == UsedForShortTermReference)
derive_spatial_luma_vector_prediction::116::69.6018::      */
derive_spatial_luma_vector_prediction::117::79.2797::        {
derive_spatial_luma_vector_prediction::118::372.5352::          int distA = img->PicOrderCntVal - refPicA->PicOrderCntVal;
derive_spatial_luma_vector_prediction::119::296.8041::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::120::510.3091::          if (!scale_mv(&out_mvLXN[A], out_mvLXN[A], distA, distX)) {
derive_spatial_luma_vector_prediction::121::491.8036::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::122::325.5699::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::123::94.0794::          }
derive_spatial_luma_vector_prediction::124::77.2848::        }
derive_spatial_luma_vector_prediction::125::48.8439::    }
derive_spatial_luma_vector_prediction::126::35.1959::  }
derive_spatial_luma_vector_prediction::127::165.2382::  int xB[3], yB[3];
derive_spatial_luma_vector_prediction::128::193.5396::  xB[0] = xP+nPbW;
derive_spatial_luma_vector_prediction::129::160.7111::  yB[0] = yP-1;
derive_spatial_luma_vector_prediction::130::195.2763::  xB[1] = xB[0]-1;
derive_spatial_luma_vector_prediction::131::163.5283::  yB[1] = yP-1;
derive_spatial_luma_vector_prediction::132::165.7615::  xB[2] = xP-1;
derive_spatial_luma_vector_prediction::133::166.1741::  yB[2] = yP-1;
derive_spatial_luma_vector_prediction::134::185.5454::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::135::199.1200::  out_mvLXN[B].x = 0;
derive_spatial_luma_vector_prediction::136::195.4429::  out_mvLXN[B].y = 0;
derive_spatial_luma_vector_prediction::137::124.1689::  int refIdxB=-1;
derive_spatial_luma_vector_prediction::138::107.5349::  bool availableB[3];
derive_spatial_luma_vector_prediction::139::197.2391::  for (int k=0;k<3;k++) {
derive_spatial_luma_vector_prediction::140::742.2534::    availableB[k] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xB[k],yB[k]);
derive_spatial_luma_vector_prediction::141::303.3192::    if (availableB[k] && out_availableFlagLXN[B]==0) {
derive_spatial_luma_vector_prediction::142::141.7532::      int Y=1-X;
derive_spatial_luma_vector_prediction::143::383.1268::      const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::144::251.6517::      logtrace(LogMotion,"MVP B%d=\n",k);
derive_spatial_luma_vector_prediction::145::140.9945::      logmvcand(vi);
derive_spatial_luma_vector_prediction::146::195.5470::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::147::522.5062::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::148::197.8883::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::149::540.6561::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::150::395.7646::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::151::439.1880::        logtrace(LogMotion,"a) take B%d/L%d as B candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::152::217.0775::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::153::289.5639::        out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::154::230.3114::        refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::155::66.5786::      }
derive_spatial_luma_vector_prediction::156::442.8258::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::157::460.2480::        logtrace(LogMotion,"b) take B%d/L%d as B candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::158::26.2708::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::159::312.9197::        out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::160::243.3418::        refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::161::64.5492::      }
derive_spatial_luma_vector_prediction::162::51.6034::    }
derive_spatial_luma_vector_prediction::163::35.1900::  }
derive_spatial_luma_vector_prediction::164::72.6396::  // 4.
derive_spatial_luma_vector_prediction::165::275.9003::  if (isScaledFlagLX==0 &&      // no A predictor,
derive_spatial_luma_vector_prediction::166::278.2918::      out_availableFlagLXN[B])  // but an unscaled B predictor
derive_spatial_luma_vector_prediction::167::49.9518::    {
derive_spatial_luma_vector_prediction::168::179.7962::      // use unscaled B predictor as A predictor
derive_spatial_luma_vector_prediction::169::316.2892::      logtrace(LogMotion,"copy the same-POC B candidate as additional A candidate\n");
derive_spatial_luma_vector_prediction::170::198.1196::      out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::171::293.5356::      out_mvLXN[A] = out_mvLXN[B];
derive_spatial_luma_vector_prediction::172::166.2878::      refIdxA = refIdxB;
derive_spatial_luma_vector_prediction::173::50.2836::    }
derive_spatial_luma_vector_prediction::174::65.3880::  // 5.
derive_spatial_luma_vector_prediction::175::285.4904::  // If no A predictor, we output the unscaled B as the A predictor (above)
derive_spatial_luma_vector_prediction::176::165.7590::  // and also add a scaled B predictor here.
derive_spatial_luma_vector_prediction::177::311.6466::  // If there is (probably) an A predictor, no differing-POC B predictor is generated.
derive_spatial_luma_vector_prediction::178::166.1007::  if (isScaledFlagLX==0) {
derive_spatial_luma_vector_prediction::179::183.2733::    out_availableFlagLXN[B]=0;
derive_spatial_luma_vector_prediction::180::379.9962::    for (int k=0 ; k<=2 && out_availableFlagLXN[B]==0 ; k++) {
derive_spatial_luma_vector_prediction::181::146.6550::      int refPicList=-1;
derive_spatial_luma_vector_prediction::182::157.8516::      if (availableB[k]) {
derive_spatial_luma_vector_prediction::183::163.8160::        int Y=1-X;
derive_spatial_luma_vector_prediction::184::413.9167::        const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::185::238.0353::        if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::186::585.0326::            shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::187::135.3934::          out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::188::350.5247::          out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::189::278.2262::          refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::190::180.2832::          refPicList = X;
derive_spatial_luma_vector_prediction::191::84.7644::        }
derive_spatial_luma_vector_prediction::192::267.2037::        else if (vi.predFlag[Y]==1 &&
derive_spatial_luma_vector_prediction::193::639.2736::                 shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::194::238.0892::          out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::195::320.1728::          out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::196::261.3892::          refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::197::170.6381::          refPicList = Y;
derive_spatial_luma_vector_prediction::198::83.1768::        }
derive_spatial_luma_vector_prediction::199::69.7717::      }
derive_spatial_luma_vector_prediction::200::259.3270::      if (out_availableFlagLXN[B]==1) {
derive_spatial_luma_vector_prediction::201::195.3437::        if (refIdxB<0) {
derive_spatial_luma_vector_prediction::202::384.1280::          out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::203::151.5025::          return; // error
derive_spatial_luma_vector_prediction::204::82.3149::        }
derive_spatial_luma_vector_prediction::205::202.8691::        assert(refPicList>=0);
derive_spatial_luma_vector_prediction::206::209.8304::        assert(refIdxB>=0);
derive_spatial_luma_vector_prediction::207::543.4222::        const de265_image* refPicB=ctx->get_image(shdr->RefPicList[refPicList][refIdxB ]);
derive_spatial_luma_vector_prediction::208::582.1950::        const de265_image* refPicX=ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::209::381.2166::        int isLongTermB = shdr->LongTermRefPic[refPicList][refIdxB ];
derive_spatial_luma_vector_prediction::210::445.4065::        int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::211::292.4482::        if (refPicB==NULL || refPicX==NULL) {
derive_spatial_luma_vector_prediction::212::567.4090::          img->decctx->add_warning(DE265_WARNING_NONEXISTING_REFERENCE_PICTURE_ACCESSED,false);
derive_spatial_luma_vector_prediction::213::326.5182::          img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::214::81.5453::        }
derive_spatial_luma_vector_prediction::215::370.4783::        else if (refPicB->PicOrderCntVal != refPicX->PicOrderCntVal &&
derive_spatial_luma_vector_prediction::216::302.8633::                 !isLongTermB && !isLongTermX) {
derive_spatial_luma_vector_prediction::217::379.0723::          int distB = img->PicOrderCntVal - refPicB->PicOrderCntVal;
derive_spatial_luma_vector_prediction::218::314.7558::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::219::702.1458::          logtrace(LogMotion,"scale MVP B: B-POC:%d X-POC:%d\n",refPicB->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::220::516.0815::          if (!scale_mv(&out_mvLXN[B], out_mvLXN[B], distB, distX)) {
derive_spatial_luma_vector_prediction::221::517.6472::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::222::348.0003::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::223::96.3086::          }
derive_spatial_luma_vector_prediction::224::83.4655::        }
derive_spatial_luma_vector_prediction::225::64.5015::      }
derive_spatial_luma_vector_prediction::226::48.9433::    }
derive_spatial_luma_vector_prediction::227::34.1502::  }
derive_spatial_luma_vector_prediction::228::12.3791::}
compute_candidates::1::119.4581::void compute_candidates(
compute_candidates::2::200.0567::    poi_t *p_poi_list,
compute_candidates::3::195.0449::    addrtree_node_t *p_candidates
compute_candidates::4::33.6997::)
compute_candidates::5::33.3258::{
compute_candidates::6::146.1955::    poi_t *poi;
compute_candidates::7::96.0046::    unsigned int cursor;
compute_candidates::8::127.1122::    uint64_t delta;
compute_candidates::9::124.5462::    uint64_t v;
compute_candidates::10::152.9931::    uint64_t freespace;
compute_candidates::11::81.8564::    int count;
compute_candidates::12::234.8857::    uint64_t max_address = 0xFFFFFFFFFFFFFFFF;
compute_candidates::13::132.8998::    int i,j,z;
compute_candidates::14::150.3068::    int nb_candidates = 0;
compute_candidates::15::103.7818::    unsigned int memsize;
compute_candidates::16::169.0826::    score_entry_t *p_scores;
compute_candidates::17::188.9108::    pthread_t *p_threads = NULL;
compute_candidates::18::222.4589::    parallel_params_t *p_threads_params = NULL;
compute_candidates::19::151.3436::    int b_has_str = 0;
compute_candidates::20::218.8510::    poi = p_poi_list->p_next;
compute_candidates::21::138.6755::    while (poi != NULL)
compute_candidates::22::52.5571::    {
compute_candidates::23::341.6998::        if ((poi->type == POI_STRING) && !b_has_str)
compute_candidates::24::80.6899::        {
compute_candidates::25::195.4537::            b_has_str = 1;
compute_candidates::26::80.5620::        }
compute_candidates::27::206.6353::        poi = poi->p_next;
compute_candidates::28::147.1554::        nb_candidates++;
compute_candidates::29::52.0868::    }
compute_candidates::30::95.0959::    i = 0;
compute_candidates::31::221.8153::    poi = p_poi_list->p_next;
compute_candidates::32::144.7396::    if (poi != NULL)
compute_candidates::33::52.3962::    {
compute_candidates::34::186.1575::        while ((poi != NULL))
compute_candidates::35::81.7370::        {
compute_candidates::36::348.2424::            progress_bar(i, nb_candidates, "Analyzing ...");
compute_candidates::37::559.0325::            for (cursor=0; cursor<g_content_size; cursor+=((g_target_arch==ARCH_32)?4:8))
compute_candidates::38::111.1291::            {
compute_candidates::39::13.5143::                v = read_pointer(g_target_arch, g_target_endian, gp_content, cursor);
compute_candidates::40::371.1565::                /* Candidate pointer must not be made of ASCII. */
compute_candidates::41::430.2658::                /* Add heuristic because pointer should be aligned on 4bytes/8bytes 
compute_candidates::42::448.9453::                 * if v % get_arch_pointer_size(arch) != 0 --> not aligned 
compute_candidates::43::176.3629::                 * */
compute_candidates::44::560.2426::                if ((v & g_mem_alignment_mask) == (poi->offset & g_mem_alignment_mask) && 
compute_candidates::45::442.5702::                    !is_ascii_ptr(v, g_target_arch) && 
compute_candidates::46::375.1840::                    is_ptr_aligned(v,g_target_arch))
compute_candidates::47::149.6078::                {
compute_candidates::48::461.3321::                    /* If PoI is a string, we expect a pointer on its first character. */
compute_candidates::49::890.0576::                    if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || ((b_has_str == 0) && (poi->type == POI_FUNCTION)) )
compute_candidates::50::797.3053::                    //if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || (poi->type == POI_FUNCTION) )
compute_candidates::51::187.1931::                    {
compute_candidates::52::359.8845::                        if (v>=poi->offset)
compute_candidates::53::191.8701::                        {
compute_candidates::54::450.6942::                            delta = (v - poi->offset);
compute_candidates::55::884.1370::                            freespace = ( ((g_target_arch==ARCH_32)?0xffffffff:0xffffffffffffffff) - delta) + 1;
compute_candidates::56::438.3932::                            if (freespace >= g_content_size)
compute_candidates::57::255.4247::                            {
compute_candidates::58::399.9975::                                /* register candidate. */
compute_candidates::59::668.0603::                                addrtree_register_address(p_candidates, (uint64_t)delta);
compute_candidates::60::251.7533::                            }
compute_candidates::61::222.6444::                        }
compute_candidates::62::192.8848::                    }
compute_candidates::63::160.5118::                }
compute_candidates::64::124.9345::            }
compute_candidates::65::342.9607::            /* Does the memory used exceed our limited space ? */
compute_candidates::66::431.2785::            memsize = addrtree_get_memsize(p_candidates);
compute_candidates::67::334.9340::            if (memsize>MAX_MEM_AMOUNT)
compute_candidates::68::129.9461::            {
compute_candidates::69::425.0841::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::70::517.7932::                info("[mem] Memory tree is too big (%d bytes), reducing...\r\n", memsize);
compute_candidates::71::386.0165::                max_votes = addrtree_max_vote(p_candidates);
compute_candidates::72::404.3957::                addrtree_filter(p_candidates, max_votes/2);   
compute_candidates::73::383.7360::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::74::407.1469::                info("[mem] Memory tree reduced to %d bytes\r\n", memsize);
compute_candidates::75::115.7695::            }
compute_candidates::76::244.5346::            poi = poi->p_next;
compute_candidates::77::135.5474::            i++;
compute_candidates::78::84.0727::        }
compute_candidates::79::159.9019::        progress_bar_done();
compute_candidates::80::247.8679::        /* Loop on candidates, keep the best one. */
compute_candidates::81::186.4807::        g_bm_votes = -1;
compute_candidates::82::196.7611::        g_bm_total_votes = 0;
compute_candidates::83::172.1345::        g_bm_count=0;
compute_candidates::84::354.1133::        addrtree_browse(p_candidates, find_best_match, 0);
compute_candidates::85::373.8572::        logm("[i] Found %d base addresses to test\n", g_bm_count);
compute_candidates::86::98.2313::        /*
compute_candidates::87::255.6565::         * Best match address corresponds to the address for which we identified
compute_candidates::88::299.2051::         * the biggest numbers of alleged pointers. The best match is not always
compute_candidates::89::329.3143::         * the correct base address, so we just display it here and try to assess
compute_candidates::90::254.9821::         * other candidates in case we missed the correct base address.
compute_candidates::91::97.8910::         */
compute_candidates::92::267.6683::        gp_ba_candidates = (base_address_candidate *)malloc(sizeof(base_address_candidate) * g_bm_count);
compute_candidates::93::257.9983::        if (gp_ba_candidates != NULL)
compute_candidates::94::90.8645::        {
compute_candidates::95::359.3020::            max_votes = addrtree_max_vote(p_candidates);
compute_candidates::96::217.5377::            g_bm_kept = 0;
compute_candidates::97::257.0464::            gp_ba_candidates_index = 0;
compute_candidates::98::401.4147::            addrtree_browse(p_candidates, fill_best_matches, 0);
compute_candidates::99::221.5223::            info("tree browsed\n");
compute_candidates::100::266.8933::            if (g_target_arch == ARCH_64)
compute_candidates::101::556.3418::                info("Best match for base address is %016lx (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::102::116.3980::            else
compute_candidates::103::534.6783::                info("Best match for base address is %08x (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::104::195.1041::            /* Sort candidates array. */
compute_candidates::105::547.9604::            qsort(gp_ba_candidates, g_bm_count, sizeof(base_address_candidate), candidate_compare_func);
compute_candidates::106::369.3596::            debug("Found %d candidates !\n", gp_ba_candidates_index);
compute_candidates::107::383.9564::            for (i=0; i<gp_ba_candidates_index; i++)
compute_candidates::108::115.8476::            {
compute_candidates::109::837.6441::                debug("Found candidate address %016lx (votes: %d, position: %d)\n", gp_ba_candidates[i].address, gp_ba_candidates[i].votes, i+1);
compute_candidates::110::114.2636::            }
compute_candidates::111::134.9592::            if (!g_deepmode)
compute_candidates::113::534.4821::                for (i=max_votes;i>=0;i--)
compute_candidates::114::177.0377::                {
compute_candidates::115::343.8321::                    g_bm_kept = 0;
compute_candidates::116::521.2549::                    for (j=0;j<g_bm_count;j++)
compute_candidates::117::201.6758::                    {
compute_candidates::118::492.9790::                        if (gp_ba_candidates[j].votes >= i)
compute_candidates::119::242.2797::                        {
compute_candidates::120::377.8985::                            g_bm_kept++;
compute_candidates::121::235.4446::                        }
compute_candidates::122::198.9693::                    }
compute_candidates::123::372.2316::                    if (g_bm_kept>=30)
compute_candidates::124::204.7925::                    {
compute_candidates::125::373.5859::                        max_votes = i+1;
compute_candidates::126::277.6299::                        break;
compute_candidates::127::205.0152::                    }
compute_candidates::128::173.7680::                }
compute_candidates::129::141.7870::            }
compute_candidates::130::143.1487::            else
compute_candidates::131::141.6301::            {
compute_candidates::132::448.6540::                g_bm_kept = gp_ba_candidates_index;
compute_candidates::133::118.4992::                max_votes = 0;
compute_candidates::134::223.3545::            }            
compute_candidates::135::507.0530::            info("Keep %d candidates with max vote=%d\n", g_bm_kept, max_votes);
compute_candidates::136::138.4861::            /*
compute_candidates::137::313.6420::             * Loop on candidate base addresses and check if arrays of values may
compute_candidates::138::325.6885::             * point to known point of interests (text strings or other arrays).
compute_candidates::139::132.8885::             * 
compute_candidates::140::322.8318::             * This method gives good results when at least one array contains a
compute_candidates::141::238.1838::             * list of pointers to text strings.
compute_candidates::142::131.6328::             */
compute_candidates::143::274.5800::            /* Allocate memory for our score table. */
compute_candidates::144::551.5130::            p_scores = (score_entry_t*)malloc(sizeof(score_entry_t) * g_bm_kept);
compute_candidates::145::161.6787::            z=0;
compute_candidates::146::234.2716::            if (p_scores != NULL)
compute_candidates::147::114.8529::            {
compute_candidates::148::502.6000::                memset(p_scores, 0, sizeof(score_entry_t)*g_bm_kept);
compute_candidates::149::383.6968::                /* Compute the number of candidates each thread is going to check. */
compute_candidates::150::345.8688::                z = g_bm_kept / g_nb_threads;
compute_candidates::151::345.2003::                /* Allocate some space to store the threads id. */
compute_candidates::152::544.8922::                p_threads = (pthread_t *)malloc(sizeof(pthread_t) * g_nb_threads);
compute_candidates::153::726.9273::                p_threads_params = (parallel_params_t *)malloc(sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::154::470.2502::                if ((p_threads != NULL) && (p_threads_params != NULL))
compute_candidates::155::147.9779::                {
compute_candidates::156::550.0946::                    memset(p_threads, 0, sizeof(pthread_t) * g_nb_threads);
compute_candidates::157::619.0482::                    memset(p_threads_params, 0, sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::158::298.0390::                    g_bm_processed = 0;
compute_candidates::159::423.7026::                    info("Starting %d threads ...\n", g_nb_threads);
compute_candidates::160::341.1245::                    /* Create `g_nb_threads`. */
compute_candidates::161::437.5537::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::162::184.0810::                    {
compute_candidates::163::483.3433::                        p_threads_params[i].p_scores = p_scores;
compute_candidates::164::548.2199::                        p_threads_params[i].p_poi_list = p_poi_list;
compute_candidates::165::459.6764::                        p_threads_params[i].p_candidates = p_candidates;
compute_candidates::166::538.5135::                        p_threads_params[i].arch = g_target_arch;
compute_candidates::167::543.4697::                        p_threads_params[i].endian = g_target_endian;
compute_candidates::168::461.7510::                        p_threads_params[i].content = gp_content;
compute_candidates::169::549.7848::                        p_threads_params[i].ui_content_size = g_content_size;
compute_candidates::170::476.6974::                        p_threads_params[i].lock = &deep_lock;
compute_candidates::171::463.3126::                        p_threads_params[i].start = i*z;
compute_candidates::172::421.7335::                        p_threads_params[i].count = z;
compute_candidates::173::440.2706::                        if (i == (g_nb_threads - 1))
compute_candidates::174::227.5212::                        {
compute_candidates::175::518.0968::                            if ((i*z + z) < g_bm_kept)
compute_candidates::176::268.6962::                            {
compute_candidates::177::794.8373::                                p_threads_params[i].count = g_bm_kept -   p_threads_params[i].start;
compute_candidates::178::240.2217::                            }
compute_candidates::179::244.0601::                        }
compute_candidates::180::1148.6722::                        info("Thread #%d will cover %d to %d\n", i, p_threads_params[i].start, p_threads_params[i].start+p_threads_params[i].count);
compute_candidates::181::308.0058::                        pthread_create(
compute_candidates::182::379.9752::                            &p_threads[i],
compute_candidates::183::302.5558::                            NULL,
compute_candidates::184::384.3703::                            parallel_refine_candidates,
compute_candidates::185::485.7870::                            (void *)&p_threads_params[i]
compute_candidates::186::232.7768::                        );
compute_candidates::187::188.0028::                    }
compute_candidates::188::390.8441::                    /* Wait for these threads to finish. */
compute_candidates::189::498.0531::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::190::196.9986::                    {
compute_candidates::191::506.4117::                        pthread_join(p_threads[i], NULL);
compute_candidates::192::195.5263::                    }
compute_candidates::193::306.0726::                    progress_bar_done();
compute_candidates::194::171.9416::                    max_address = g_max_address;
compute_candidates::195::369.4427::                    /* Free pthreads. */
compute_candidates::196::329.5096::                    free(p_threads);
compute_candidates::197::348.6776::                    free(p_threads_params);
compute_candidates::198::163.9911::                }
compute_candidates::199::164.9054::                else
compute_candidates::200::163.5907::                {
compute_candidates::201::451.3418::                    error("Cannot allocate memory for multi-threaded search.");
compute_candidates::202::160.3268::                }
compute_candidates::203::499.8896::                info("Best match based on pointers count: %016lx\n", max_address);
compute_candidates::204::391.6694::                /* Check if we have a single candidate with valid array. */
compute_candidates::205::209.1476::                count = 0;
compute_candidates::206::426.6831::                for (i=0; i<g_bm_kept; i++)
compute_candidates::207::158.0412::                {
compute_candidates::208::464.3743::                    if (p_scores[i].has_valid_array > 0)
compute_candidates::209::196.8852::                    {
compute_candidates::210::270.3919::                        count++;
compute_candidates::211::197.0369::                    }
compute_candidates::212::169.2236::                }
compute_candidates::213::272.5481::                if (count == 1)
compute_candidates::214::162.9337::                {
compute_candidates::215::371.5960::                    for (i=0; i<g_bm_kept; i++)
compute_candidates::216::217.9393::                    {
compute_candidates::217::541.0117::                        if (p_scores[i].has_valid_array > 0)
compute_candidates::218::238.4014::                        {
compute_candidates::219::514.5494::                            max_address = p_scores[i].base_address;
compute_candidates::220::290.0705::                            break;
compute_candidates::221::229.1822::                        }
compute_candidates::222::201.1554::                    }
compute_candidates::223::346.1169::                    /* Display 100% matching address. */
compute_candidates::224::375.7148::                    if (g_target_arch == ARCH_64)
compute_candidates::225::666.6891::                        printf("[i] Base address found (valid array): 0x%016lx.\n", max_address);
compute_candidates::226::194.2751::                    else
compute_candidates::227::797.0832::                        printf("[i] Base address found (valid array): 0x%08x.\n", (uint32_t)max_address);
compute_candidates::228::160.6448::                }
compute_candidates::229::167.7816::                else
compute_candidates::230::168.5700::                {
compute_candidates::231::463.1350::                    /* Check if g_bm_address == max_address. */
compute_candidates::232::363.7175::                    if (g_bm_address == max_address)
compute_candidates::233::206.8730::                    {
compute_candidates::234::403.2153::                        /* Display 100% matching address. */
compute_candidates::235::419.7913::                        if (g_target_arch == ARCH_64)
compute_candidates::236::685.4150::                            printf("[i] Base address found: 0x%016lx.\n", g_bm_address);
compute_candidates::237::218.2642::                        else
compute_candidates::238::770.9865::                            printf("[i] Base address found: 0x%08x.\n", (uint32_t)g_bm_address);
compute_candidates::239::186.6045::                    }
compute_candidates::240::406.3215::                    else if (max_address != 0xFFFFFFFFFFFFFFFF)
compute_candidates::241::209.7231::                    {   
compute_candidates::242::403.9929::                        if (g_target_arch == ARCH_64)
compute_candidates::243::730.1940::                            printf("[i] Base address seems to be 0x%016lx (not sure).\n", max_address);
compute_candidates::244::226.4148::                        else
compute_candidates::245::837.6876::                            printf("[i] Base address seems to be 0x%08x (not sure).\n", (uint32_t)max_address);
compute_candidates::246::194.9353::                    }
compute_candidates::247::52.2629::                    else
compute_candidates::248::202.1177::                    {
compute_candidates::249::412.3021::                        if (g_target_arch == ARCH_64)
compute_candidates::250::734.5150::                            printf("[i] Base address seems to be 0x%016lx (not sure).\n", g_bm_address);
compute_candidates::251::218.7441::                        else
compute_candidates::252::796.6873::                            printf("[i] Base address seems to be 0x%08x (not sure).\n", (uint32_t)g_bm_address);
compute_candidates::253::180.5925::                    }
compute_candidates::254::152.3548::                }
compute_candidates::255::250.7069::                /* Sort remaining candidates. */
compute_candidates::256::575.0845::                qsort(p_scores, g_bm_kept, sizeof(score_entry_t), score_compare_func);
compute_candidates::257::493.2864::                /* Tell the user he/she should use the -m/--more to get all the candidates. */
compute_candidates::258::425.0822::                if ((nb_candidates > 0) && (g_bm_kept > 1))
compute_candidates::259::154.4650::                {
compute_candidates::260::455.8667::                    printf(" More base addresses to consider (just in case):\n");
compute_candidates::261::633.1733::                    for (i=0; i<((g_bm_kept>30)?30:g_bm_kept); i++)
compute_candidates::262::160.9353::                    {
compute_candidates::263::756.1221::                        if ((p_scores[i].base_address != max_address) && (p_scores[i].score > 0))
compute_candidates::264::223.0354::                        {
compute_candidates::265::432.8214::                            if (g_target_arch == ARCH_64)
compute_candidates::266::1046.4387::                                printf("  0x%016lx (%f)\n", p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
compute_candidates::267::251.9628::                            else
compute_candidates::268::1116.0314::                                printf("  0x%08x (%.02f)\n", (uint32_t)p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
compute_candidates::269::215.2139::                        }
compute_candidates::270::187.4942::                    }
compute_candidates::271::160.1411::                }
compute_candidates::272::127.1676::            }
compute_candidates::273::132.5635::            else
compute_candidates::274::126.5582::            {
compute_candidates::275::380.3451::                error("Cannot evaluate, low memory !\n");
compute_candidates::276::126.3684::            }
compute_candidates::277::234.6037::            /* Free scores. */
compute_candidates::278::239.4672::            free(p_scores);
compute_candidates::279::92.3881::        }
compute_candidates::280::59.9701::    }
compute_candidates::281::40.2582::    else
compute_candidates::282::255.9803::        error("No point of interests found, cannot deduce loading address.");
compute_candidates::283::10.2218::}
for::1::282.9796::void TextPage::buildLines(TextBlock *blk, GList *lines) {
for::2::91.4189::  TextLine *line;
for::3::69.0301::  int i;
for::4::128.9024::  switch (blk->tag) {
for::5::98.3601::  case blkTagLine:
for::6::138.7352::    line = buildLine(blk);
for::7::244.9307::    if (blk->rot == 1 || blk->rot == 2) {
for::8::160.0666::      lines->insert(0, line);
for::9::73.9416::    } else {
for::10::133.5553::      lines->append(line);
for::11::49.6739::    }
for::12::66.1215::    break;
for::13::88.0430::  case blkTagColumn:
for::14::217.7875::  case blkTagMulticolumn: // multicolumn should never happen here
for::15::276.9703::    for (i = 0; i < blk->children->getLength(); ++i) {
for::16::267.9663::      buildLines((TextBlock *)blk->children->get(i), lines);
for::17::45.9368::    }
for::18::57.4898::    break;
for::19::31.1436::  }
for::20::9.7611::}
if::1::381.2908::GBool XRef::readXRefTable(GFileOffset *pos, int offset, XRefPosSet *posSet) {
if::2::89.7092::  XRefEntry entry;
if::3::88.2062::  Parser *parser;
if::4::100.0077::  Object obj, obj2;
if::5::89.7273::  char buf[6];
if::6::120.7773::  GFileOffset off, pos2;
if::7::78.5045::  GBool more;
if::8::196.6272::  int first, n, newSize, gen, i, c;
if::9::153.7460::  if (posSet->check(*pos)) {
if::10::269.5732::    error(errSyntaxWarning, -1, "Infinite loop in xref table");
if::11::88.9893::    return gFalse;
if::12::32.6157::  }
if::13::114.4609::  posSet->add(*pos);
if::14::170.0143::  str->setPos(start + *pos + offset);
if::15::83.4271::  while (1) {
if::16::60.3049::    do {
if::17::143.2113::      c = str->getChar();
if::18::177.6324::    } while (Lexer::isSpace(c));
if::19::132.4536::    if (c == 't') {
if::20::392.7542::      if (str->getBlock(buf, 6) != 6 || memcmp(buf, "railer", 6)) {
if::21::78.5116::	goto err1;
if::22::62.7110::      }
if::23::78.8519::      break;
if::24::49.8361::    }
if::25::198.2314::    if (c < '0' || c > '9') {
if::26::117.5911::      goto err1;
if::27::48.7697::    }
if::28::88.8666::    first = 0;
if::29::60.9038::    do {
if::30::220.9050::      first = (first * 10) + (c - '0');
if::31::143.3889::      c = str->getChar();
if::32::215.8159::    } while (c >= '0' && c <= '9');
if::33::186.4945::    if (!Lexer::isSpace(c)) {
if::34::119.8220::      goto err1;
if::35::50.3113::    }
if::36::62.8214::    do {
if::37::147.7309::      c = str->getChar();
if::38::187.3896::    } while (Lexer::isSpace(c));
if::39::90.6654::    n = 0;
if::40::65.1618::    do {
if::41::223.4322::      n = (n * 10) + (c - '0');
if::42::147.8581::      c = str->getChar();
if::43::231.5209::    } while (c >= '0' && c <= '9');
if::44::146.5693::    if (!Lexer::isSpace(c)) {
if::48::133.4562::      goto err1;
if::49::54.2832::    }
if::50::158.4681::    if (first + n > size) {
if::51::229.0998::      for (newSize = size ? 2 * size : 1024;
if::52::182.1241::	   first + n > newSize && newSize > 0;
if::53::123.6640::	   newSize <<= 1) ;
if::54::151.2341::      if (newSize < 0) {
if::55::82.1199::	goto err1;
if::56::64.1491::      }
if::57::355.6708::      entries = (XRefEntry *)greallocn(entries, newSize, sizeof(XRefEntry));
if::58::237.7308::      for (i = size; i < newSize; ++i) {
if::59::191.7897::	entries[i].offset = (GFileOffset)-1;
if::60::164.4746::	entries[i].type = xrefEntryFree;
if::61::65.0715::      }
if::62::111.7889::      size = newSize;
if::63::52.6094::    }
if::64::241.3125::    for (i = first; i < first + n; ++i) {
if::65::76.8156::      do {
if::66::112.0760::	c = str->getChar();
if::67::200.1399::      } while (Lexer::isSpace(c));
if::68::105.4821::      off = 0;
if::69::76.5789::      do {
if::70::184.4652::	off = (off * 10) + (c - '0');
if::71::107.1934::	c = str->getChar();
if::72::230.2250::      } while (c >= '0' && c <= '9');
if::73::203.4239::      if (!Lexer::isSpace(c)) {
if::74::79.5653::	goto err1;
if::75::64.0871::      }
if::76::134.3611::      entry.offset = off;
if::77::77.9325::      do {
if::78::112.3729::	c = str->getChar();
if::79::206.4198::      } while (Lexer::isSpace(c));
if::80::105.6887::      gen = 0;
if::81::78.3124::      do {
if::82::198.4775::	gen = (gen * 10) + (c - '0');
if::83::117.1246::	c = str->getChar();
if::84::245.7904::      } while (c >= '0' && c <= '9');
if::85::210.0484::      if (!Lexer::isSpace(c)) {
if::86::87.7055::	goto err1;
if::87::66.9066::      }
if::88::139.8898::      entry.gen = gen;
if::89::33.4280::      do {
if::93::162.9511::	entry.type = xrefEntryUncompressed;
if::94::184.1288::      } else if (c == 'f') {
if::95::133.4918::	entry.type = xrefEntryFree;
if::96::91.0721::      } else {
if::97::79.4471::	goto err1;
if::98::63.1222::      }
if::99::138.1518::      c = str->getChar();
if::100::195.5892::      if (!Lexer::isSpace(c)) {
if::101::77.9067::	goto err1;
if::102::60.3497::      }
if::103::255.7170::      if (entries[i].offset == (GFileOffset)-1) {
if::104::110.0137::	entries[i] = entry;
if::105::144.2635::	// PDF files of patents from the IBM Intellectual Property
if::106::193.5491::	// Network have a bug: the xref table claims to start at 1
if::107::84.2615::	// instead of 0.
if::108::137.0257::	if (i == 1 && first == 1 &&
if::109::241.9739::	    entries[1].offset == 0 && entries[1].gen == 65535 &&
if::110::179.2097::	    entries[1].type == xrefEntryFree) {
if::111::93.7112::	  i = first = 0;
if::112::136.9615::	  entries[0] = entries[1];
if::113::180.6104::	  entries[1].offset = (GFileOffset)-1;
if::114::28.0709::	}
if::115::97.4304::	if (i > last) {
if::116::71.5213::	  last = i;
if::117::29.7809::	}
if::118::59.5571::      }
if::119::46.9462::    }
if::120::33.6211::  }
if::121::86.3942::  // read the trailer dictionary
if::122::89.6072::  obj.initNull();
if::123::118.0887::  parser = new Parser(NULL,
if::124::116.5065::	     new Lexer(NULL,
if::125::292.0593::	       str->makeSubStream(str->getPos(), gFalse, 0, &obj)),
if::126::82.4895::	     gTrue);
if::127::115.6816::  parser->getObj(&obj);
if::128::60.0682::  delete parser;
if::129::141.6229::  if (!obj.isDict()) {
if::130::92.5056::    obj.free();
if::131::97.5228::    goto err1;
if::132::34.2819::  }
if::133::111.2417::  // get the 'Prev' pointer
if::134::178.6449::  //~ this can be a 64-bit int (?)
if::135::243.3657::  obj.getDict()->lookupNF("Prev", &obj2);
if::136::135.7522::  if (obj2.isInt()) {
if::137::255.1813::    *pos = (GFileOffset)(Guint)obj2.getInt();
if::138::101.3759::    more = gTrue;
if::139::118.6459::  } else if (obj2.isRef()) {
if::142::273.5553::    *pos = (GFileOffset)(Guint)obj2.getRefNum();
if::143::112.1950::    more = gTrue;
if::144::66.5711::  } else {
if::145::106.1209::    more = gFalse;
if::146::36.9486::  }
if::147::91.7143::  obj2.free();
if::148::101.1891::  // save the first trailer dictionary
if::149::157.7017::  if (trailerDict.isNone()) {
if::150::155.2227::    obj.copy(&trailerDict);
if::151::35.2240::  }
if::152::144.6864::  // check for an 'XRefStm' key
if::153::172.4826::  //~ this can be a 64-bit int (?)
if::154::335.5071::  if (obj.getDict()->lookup("XRefStm", &obj2)->isInt()) {
if::155::231.5473::    pos2 = (GFileOffset)(Guint)obj2.getInt();
if::156::155.7407::    readXRef(&pos2, posSet);
if::157::99.3443::    if (!ok) {
if::158::112.9211::      obj2.free();
if::159::103.7513::      goto err1;
if::160::47.0432::    }
if::161::35.0172::  }
if::162::84.3102::  obj2.free();
if::163::73.8610::  obj.free();
if::164::60.1207::  return more;
if::165::48.6904:: err1:
if::166::79.4677::  ok = gFalse;
if::167::65.6115::  return gFalse;
if::168::10.4089::}
if::1::108.6262::template <typename T>
if::2::69.8899::AP4_Result
if::3::295.2817::AP4_Array<T>::EnsureCapacity(AP4_Cardinal count)
if::4::33.0726::{
if::5::144.3073::    // check if we already have enough
if::6::272.3794::    if (count <= m_AllocatedCount) return AP4_SUCCESS;
if::7::145.8203::    // (re)allocate the items
if::8::299.7649::    T* new_items = (T*) ::operator new (count*sizeof(T));
if::9::161.1722::    if (new_items == NULL) {
if::10::241.2428::        return AP4_ERROR_OUT_OF_MEMORY;
if::11::51.8629::    }
if::12::175.8233::    if (m_ItemCount && m_Items) {
if::13::302.3688::        for (unsigned int i=0; i<m_ItemCount; i++) {
if::14::366.5334::            new ((void*)&new_items[i]) T(m_Items[i]);
if::15::208.7700::            m_Items[i].~T();
if::16::79.4250::        }
if::17::208.5536::        ::operator delete((void*)m_Items);
if::18::50.9990::    }
if::19::130.7972::    m_Items = new_items;
if::20::127.9834::    m_AllocatedCount = count;
if::21::125.6962::    return AP4_SUCCESS;
if::22::11.0143::}
GENERAL_NAME_cmp::1::302.8825::int GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)
GENERAL_NAME_cmp::2::34.1139::{
GENERAL_NAME_cmp::3::126.3759::    int result = -1;
GENERAL_NAME_cmp::4::256.7029::    if (!a || !b || a->type != b->type)
GENERAL_NAME_cmp::5::124.4420::        return -1;
GENERAL_NAME_cmp::6::132.1928::    switch (a->type) {
GENERAL_NAME_cmp::7::115.6565::    case GEN_X400:
GENERAL_NAME_cmp::8::407.6663::        result = ASN1_STRING_cmp(a->d.x400Address, b->d.x400Address);
GENERAL_NAME_cmp::9::100.2345::        break;
GENERAL_NAME_cmp::10::139.7405::    case GEN_EDIPARTY:
GENERAL_NAME_cmp::11::404.8267::        result = edipartyname_cmp(a->d.ediPartyName, b->d.ediPartyName);
GENERAL_NAME_cmp::12::97.3010::        break;
GENERAL_NAME_cmp::13::128.3274::    case GEN_OTHERNAME:
GENERAL_NAME_cmp::14::349.3241::        result = OTHERNAME_cmp(a->d.otherName, b->d.otherName);
GENERAL_NAME_cmp::15::99.1097::        break;
GENERAL_NAME_cmp::16::120.3339::    case GEN_EMAIL:
GENERAL_NAME_cmp::17::112.7537::    case GEN_DNS:
GENERAL_NAME_cmp::18::103.8084::    case GEN_URI:
GENERAL_NAME_cmp::19::393.2461::        result = ASN1_STRING_cmp(a->d.ia5, b->d.ia5);
GENERAL_NAME_cmp::20::94.8311::        break;
GENERAL_NAME_cmp::21::116.4823::    case GEN_DIRNAME:
GENERAL_NAME_cmp::22::372.2435::        result = X509_NAME_cmp(a->d.dirn, b->d.dirn);
GENERAL_NAME_cmp::23::97.6263::        break;
GENERAL_NAME_cmp::24::123.7774::    case GEN_IPADD:
GENERAL_NAME_cmp::25::431.0211::        result = ASN1_OCTET_STRING_cmp(a->d.ip, b->d.ip);
GENERAL_NAME_cmp::26::100.7882::        break;
GENERAL_NAME_cmp::27::115.2066::    case GEN_RID:
GENERAL_NAME_cmp::28::332.2237::        result = OBJ_cmp(a->d.rid, b->d.rid);
GENERAL_NAME_cmp::29::97.1762::        break;
GENERAL_NAME_cmp::30::49.6957::    }
GENERAL_NAME_cmp::31::76.5373::    return result;
GENERAL_NAME_cmp::32::12.7992::}
ossl_ffc_validate_public_key_partial::1::378.1836::int ossl_ffc_validate_public_key_partial(const FFC_PARAMS *params,
ossl_ffc_validate_public_key_partial::2::467.4218::                                         const BIGNUM *pub_key, int *ret)
ossl_ffc_validate_public_key_partial::3::33.4237::{
ossl_ffc_validate_public_key_partial::4::116.0047::    int ok = 0;
ossl_ffc_validate_public_key_partial::5::148.6260::    BIGNUM *tmp = NULL;
ossl_ffc_validate_public_key_partial::6::171.7950::    BN_CTX *ctx = NULL;
ossl_ffc_validate_public_key_partial::7::105.4397::    *ret = 0;
ossl_ffc_validate_public_key_partial::8::218.3203::    ctx = BN_CTX_new_ex(NULL);
ossl_ffc_validate_public_key_partial::9::124.8372::    if (ctx == NULL)
ossl_ffc_validate_public_key_partial::10::121.9810::        goto err;
ossl_ffc_validate_public_key_partial::11::168.5935::    BN_CTX_start(ctx);
ossl_ffc_validate_public_key_partial::12::197.2789::    tmp = BN_CTX_get(ctx);
ossl_ffc_validate_public_key_partial::13::209.9223::    /* Step(1): Verify pub_key >= 2 */
ossl_ffc_validate_public_key_partial::14::110.6333::    if (tmp == NULL
ossl_ffc_validate_public_key_partial::15::228.6812::        || !BN_set_word(tmp, 1))
ossl_ffc_validate_public_key_partial::16::122.1630::        goto err;
ossl_ffc_validate_public_key_partial::17::251.6633::    if (BN_cmp(pub_key, tmp) <= 0) {
ossl_ffc_validate_public_key_partial::18::302.9582::        *ret |= FFC_ERROR_PUBKEY_TOO_SMALL;
ossl_ffc_validate_public_key_partial::19::120.2862::        goto err;
ossl_ffc_validate_public_key_partial::20::49.0794::    }
ossl_ffc_validate_public_key_partial::21::234.8428::    /* Step(1): Verify pub_key <=  p-2 */
ossl_ffc_validate_public_key_partial::22::230.3065::    if (BN_copy(tmp, params->p) == NULL
ossl_ffc_validate_public_key_partial::23::227.2238::        || !BN_sub_word(tmp, 1))
ossl_ffc_validate_public_key_partial::24::123.2845::        goto err;
ossl_ffc_validate_public_key_partial::25::262.7152::    if (BN_cmp(pub_key, tmp) >= 0) {
ossl_ffc_validate_public_key_partial::26::328.0286::        *ret |= FFC_ERROR_PUBKEY_TOO_LARGE;
ossl_ffc_validate_public_key_partial::27::126.6898::        goto err;
ossl_ffc_validate_public_key_partial::28::52.7241::    }
ossl_ffc_validate_public_key_partial::29::98.8140::    ok = 1;
ossl_ffc_validate_public_key_partial::30::48.2631:: err:
ossl_ffc_validate_public_key_partial::31::147.9107::    if (ctx != NULL) {
ossl_ffc_validate_public_key_partial::32::207.2361::        BN_CTX_end(ctx);
ossl_ffc_validate_public_key_partial::33::208.3981::        BN_CTX_free(ctx);
ossl_ffc_validate_public_key_partial::34::49.9252::    }
ossl_ffc_validate_private_key::1::422.9185::int ossl_ffc_validate_private_key(const BIGNUM *upper, const BIGNUM *priv,
ossl_ffc_validate_private_key::2::324.0420::                                  int *ret)
ossl_ffc_validate_private_key::3::35.3224::{
ossl_ffc_validate_private_key::4::120.1883::    int ok = 0;
ossl_ffc_validate_private_key::5::113.1827::    *ret = 0;
ossl_ffc_validate_private_key::6::293.4639::    if (BN_cmp(priv, BN_value_one()) < 0) {
ossl_ffc_validate_private_key::7::314.2185::        *ret |= FFC_ERROR_PRIVKEY_TOO_SMALL;
ossl_ffc_validate_private_key::8::128.2414::        goto err;
ossl_ffc_validate_private_key::9::50.3753::    }
ossl_ffc_validate_private_key::10::225.3785::    if (BN_cmp(priv, upper) >= 0) {
ossl_ffc_validate_private_key::11::313.5571::        *ret |= FFC_ERROR_PRIVKEY_TOO_LARGE;
ossl_ffc_validate_private_key::12::116.9967::        goto err;
ossl_ffc_validate_private_key::13::50.1371::    }
ossl_ffc_validate_private_key::14::90.8188::    ok = 1;
ossl_ffc_validate_private_key::15::43.9440::err:
ossl_ffc_validate_private_key::16::76.7879::    return ok;
ossl_ffc_validate_private_key::17::11.6843::}
STACK_OF::1::412.6784::static STACK_OF(X509) *pkcs7_get_signer_certs(const PKCS7 *p7)
STACK_OF::2::31.9009::{
STACK_OF::3::231.4254::    if (PKCS7_type_is_signed(p7))
STACK_OF::4::193.4633::        return p7->d.sign->cert;
STACK_OF::5::265.7708::    if (PKCS7_type_is_signedAndEnveloped(p7))
STACK_OF::6::245.4567::        return p7->d.signed_and_enveloped->cert;
STACK_OF::7::70.3658::    return NULL;
STACK_OF::8::11.2911::}
ossl_pkcs7_resolve_libctx::1::313.8164::void ossl_pkcs7_resolve_libctx(PKCS7 *p7)
ossl_pkcs7_resolve_libctx::2::32.3917::{
ossl_pkcs7_resolve_libctx::3::81.1151::    int i;
ossl_pkcs7_resolve_libctx::4::364.8450::    const PKCS7_CTX *ctx = ossl_pkcs7_get0_ctx(p7);
ossl_pkcs7_resolve_libctx::5::389.8394::    OSSL_LIB_CTX *libctx = ossl_pkcs7_ctx_get0_libctx(ctx);
ossl_pkcs7_resolve_libctx::6::320.8126::    const char *propq = ossl_pkcs7_ctx_get0_propq(ctx);
ossl_pkcs7_resolve_libctx::7::440.9913::    STACK_OF(PKCS7_RECIP_INFO) *rinfos = pkcs7_get_recipient_info(p7);
ossl_pkcs7_resolve_libctx::8::436.6139::    STACK_OF(PKCS7_SIGNER_INFO) *sinfos = PKCS7_get_signer_info(p7);
ossl_pkcs7_resolve_libctx::9::373.2552::    STACK_OF(X509) *certs = pkcs7_get_signer_certs(p7);
ossl_pkcs7_resolve_libctx::10::124.4406::    if (ctx == NULL)
ossl_pkcs7_resolve_libctx::11::96.7686::        return;
ossl_pkcs7_resolve_libctx::12::296.5629::    for (i = 0; i < sk_X509_num(certs); i++)
ossl_pkcs7_resolve_libctx::13::432.9865::        ossl_x509_set0_libctx(sk_X509_value(certs, i), libctx, propq);
ossl_pkcs7_resolve_libctx::14::382.7551::    for (i = 0; i < sk_PKCS7_RECIP_INFO_num(rinfos); i++) {
ossl_pkcs7_resolve_libctx::15::432.3814::        PKCS7_RECIP_INFO *ri = sk_PKCS7_RECIP_INFO_value(rinfos, i);
ossl_pkcs7_resolve_libctx::16::349.5351::        ossl_x509_set0_libctx(ri->cert, libctx, propq);
ossl_pkcs7_resolve_libctx::17::49.4424::    }
ossl_pkcs7_resolve_libctx::18::403.2438::    for (i = 0; i < sk_PKCS7_SIGNER_INFO_num(sinfos); i++) {
ossl_pkcs7_resolve_libctx::19::452.2094::        PKCS7_SIGNER_INFO *si = sk_PKCS7_SIGNER_INFO_value(sinfos, i);
ossl_pkcs7_resolve_libctx::20::161.8494::        if (si != NULL)
ossl_pkcs7_resolve_libctx::21::61.8776::            si->ctx = ctx;
find_base_address::1::220.6057::void find_base_address(char *psz_filename)
find_base_address::2::35.6058::{
find_base_address::3::128.7773::    FILE *f_file;
find_base_address::4::152.4044::    poi_t *poi;
find_base_address::5::124.6038::    int nb_strings;
find_base_address::6::151.1198::    /* Initialize our list. */
find_base_address::7::201.2050::    poi_init(&g_poi_list);
find_base_address::8::160.4120::    /* Open file and get size. */
find_base_address::9::233.5594::    f_file = fopen(psz_filename, "rb");
find_base_address::10::147.0333::    if (f_file == NULL)
find_base_address::11::52.9698::    {
find_base_address::12::172.9749::        /* Failed to open file. */
find_base_address::13::231.5061::        printf("[!] Cannot access file '%s'
find_base_address::14::95.9857::", psz_filename);
find_base_address::15::51.1235::    }
find_base_address::16::53.8120::    else
find_base_address::17::53.0586::    {
find_base_address::18::199.2938::        /* Set file cursor to the end. */
find_base_address::19::259.1433::        fseek(f_file, 0, SEEK_END);
find_base_address::20::159.9201::        /* Get file size. */
find_base_address::21::235.4389::        g_content_size = ftell(f_file);
find_base_address::22::326.1063::        /* File size must be at least the size of the target architecture's pointer size. */
find_base_address::23::341.8160::        if (g_content_size >= get_arch_pointer_size(g_target_arch))
find_base_address::24::80.5766::        {
find_base_address::25::219.7307::            /* Determine file chunk size. */
find_base_address::26::190.7402::            compute_chunk_size();
find_base_address::27::272.9779::            /* Go back to the beginning of this file. */
find_base_address::28::300.2984::            fseek(f_file, 0, SEEK_SET);
find_base_address::29::260.8033::            /* Allocate enough memory to store content. */
find_base_address::30::342.4092::            gp_content = (unsigned char *)malloc(g_content_size);
find_base_address::31::214.3150::            if (gp_content == NULL)
find_base_address::32::117.1039::            {
find_base_address::33::199.6848::                printf("[!] Cannot allocate memory for file %s (%d bytes is too large)
find_base_address::35::130.5645::            }
find_base_address::36::136.5875::            else
find_base_address::37::128.9976::            {
find_base_address::38::270.3361::                /* Read file content. */
find_base_address::39::443.1527::                fread(gp_content, g_content_size, 1, f_file);
find_base_address::40::336.8669::                printf("[i] File read (%d bytes)
find_base_address::41::130.4014::", g_content_size);
find_base_address::42::257.2047::                /* Analyze entropy. */
find_base_address::43::421.4142::                memory_analyze(gp_content, g_content_size, "default");
find_base_address::44::376.4655::                if (g_target_endian != ENDIAN_UNKNOWN)
find_base_address::45::161.2359::                { 
find_base_address::46::380.1329::                    /* Detect endianness, pointer base and mask. */
find_base_address::47::711.0901::                    //detect_endianness(arch, p_file_content, ui_file_size, &g_ptr_base, &g_ptr_mask);
find_base_address::48::301.2819::                    /* Force endianness. */
find_base_address::49::372.0468::                    g_target_endian = g_target_endian;
find_base_address::50::157.5005::                }
find_base_address::51::159.4471::                else
find_base_address::52::159.1561::                {
find_base_address::53::434.5260::                    /* Endianness is unknown, try to guess it. */
find_base_address::54::494.7056::                    g_target_endian = detect_endianness(&g_ptr_base, &g_ptr_mask);
find_base_address::55::173.7449::                }
find_base_address::56::431.0643::                if (g_target_endian != ENDIAN_UNKNOWN)
find_base_address::57::163.1117::                {
find_base_address::58::411.9173::                    printf("[i] Endianness is %s
find_base_address::59::350.4388::", (g_target_endian==ENDIAN_LE)?"LE":"BE");
find_base_address::60::379.3400::                    if (g_symbols_list == NULL)
find_base_address::61::188.9286::                    {
find_base_address::62::356.9750::                        /* Search points of interest. */
find_base_address::63::444.1285::                        index_poi(&g_poi_list, 1);
find_base_address::64::413.3515::                        index_functions(&g_poi_list);
find_base_address::65::422.4895::                        g_candidates = addrtree_node_alloc();
find_base_address::66::515.9744::                        compute_candidates(&g_poi_list, g_candidates);
find_base_address::67::194.0695::                    }
find_base_address::68::202.0049::                    else
find_base_address::69::196.8854::                    {
find_base_address::70::358.8076::                        /* Index strings. */
find_base_address::71::483.7654::                        index_poi(g_symbols_list, 1);
find_base_address::72::257.5245::                        g_candidates = addrtree_node_alloc();
find_base_address::73::599.4497::                        compute_candidates(g_symbols_list, g_candidates);
find_base_address::74::339.2798::                    }                
find_base_address::75::166.9212::                }
find_base_address::76::166.5572::                else
find_base_address::77::166.7210::                {
find_base_address::78::417.7114::                    printf("[!] Unable to detect endianness :X
find_base_address::79::50.4684::");
find_base_address::80::156.6830::                }
find_base_address::81::129.7149::            }
find_base_address::82::95.4711::        }
find_base_address::83::94.2673::        else
find_base_address::84::92.4583::        {
find_base_address::85::350.5966::            printf("[!] Input file must be at least %d bytes.
find_base_address::86::243.6394::", get_arch_pointer_size(g_target_arch));
find_base_address::87::82.8868::        }
find_base_address::88::50.6277::    }
find_base_address::89::12.4615::}
bits::1::493.6501::AP4_Dac4Atom::AP4_Dac4Atom(AP4_UI32 size, const Ac4Dsi* ac4Dsi):
bits::2::401.8525::    AP4_Atom(AP4_ATOM_TYPE_DAC4, AP4_ATOM_HEADER_SIZE){
bits::3::154.2309::    AP4_BitWriter bits(size);
bits::4::271.9178::    bits.Write(ac4Dsi->ac4_dsi_version, 3);
bits::5::302.2971::    bits.Write(ac4Dsi->d.v1.bitstream_version, 7);
bits::6::282.0841::    bits.Write(ac4Dsi->d.v1.fs_index, 1);
bits::7::303.3266::    bits.Write(ac4Dsi->d.v1.frame_rate_index, 4);
bits::8::159.6629::    // IMS presentation shall has the legacy presentation
bits::9::167.8608::    unsigned int add_n_presentations = 0;
bits::10::432.3552::    for (unsigned int idx = 0; idx < ac4Dsi->d.v1.n_presentations; idx++){
bits::11::402.9087::        if (ac4Dsi->d.v1.presentations[idx].presentation_version == 2) { 
bits::12::188.7645::            add_n_presentations++; 
bits::13::75.5388::        }
bits::14::48.1605::    }
bits::15::243.7872::    // Assume the total presentation numbers is less than 512 after adding legacy presentation
bits::16::386.4608::    bits.Write(ac4Dsi->d.v1.n_presentations + add_n_presentations, 9);
bits::17::280.4128::    if (ac4Dsi->d.v1.bitstream_version > 1){
bits::18::348.5458::        bits.Write(ac4Dsi->d.v1.b_program_id, 1);
bits::19::326.5323::        if (ac4Dsi->d.v1.b_program_id == 1){
bits::20::386.2325::            bits.Write(ac4Dsi->d.v1.short_program_id, 16);
bits::21::347.5152::            bits.Write(ac4Dsi->d.v1.b_uuid, 1);
bits::22::395.1241::            if (ac4Dsi->d.v1.b_uuid == 1) {
bits::23::413.1462::                for (unsigned int idx = 0; idx < 16; idx ++) {
bits::24::488.2746::                    bits.Write(ac4Dsi->d.v1.program_uuid[idx], 8);
bits::25::139.5038::                }
bits::26::112.0789::            }
bits::27::79.3684::        }
bits::28::49.9091::    }
bits::29::169.8193::    // ac4_bitrate_dsi()
bits::30::650.1378::    AP4_Dac4Atom::Ac4Dsi::Ac4BitrateDsi ac4_bitrate_dsi = ac4Dsi->d.v1.ac4_bitrate_dsi;
bits::31::262.3837::    ac4_bitrate_dsi.WriteBitrateDsi(bits);
bits::32::155.7876::    AP4_ByteAlign(bits);
bits::33::456.8634::    for (unsigned int idx = 0; idx < ac4Dsi->d.v1.n_presentations; idx ++) {
bits::34::250.5908::        unsigned int default_pres_bytes = 36;   // random value
bits::35::560.1100::        AP4_Dac4Atom::Ac4Dsi::PresentationV1 &presentation = ac4Dsi->d.v1.presentations[idx];
bits::36::271.6022::        bits.Write(presentation.presentation_version, 8);
bits::37::419.4409::        bits.Write(default_pres_bytes, 8);      // pres_bytes, need to be updated later
bits::38::422.9773::        //TODO: if (pres_bytes == 255), shall not happen now. Need the memory move function for bits
bits::39::309.9371::        unsigned int pres_bytes_idx = bits.GetBitCount() / 8 - 1;
bits::40::823.1063::        if (ac4Dsi->d.v1.n_presentations != 1 && presentation.d.v1.b_presentation_id == 0 && presentation.d.v1.b_extended_presentation_id == 0) {
bits::41::623.0057::            fprintf(stderr, "WARN: Need presentation_id for multiple presnetaion signal. The presentation of Presentation Index (PI) is %d miss presentation_id.
bits::42::95.0637::", idx + 1);
bits::43::81.1714::        }
bits::44::241.0412::        if (presentation.presentation_version == 0){
bits::45::218.3472::            // TODO: support presentation version = 0
bits::46::391.0779::        }else if (presentation.presentation_version == 1 || presentation.presentation_version == 2){
bits::47::254.1950::            presentation.WritePresentationV1Dsi(bits);
bits::48::603.8409::            Ap4_Ac4UpdatePresBytes(bits.GetData(), pres_bytes_idx, bits.GetBitCount()/8 - pres_bytes_idx - 1);
bits::49::105.1443::        } else {
bits::50::388.8483::            Ap4_Ac4UpdatePresBytes(bits.GetData(), pres_bytes_idx, 0);
bits::51::82.1822::        }
bits::52::166.5960::        //legacy presentation for IMS
bits::53::251.3015::        if (presentation.presentation_version == 2) {
bits::54::440.7873::            AP4_Dac4Atom::Ac4Dsi::PresentationV1 legacy_presentation = presentation;
bits::55::712.3150::            if (legacy_presentation.d.v1.b_presentation_id == 0 && legacy_presentation.d.v1.b_extended_presentation_id == 0) {
bits::56::395.9999::                fprintf(stderr, "WARN: Need presentation_id for IMS signal.
bits::57::38.3937::");
bits::58::78.6355::            }
bits::59::297.9975::            legacy_presentation.presentation_version = 1;
bits::60::368.4046::            legacy_presentation.d.v1.b_pre_virtualized = 0;
bits::61::397.5158::            legacy_presentation.d.v1.dolby_atmos_indicator = 0;
bits::62::343.6301::            bits.Write(legacy_presentation.presentation_version, 8);
bits::63::436.3983::            bits.Write(default_pres_bytes, 8);    // pres_bytes, need to be updated later
bits::64::334.9090::            //TODO: if (pres_bytes == 255), shall not happen now
bits::65::365.1278::            unsigned int pres_bytes_idx = bits.GetBitCount() / 8 - 1;
bits::66::300.1089::            legacy_presentation.WritePresentationV1Dsi(bits);
bits::67::608.5983::            Ap4_Ac4UpdatePresBytes(bits.GetData(), pres_bytes_idx, bits.GetBitCount()/8 - pres_bytes_idx - 1);
bits::68::79.9502::        }
bits::69::50.3079::    }
bits::70::324.8222::    m_RawBytes.SetData(bits.GetData(), bits.GetBitCount() / 8);
bits::71::214.5296::    m_Size32 += m_RawBytes.GetDataSize();
bits::72::103.8793::    // clear the DSI
bits::73::303.2597::    AP4_SetMemory(&m_Dsi, 0, sizeof(m_Dsi));
bits::74::225.7111::    m_Dsi.ac4_dsi_version = -1;
bits::75::11.7957::}
if::1::185.5443::Object *Lexer::getObj(Object *obj) {
if::2::81.1355::  char *p;
if::3::102.6842::  int c, c2;
if::4::141.1518::  GBool comment, neg, done;
if::5::92.5827::  int numParen;
if::6::78.5406::  int xi;
if::7::101.7244::  double xf, scale;
if::8::82.7939::  GString *s;
if::9::86.5854::  int n, m;
if::10::101.2555::  // skip whitespace and comments
if::11::87.0105::  comment = gFalse;
if::12::85.2951::  while (1) {
if::13::188.2376::    if ((c = getChar()) == EOF) {
if::14::143.8874::      return obj->initEOF();
if::15::49.4574::    }
if::16::93.2585::    if (comment) {
if::17::110.0252::      if (c == '
if::18::73.6613::' || c == '
if::19::32.9193::')
if::20::75.4889::	comment = gFalse;
if::21::161.8889::    } else if (c == '%') {
if::22::115.8340::      comment = gTrue;
if::23::206.1398::    } else if (specialChars[c] != 1) {
if::24::77.8529::      break;
if::25::50.1104::    }
if::26::35.8995::  }
if::27::71.4023::  // start reading token
if::28::82.9736::  switch (c) {
if::29::49.9885::  // number
if::30::261.1313::  case '0': case '1': case '2': case '3': case '4':
if::31::262.0260::  case '5': case '6': case '7': case '8': case '9':
if::32::122.4117::  case '-': case '.':
if::33::102.3791::    neg = gFalse;
if::34::130.9705::    xf = xi = 0;
if::35::136.2746::    if (c == '-') {
if::36::119.6049::      neg = gTrue;
if::37::162.7715::    } else if (c == '.') {
if::38::119.1463::      goto doReal;
if::39::77.3431::    } else {
if::40::183.2024::      xf = xi = c - '0';
if::41::50.6652::    }
if::42::102.1981::    while (1) {
if::43::117.9126::      c = lookChar();
if::44::171.1741::      if (isdigit(c)) {
if::45::64.5693::	getChar();
if::46::180.6552::	xi = xi * 10 + (c - '0');
if::47::180.8384::	xf = xf * 10 + (c - '0');
if::48::179.9602::      } else if (c == '.') {
if::49::63.1100::	getChar();
if::50::86.9495::	goto doReal;
if::51::93.9906::      } else {
if::52::50.0828::	break;
if::53::63.4637::      }
if::54::6.5067::    }
if::61::122.7757::    scale = 0.1;
if::62::107.8475::    while (1) {
if::63::123.3062::      c = lookChar();
if::64::161.3723::      if (c == '-') {
if::65::166.9340::	// ignore minus signs in the middle of numbers to match
if::66::74.6641::	// Adobe's behavior
if::67::235.2982::	error(errSyntaxWarning, getPos(), "Badly formatted number");
if::68::61.8039::	getChar();
if::69::50.3743::	continue;
if::70::62.0509::      }
if::71::167.6142::      if (!isdigit(c)) {
if::72::49.5654::	break;
if::73::62.8603::      }
if::74::95.6580::      getChar();
if::75::209.1058::      xf = xf + scale * (c - '0');
if::76::139.3969::      scale *= 0.1;
if::77::49.8959::    }
if::78::99.3375::    if (neg) {
if::79::127.8954::      xf = -xf;
if::80::51.1407::    }
if::81::129.7494::    obj->initReal(xf);
if::82::64.9713::    break;
if::83::52.5176::  // string
if::84::66.0206::  case '(':
if::85::110.5530::    p = tokBuf;
if::86::85.7845::    n = 0;
if::87::114.4903::    numParen = 1;
if::88::101.7282::    done = gFalse;
if::89::91.1972::    s = NULL;
if::90::62.2099::    do {
if::91::123.0360::      c2 = EOF;
if::92::146.4037::      switch (c = getChar()) {
if::93::98.1130::      case EOF:
if::94::53.3198::#if 0
if::95::252.3234::      // This breaks some PDF files, e.g., ones from Photoshop.
if::96::72.2360::      case '
if::97::32.2206::':
if::98::71.1488::      case '
if::99::30.6254::':
if::100::48.5671::#endif
if::101::226.0260::	error(errSyntaxError, getPos(), "Unterminated string");
if::102::78.5773::	done = gTrue;
if::103::48.1569::	break;
if::104::93.9422::      case '(':
if::105::86.4345::	++numParen;
if::106::73.8649::	c2 = c;
if::107::51.5388::	break;
if::108::103.5033::      case ')':
if::109::142.7749::	if (--numParen == 0) {
if::110::91.1555::	  done = gTrue;
if::111::58.6498::	} else {
if::112::80.4691::	  c2 = c;
if::113::30.8249::	}
if::114::50.0372::	break;
if::115::99.1033::      case '\':
if::116::118.7719::	switch (c = getChar()) {
if::117::68.5919::	case 'n':
if::118::69.8836::	  c2 = '
if::119::37.0668::';
if::120::54.8883::	  break;
if::121::64.8084::	case 'r':
if::134::67.2774::	case '\':
if::135::59.9210::	case '(':
if::136::71.3562::	case ')':
if::137::86.6845::	  c2 = c;
if::138::55.4426::	  break;
if::139::218.5308::	case '0': case '1': case '2': case '3':
if::140::212.6150::	case '4': case '5': case '6': case '7':
if::141::116.9879::	  c2 = c - '0';
if::142::86.6447::	  c = lookChar();
if::143::195.3142::	  if (c >= '0' && c <= '7') {
if::144::78.4647::	    getChar();
if::145::220.4018::	    c2 = (c2 << 3) + (c - '0');
if::146::96.7319::	    c = lookChar();
if::147::205.6417::	    if (c >= '0' && c <= '7') {
if::148::93.0799::	      getChar();
if::149::233.4353::	      c2 = (c2 << 3) + (c - '0');
if::150::47.4333::	    }
if::151::35.1855::	  }
if::152::49.2426::	  break;
if::153::37.2256::	case '
if::154::30.3688::':
if::155::86.6015::	  c = lookChar();
if::156::79.2448::	  if (c == '
if::157::42.7579::') {
if::158::76.5983::	    getChar();
if::159::34.8256::	  }
if::160::50.2602::	  break;
if::161::36.5183::	case '
if::162::30.4960::':
if::163::48.2189::	  break;
if::164::63.6238::	case EOF:
if::165::222.6071::	  error(errSyntaxError, getPos(), "Unterminated string");
if::166::82.9312::	  done = gTrue;
if::167::49.3064::	  break;
if::168::41.2249::	default:
if::169::76.2756::	  c2 = c;
if::170::48.7200::	  break;
if::171::26.2707::	}
if::172::44.3215::	break;
if::173::76.2277::      default:
if::174::71.8631::	c2 = c;
if::175::47.5119::	break;
if::176::62.2719::      }
if::177::157.8015::      if (c2 != EOF) {
if::178::133.4711::	if (n == tokBufSize) {
if::179::78.6213::	  if (!s)
if::180::235.9144::	    s = new GString(tokBuf, tokBufSize);
if::181::38.2205::	  else
if::182::222.3050::	    s->append(tokBuf, tokBufSize);
if::183::99.6995::	  p = tokBuf;
if::184::74.4487::	  n = 0;
if::185::29.5474::	}
if::186::145.3167::	*p++ = (char)c2;
if::187::60.8769::	++n;
if::188::61.4561::      }
if::189::115.5211::    } while (!done);
if::190::103.7977::    if (!s)
if::191::220.3408::      s = new GString(tokBuf, n);
if::192::33.3436::    else
if::200::95.0773::    s = NULL;
if::201::295.9440::    while ((c = lookChar()) != EOF && !specialChars[c]) {
if::202::96.6917::      getChar();
if::203::153.4083::      if (c == '#') {
if::204::91.3949::	c2 = lookChar();
if::205::209.9778::	if (c2 >= '0' && c2 <= '9') {
if::206::118.2683::	  c = c2 - '0';
if::207::231.3492::	} else if (c2 >= 'A' && c2 <= 'F') {
if::208::146.7880::	  c = c2 - 'A' + 10;
if::209::229.6100::	} else if (c2 >= 'a' && c2 <= 'f') {
if::210::144.9959::	  c = c2 - 'a' + 10;
if::211::53.7924::	} else {
if::212::90.2717::	  goto notEscChar;
if::213::30.1464::	}
if::214::59.2148::	getChar();
if::215::77.3819::	c <<= 4;
if::216::89.8016::	c2 = getChar();
if::217::200.2903::	if (c2 >= '0' && c2 <= '9') {
if::218::119.0452::	  c += c2 - '0';
if::219::232.3947::	} else if (c2 >= 'A' && c2 <= 'F') {
if::220::151.2613::	  c += c2 - 'A' + 10;
if::221::233.9849::	} else if (c2 >= 'a' && c2 <= 'f') {
if::222::151.6019::	  c += c2 - 'a' + 10;
if::223::54.0826::	} else {
if::224::271.2644::	  error(errSyntaxError, getPos(), "Illegal digit in hex char in name");
if::225::28.2655::	}
if::226::61.7254::      }
if::227::92.8525::     notEscChar:
if::228::233.3582::      // the PDF spec claims that names are limited to 127 chars, but
if::229::238.1662::      // Distiller 8 will produce longer names, and Acrobat 8 will
if::230::108.8948::      // accept longer names
if::231::94.8141::      ++n;
if::232::173.2160::      if (n < tokBufSize) {
if::233::98.1211::	*p++ = c;
if::234::205.8090::      } else if (n == tokBufSize) {
if::235::80.8348::	*p = c;
if::236::179.2038::	s = new GString(tokBuf, n);
if::237::87.6995::      } else {
if::238::132.5548::	s->append((char)c);
if::239::63.8968::      }
if::240::52.0010::    }
if::241::163.9471::    if (n < tokBufSize) {
if::242::19.5736::      *p = '
if::1::178.8709::GBool DCTStream::readMCURow() {
if::2::104.4339::  int data1[64];
if::3::130.9270::  Guchar data2[64];
if::4::163.3936::  Guchar *p1, *p2;
if::5::262.1323::  int pY, pCb, pCr, pR, pG, pB;
if::6::224.1104::  int h, v, horiz, vert, hSub, vSub;
if::7::405.4669::  int x1, x2, y2, x3, y3, x4, y4, x5, y5, cc, i;
if::8::62.1260::  int c;
if::9::261.5303::  for (x1 = 0; x1 < width; x1 += mcuWidth) {
if::10::105.8736::    // deal with restart marker
if::11::226.9344::    if (restartInterval > 0 && restartCtr == 0) {
if::12::124.9903::      c = readMarker();
if::13::160.2081::      if (c != restartMarker) {
if::14::145.8369::	error(errSyntaxError, getPos(),
if::15::184.5937::	      "Bad DCT data: incorrect restart marker");
if::16::70.2646::	return gFalse;
if::17::63.5768::      }
if::18::205.3825::      if (++restartMarker == 0xd8)
if::19::134.1567::	restartMarker = 0xd0;
if::20::87.0170::      restart();
if::21::48.0650::    }
if::22::98.5177::    // read one MCU
if::23::236.2097::    for (cc = 0; cc < numComps; ++cc) {
if::24::173.2165::      h = compInfo[cc].hSample;
if::25::177.3188::      v = compInfo[cc].vSample;
if::26::166.9260::      horiz = mcuWidth / h;
if::27::155.1564::      vert = mcuHeight / v;
if::28::154.8543::      hSub = horiz / 8;
if::29::142.3073::      vSub = vert / 8;
if::30::303.5113::      for (y2 = 0; y2 < mcuHeight; y2 += vert) {
if::31::281.4244::	for (x2 = 0; x2 < mcuWidth; x2 += horiz) {
if::32::325.1741::	  if (!readDataUnit(&dcHuffTables[scanInfo.dcHuffTable[cc]],
if::33::266.0028::			    &acHuffTables[scanInfo.acHuffTable[cc]],
if::34::43.8542::			    &compInfo[cc].prevDC,
if::38::248.7822::	  transformDataUnit(quantTables[compInfo[cc].quantTable],
if::39::118.6985::			    data1, data2);
if::40::331.2571::	  if (hSub == 1 && vSub == 1 && x1+x2+8 <= width) {
if::41::362.1153::	    for (y3 = 0, i = 0; y3 < 8; ++y3, i += 8) {
if::42::440.0423::	      p1 = &rowBuf[((y2+y3) * width + (x1+x2)) * numComps + cc];
if::43::246.8576::	      p1[0]          = data2[i];
if::44::238.5098::	      p1[  numComps] = data2[i+1];
if::45::257.3010::	      p1[2*numComps] = data2[i+2];
if::46::258.9113::	      p1[3*numComps] = data2[i+3];
if::47::266.3126::	      p1[4*numComps] = data2[i+4];
if::48::265.1469::	      p1[5*numComps] = data2[i+5];
if::49::259.6760::	      p1[6*numComps] = data2[i+6];
if::50::259.5105::	      p1[7*numComps] = data2[i+7];
if::51::48.2463::	    }
if::52::334.9803::	  } else if (hSub == 2 && vSub == 2 && x1+x2+16 <= width) {
if::53::379.3130::	    for (y3 = 0, i = 0; y3 < 16; y3 += 2, i += 8) {
if::54::459.5578::	      p1 = &rowBuf[((y2+y3) * width + (x1+x2)) * numComps + cc];
if::55::204.6185::	      p2 = p1 + width * numComps;
if::56::228.0123::	      p1[0] = p1[numComps] =
if::57::264.5725::		p2[0] = p2[numComps] = data2[i];
if::58::258.1291::	      p1[2*numComps] = p1[3*numComps] =
if::59::375.0457::		p2[2*numComps] = p2[3*numComps] = data2[i+1];
if::60::303.2952::	      p1[4*numComps] = p1[5*numComps] =
if::61::343.5809::		p2[4*numComps] = p2[5*numComps] = data2[i+2];
if::62::284.8301::	      p1[6*numComps] = p1[7*numComps] =
if::63::341.1704::		p2[6*numComps] = p2[7*numComps] = data2[i+3];
if::64::282.3565::	      p1[8*numComps] = p1[9*numComps] =
if::65::336.6434::		p2[8*numComps] = p2[9*numComps] = data2[i+4];
if::66::284.2355::	      p1[10*numComps] = p1[11*numComps] =
if::67::349.1674::		p2[10*numComps] = p2[11*numComps] = data2[i+5];
if::68::289.6922::	      p1[12*numComps] = p1[13*numComps] =
if::69::339.6268::		p2[12*numComps] = p2[13*numComps] = data2[i+6];
if::70::285.7836::	      p1[14*numComps] = p1[15*numComps] =
if::71::343.4925::		p2[14*numComps] = p2[15*numComps] = data2[i+7];
if::72::48.1166::	    }
if::73::61.8119::	  } else {
if::74::373.1781::	    p1 = &rowBuf[(y2 * width + (x1+x2)) * numComps + cc];
if::75::88.8594::	    i = 0;
if::76::399.4289::	    for (y3 = 0, y4 = 0; y3 < 8; ++y3, y4 += vSub) {
if::77::409.1148::	      for (x3 = 0, x4 = 0; x3 < 8; ++x3, x4 += hSub) {
if::78::177.7630::		for (y5 = 0; y5 < vSub; ++y5) {
if::79::440.3221::		  for (x5 = 0; x5 < hSub && x1+x2+x4+x5 < width; ++x5) {
if::80::421.3982::		    p1[((y4+y5) * width + (x4+x5)) * numComps] = data2[i];
if::81::34.9442::		  }
if::82::29.4297::		}
if::83::60.7702::		++i;
if::84::59.5597::	      }
if::85::46.3219::	    }
if::86::32.8149::	  }
if::87::29.1842::	}
if::88::60.1234::      }
if::89::47.6610::    }
if::90::104.6163::    --restartCtr;
if::91::33.3366::  }
if::92::73.2154::  // color space conversion
if::93::101.7653::  if (colorXform) {
if::94::132.8797::    // convert YCbCr to RGB
if::95::143.3962::    if (numComps == 3) {
if::96::406.9160::      for (i = 0, p1 = rowBuf; i < width * mcuHeight; ++i, p1 += 3) {
if::97::111.7543::	pY = p1[0];
if::98::157.0810::	pCb = p1[1] - 128;
if::99::147.4194::	pCr = p1[2] - 128;
if::100::323.4106::	pR = ((pY << 16) + dctCrToR * pCr + 32768) >> 16;
if::101::182.3441::	p1[0] = dctClip(pR);
if::102::431.0181::	pG = ((pY << 16) + dctCbToG * pCb + dctCrToG * pCr + 32768) >> 16;
if::103::184.1200::	p1[1] = dctClip(pG);
if::104::342.5950::	pB = ((pY << 16) + dctCbToB * pCb + 32768) >> 16;
if::105::187.0223::	p1[2] = dctClip(pB);
if::106::61.5551::      }
if::107::260.0189::    // convert YCbCrK to CMYK (K is passed through unchanged)
if::108::178.2801::    } else if (numComps == 4) {
if::109::427.1079::      for (i = 0, p1 = rowBuf; i < width * mcuHeight; ++i, p1 += 4) {
if::110::116.5251::	pY = p1[0];
if::111::169.7306::	pCb = p1[1] - 128;
if::112::155.3678::	pCr = p1[2] - 128;
if::113::31.4886::	pR = ((pY << 16) + dctCrToR * pCr + 32768) >> 16;
if::114::225.3461::	p1[0] = 255 - dctClip(pR);
if::115::475.6525::	pG = ((pY << 16) + dctCbToG * pCb + dctCrToG * pCr + 32768) >> 16;
if::116::209.8548::	p1[1] = 255 - dctClip(pG);
if::117::341.8979::	pB = ((pY << 16) + dctCbToB * pCb + 32768) >> 16;
if::118::206.2045::	p1[2] = 255 - dctClip(pB);
if::119::61.2384::      }
if::120::47.8975::    }
if::121::33.3618::  }
if::122::128.5588::  rowBufPtr = rowBuf;
if::123::144.9842::  if (y + mcuHeight <= height) {
if::124::249.0273::    rowBufEnd = rowBuf + numComps * width * mcuHeight;
if::125::57.5909::  } else {
if::126::248.0260::    rowBufEnd = rowBuf + numComps * width * (height - y);
if::127::32.5024::  }
if::128::66.1954::  return gTrue;
if::129::11.1474::}
gAtomicIncrement::1::263.3083::static inline GAtomicCounter gAtomicIncrement(GAtomicCounter *counter) {
gAtomicIncrement::2::110.5123::  GAtomicCounter newVal;
gAtomicIncrement::3::109.7414::#if defined(_WIN32)
gAtomicIncrement::4::159.2095::  newVal = _InterlockedIncrement(counter);
gAtomicIncrement::5::228.8681::#elif defined(__GNUC__) || defined(__xlC__)
gAtomicIncrement::6::162.4726::  // __GNUC__ also covers LLVM/clang
gAtomicIncrement::7::207.7967::  newVal = __sync_add_and_fetch(counter, 1);
gAtomicIncrement::8::151.6047::#elif defined(__SUNPRO_CC)
gAtomicIncrement::9::241.2522::  newVal = atomic_inc_ulong_nv((ulong_t *)counter);
gAtomicIncrement::10::39.8929::#else
gAtomicIncrement::11::197.8225::#  error "gAtomicIncrement is not defined for this compiler/platform"
gAtomicIncrement::12::42.9565::#endif
gAtomicIncrement::13::59.1517::  return newVal;
gAtomicIncrement::14::9.5175::}
PEM_read_bio_ex::1::374.9317::int PEM_read_bio_ex(BIO *bp, char **name_out, char **header,
PEM_read_bio_ex::2::340.9396::                    unsigned char **data, long *len_out, unsigned int flags)
PEM_read_bio_ex::3::32.3969::{
PEM_read_bio_ex::4::207.1659::    EVP_ENCODE_CTX *ctx = NULL;
PEM_read_bio_ex::5::149.1637::    const BIO_METHOD *bmeth;
PEM_read_bio_ex::6::207.2457::    BIO *headerB = NULL, *dataB = NULL;
PEM_read_bio_ex::7::118.8527::    char *name = NULL;
PEM_read_bio_ex::8::209.7819::    int len, taillen, headerlen, ret = 0;
PEM_read_bio_ex::9::153.9475::    BUF_MEM * buf_mem;
PEM_read_bio_ex::10::118.5240::    *len_out = 0;
PEM_read_bio_ex::11::157.7465::    *name_out = *header = NULL;
PEM_read_bio_ex::12::102.3844::    *data = NULL;
PEM_read_bio_ex::13::455.2192::    if ((flags & PEM_FLAG_EAY_COMPATIBLE) && (flags & PEM_FLAG_ONLY_B64)) {
PEM_read_bio_ex::14::235.5971::        /* These two are mutually incompatible; bail out. */
PEM_read_bio_ex::15::499.9738::        PEMerr(PEM_F_PEM_READ_BIO_EX, ERR_R_PASSED_INVALID_ARGUMENT);
PEM_read_bio_ex::16::118.9560::        goto end;
PEM_read_bio_ex::17::49.2160::    }
PEM_read_bio_ex::18::421.8974::    bmeth = (flags & PEM_FLAG_SECURE) ? BIO_s_secmem() : BIO_s_mem();
PEM_read_bio_ex::19::175.7083::    headerB = BIO_new(bmeth);
PEM_read_bio_ex::20::175.0895::    dataB = BIO_new(bmeth);
PEM_read_bio_ex::21::211.1938::    if (headerB == NULL || dataB == NULL) {
PEM_read_bio_ex::22::463.5055::        PEMerr(PEM_F_PEM_READ_BIO_EX, ERR_R_MALLOC_FAILURE);
PEM_read_bio_ex::23::120.2463::        goto end;
PEM_read_bio_ex::24::51.4874::    }
PEM_read_bio_ex::25::235.7405::    if (!get_name(bp, &name, flags))
PEM_read_bio_ex::26::115.9443::        goto end;
PEM_read_bio_ex::27::374.3969::    if (!get_header_and_data(bp, &headerB, &dataB, name, flags))
PEM_read_bio_ex::28::119.6519::        goto end;
PEM_read_bio_ex::30::160.5654::    len = buf_mem->length;
PEM_read_bio_ex::31::205.2047::    /* There was no data in the PEM file */
PEM_read_bio_ex::32::126.3397::    if (len == 0)
PEM_read_bio_ex::33::134.7672::        goto end;
PEM_read_bio_ex::34::221.3616::    ctx = EVP_ENCODE_CTX_new();
PEM_read_bio_ex::35::144.0473::    if (ctx == NULL) {
PEM_read_bio_ex::36::471.0519::        PEMerr(PEM_F_PEM_READ_BIO_EX, ERR_R_MALLOC_FAILURE);
PEM_read_bio_ex::37::127.1263::        goto end;
PEM_read_bio_ex::38::51.8542::    }
PEM_read_bio_ex::39::160.0023::    EVP_DecodeInit(ctx);
PEM_read_bio_ex::40::362.1510::    if (EVP_DecodeUpdate(ctx, (unsigned char*)buf_mem->data, &len,
PEM_read_bio_ex::41::380.7571::                         (unsigned char*)buf_mem->data, len) < 0
PEM_read_bio_ex::42::446.4680::            || EVP_DecodeFinal(ctx, (unsigned char*)&(buf_mem->data[len]),
PEM_read_bio_ex::43::344.7430::                               &taillen) < 0) {
PEM_read_bio_ex::44::481.3151::        PEMerr(PEM_F_PEM_READ_BIO_EX, PEM_R_BAD_BASE64_DECODE);
PEM_read_bio_ex::45::123.2730::        goto end;
PEM_read_bio_ex::46::50.8333::    }
PEM_read_bio_ex::47::121.7638::    len += taillen;
PEM_read_bio_ex::48::152.5186::    buf_mem->length = len;
PEM_read_bio_ex::49::261.5065::    headerlen = BIO_get_mem_data(headerB, NULL);
PEM_read_bio_ex::50::250.0461::    *header = pem_malloc(headerlen + 1, flags);
PEM_read_bio_ex::51::210.5283::    *data = pem_malloc(len, flags);
PEM_read_bio_ex::52::226.5297::    if (*header == NULL || *data == NULL) {
PEM_read_bio_ex::53::222.1470::        pem_free(*header, flags, 0);
PEM_read_bio_ex::54::215.4166::        pem_free(*data, flags, 0);
PEM_read_bio_ex::55::129.1142::        goto end;
PEM_read_bio_ex::56::52.4958::    }
PEM_read_bio_ex::57::154.4692::    BIO_read(headerB, *header, headerlen);
if::1::141.8017::static size_t /* PRIVATE */
if::2::386.0662::png_setup_paeth_row(png_structrp png_ptr, png_uint_32 bpp,
if::3::192.7091::    size_t row_bytes, size_t lmins)
if::4::31.3600::{
if::5::254.4332::   png_bytep rp, dp, pp, cp, lp;
if::6::90.0398::   size_t i;
if::7::114.0090::   size_t sum = 0;
if::8::79.0445::   unsigned int v;
if::9::303.7433::   png_ptr->try_row[0] = PNG_FILTER_VALUE_PAETH;
if::10::430.4148::   for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1,
if::11::315.1607::       pp = png_ptr->prev_row + 1; i < bpp; i++)
if::12::42.0742::   {
if::13::409.8042::      v = *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);
if::14::129.7635::#ifdef PNG_USE_ABS
if::15::211.5534::      sum += 128 - abs((int)v - 128);
if::16::45.8627::#else
if::17::223.3028::      sum += (v < 128) ? v : 256 - v;
if::18::48.8701::#endif
if::19::41.7421::   }
if::20::437.2107::   for (lp = png_ptr->row_buf + 1, cp = png_ptr->prev_row + 1; i < row_bytes;
if::21::99.3601::        i++)
if::22::43.6046::   {
if::23::258.2061::      int a, b, c, pa, pb, pc, p;
if::24::117.6652::      b = *pp++;
if::25::117.3468::      c = *cp++;
if::26::123.2366::      a = *lp++;
if::27::127.6525::      p = b - c;
if::28::130.3403::      pc = a - c;
if::29::131.8871::#ifdef PNG_USE_ABS
if::30::139.4429::      pa = abs(p);
if::31::145.8096::      pb = abs(pc);
if::32::155.6815::      pc = abs(p + pc);
if::33::46.0989::#else
if::34::194.7742::      pa = p < 0 ? -p : p;
if::35::207.1724::      pb = pc < 0 ? -pc : pc;
if::36::26.2944::      pc = (p + pc) < 0 ? -(p + pc) : p + pc;
if::38::381.8994::      p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;
if::39::374.8819::      v = *dp++ = (png_byte)(((int)*rp++ - p) & 0xff);
if::40::128.7750::#ifdef PNG_USE_ABS
if::41::205.3644::      sum += 128 - abs((int)v - 128);
if::42::45.4952::#else
if::43::215.2487::      sum += (v < 128) ? v : 256 - v;
if::44::51.9428::#endif
if::45::294.3772::      if (sum > lmins)  /* We are already worse, don't continue. */
if::46::89.2231::        break;
if::47::40.0389::   }
if::48::77.9333::   return (sum);
if::49::27.6990::}
if::50::107.6504::static void /* PRIVATE */
if::51::368.8547::png_setup_paeth_row_only(png_structrp png_ptr, png_uint_32 bpp,
if::52::112.1037::    size_t row_bytes)
if::53::30.4595::{
if::54::257.0505::   png_bytep rp, dp, pp, cp, lp;
if::55::90.5137::   size_t i;
if::56::307.4871::   png_ptr->try_row[0] = PNG_FILTER_VALUE_PAETH;
if::57::434.6133::   for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1,
if::58::303.7502::       pp = png_ptr->prev_row + 1; i < bpp; i++)
if::59::41.8620::   {
if::60::391.5946::      *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);
if::61::43.1143::   }
if::62::457.4479::   for (lp = png_ptr->row_buf + 1, cp = png_ptr->prev_row + 1; i < row_bytes;
if::63::100.2747::        i++)
if::64::43.4426::   {
if::65::268.2345::      int a, b, c, pa, pb, pc, p;
if::66::118.9059::      b = *pp++;
if::67::115.8123::      c = *cp++;
if::68::120.4008::      a = *lp++;
if::69::129.7753::      p = b - c;
if::70::129.9256::      pc = a - c;
if::71::91.6985::#ifdef PNG_USE_ABS
if::74::161.4778::      pc = abs(p + pc);
if::75::50.5516::#else
if::76::193.4574::      pa = p < 0 ? -p : p;
if::77::198.7421::      pb = pc < 0 ? -pc : pc;
if::78::301.3960::      pc = (p + pc) < 0 ? -(p + pc) : p + pc;
if::79::52.7267::#endif
if::80::347.1739::      p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;
if::81::327.2134::      *dp++ = (png_byte)(((int)*rp++ - p) & 0xff);
if::82::39.2814::   }
if::83::27.4248::}
if::84::125.1805::#endif /* WRITE_FILTER */
if::85::99.5826::void /* PRIVATE */
if::86::350.9615::png_write_find_filter(png_structrp png_ptr, png_row_infop row_info)
if::87::29.5849::{
if::88::199.8271::#ifndef PNG_WRITE_FILTER_SUPPORTED
if::89::422.3335::   png_write_filtered_row(png_ptr, png_ptr->row_buf, row_info->rowbytes+1);
if::90::46.9672::#else
if::91::232.0138::   unsigned int filter_to_do = png_ptr->do_filter;
if::92::146.8305::   png_bytep row_buf;
if::93::144.9098::   png_bytep best_row;
if::94::136.9292::   png_uint_32 bpp;
if::95::90.4854::   size_t mins;
if::96::188.8062::   size_t row_bytes = row_info->rowbytes;
if::97::241.9212::   png_debug(1, "in png_write_find_filter");
if::98::187.7194::   /* Find out how many bytes offset each pixel is */
if::99::238.9715::   bpp = (row_info->pixel_depth + 7) >> 3;
if::100::190.9415::   row_buf = png_ptr->row_buf;
if::101::275.2897::   mins = PNG_SIZE_MAX - 256/* so we can detect potential overflow of the
if::102::286.2616::                               running sum */;
if::103::218.6276::   /* The prediction method we use is to find which method provides the
if::104::199.1356::    * smallest value when summing the absolute values of the distances
if::105::246.9219::    * from zero, using anything >= 128 as negative numbers.  This is known
if::107::243.8613::    * heuristics are the "weighted minimum sum of absolute differences"
if::108::267.9516::    * (experimental and can in theory improve compression), and the "zlib
if::109::230.1736::    * predictive" method (not implemented yet), which does test compressions
if::110::196.7982::    * of lines using different filter methods, and then chooses the
if::111::265.2323::    * (series of) filter(s) that give minimum compressed data size (VERY
if::112::110.6072::    * computationally expensive).
if::113::49.9920::    *
if::114::157.1747::    * GRR 980525:  consider also
if::115::50.2885::    *
if::116::276.4795::    *   (1) minimum sum of absolute differences from running average (i.e.,
if::117::265.4844::    *       keep running sum of non-absolute differences & count of bytes)
if::118::301.3940::    *       [track dispersion, too?  restart average if dispersion too large?]
if::119::49.2895::    *
if::120::247.3641::    *  (1b) minimum sum of absolute differences from sliding average, probably
if::121::245.4526::    *       with window size <= deflate window (usually 32K)
if::122::49.8809::    *
if::123::240.7566::    *   (2) minimum sum of squared differences from zero or running average
if::124::261.2850::    *       (i.e., ~ root-mean-square approach)
if::125::53.0777::    */
if::126::278.7686::   /* We don't need to test the 'no filter' case if this is the only filter
if::127::274.9537::    * that has been chosen, as it doesn't actually do anything to the data.
if::128::54.6267::    */
if::129::186.1474::   best_row = png_ptr->row_buf;
if::130::209.3772::   if (PNG_SIZE_MAX/128 <= row_bytes)
if::131::43.1673::   {
if::132::253.9251::      /* Overflow can occur in the calculation, just select the lowest set
if::133::99.5634::       * filter.
if::134::78.7378::       */
if::135::248.9444::      filter_to_do &= 0U-filter_to_do;
if::136::44.0481::   }
if::137::297.9144::   else if ((filter_to_do & PNG_FILTER_NONE) != 0 &&
if::138::256.1022::         filter_to_do != PNG_FILTER_NONE)
if::139::46.7102::   {
if::140::60.8177::      /* Overflow not possible and multiple filters in the list, including the
if::143::185.5517::      png_bytep rp;
if::144::160.1700::      size_t sum = 0;
if::145::128.6460::      size_t i;
if::146::119.4137::      unsigned int v;
if::147::70.0253::      {
if::148::452.6285::         for (i = 0, rp = row_buf + 1; i < row_bytes; i++, rp++)
if::149::89.1134::         {
if::150::171.3419::            v = *rp;
if::151::143.4624::#ifdef PNG_USE_ABS
if::152::261.7367::            sum += 128 - abs((int)v - 128);
if::153::50.0669::#else
if::154::279.5161::            sum += (v < 128) ? v : 256 - v;
if::155::54.9501::#endif
if::156::89.4193::         }
if::157::68.3092::      }
if::158::112.7570::      mins = sum;
if::159::45.4410::   }
if::160::93.6648::   /* Sub filter */
if::161::241.1210::   if (filter_to_do == PNG_FILTER_SUB)
if::162::211.4995::   /* It's the only filter so no testing is needed */
if::163::45.1721::   {
if::164::338.9240::      png_setup_sub_row_only(png_ptr, bpp, row_bytes);
if::165::219.2337::      best_row = png_ptr->try_row;
if::166::43.1826::   }
if::167::291.6676::   else if ((filter_to_do & PNG_FILTER_SUB) != 0)
if::168::45.0303::   {
if::169::121.2399::      size_t sum;
if::170::162.0239::      size_t lmins = mins;
if::171::396.1446::      sum = png_setup_sub_row(png_ptr, bpp, row_bytes, lmins);
if::172::140.3813::      if (sum < mins)
if::173::68.3267::      {
if::174::144.4989::         mins = sum;
if::175::263.1912::         best_row = png_ptr->try_row;
if::176::270.4836::         if (png_ptr->tst_row != NULL)
if::177::92.2680::         {
if::178::322.3738::            png_ptr->try_row = png_ptr->tst_row;
if::180::93.8292::         }
if::181::71.2558::      }
if::182::47.3912::   }
if::183::107.6353::   /* Up filter */
if::184::241.9824::   if (filter_to_do == PNG_FILTER_UP)
if::185::47.6294::   {
if::186::307.0496::      png_setup_up_row_only(png_ptr, row_bytes);
if::187::229.4449::      best_row = png_ptr->try_row;
if::188::44.1913::   }
if::189::288.4450::   else if ((filter_to_do & PNG_FILTER_UP) != 0)
if::190::45.6118::   {
if::191::118.9750::      size_t sum;
if::192::158.5903::      size_t lmins = mins;
if::193::341.6058::      sum = png_setup_up_row(png_ptr, row_bytes, lmins);
if::194::138.3345::      if (sum < mins)
if::195::69.0005::      {
if::196::136.3493::         mins = sum;
if::197::250.8008::         best_row = png_ptr->try_row;
if::198::261.8310::         if (png_ptr->tst_row != NULL)
if::199::90.0001::         {
if::200::346.1705::            png_ptr->try_row = png_ptr->tst_row;
if::201::275.1821::            png_ptr->tst_row = best_row;
if::202::88.3095::         }
if::203::64.8579::      }
if::204::44.3596::   }
if::205::95.4850::   /* Avg filter */
if::206::236.6455::   if (filter_to_do == PNG_FILTER_AVG)
if::207::44.7301::   {
if::208::360.0412::      png_setup_avg_row_only(png_ptr, bpp, row_bytes);
if::209::229.6043::      best_row = png_ptr->try_row;
if::210::44.2809::   }
if::211::309.1874::   else if ((filter_to_do & PNG_FILTER_AVG) != 0)
if::212::46.2931::   {
if::213::122.8670::      size_t sum;
if::214::162.1832::      size_t lmins = mins;
if::215::415.8391::      sum= png_setup_avg_row(png_ptr, bpp, row_bytes, lmins);
if::216::20.4970::      if (sum < mins)
if::219::277.5109::         best_row = png_ptr->try_row;
if::220::276.3470::         if (png_ptr->tst_row != NULL)
if::221::91.8624::         {
if::222::358.6461::            png_ptr->try_row = png_ptr->tst_row;
if::223::276.9375::            png_ptr->tst_row = best_row;
if::224::86.3397::         }
if::225::66.5118::      }
if::226::44.1071::   }
if::227::108.2732::   /* Paeth filter */
if::228::238.1392::   if (filter_to_do == PNG_FILTER_PAETH)
if::229::44.8892::   {
if::230::359.8401::      png_setup_paeth_row_only(png_ptr, bpp, row_bytes);
if::231::223.6918::      best_row = png_ptr->try_row;
if::232::44.0284::   }
if::233::307.9991::   else if ((filter_to_do & PNG_FILTER_PAETH) != 0)
if::234::45.9780::   {
if::235::117.1061::      size_t sum;
if::236::157.0184::      size_t lmins = mins;
if::237::392.0266::      sum = png_setup_paeth_row(png_ptr, bpp, row_bytes, lmins);
if::238::132.7129::      if (sum < mins)
if::239::65.5911::      {
if::240::248.8599::         best_row = png_ptr->try_row;
if::241::258.0202::         if (png_ptr->tst_row != NULL)
if::242::89.3701::         {
if::243::363.2105::            png_ptr->try_row = png_ptr->tst_row;
if::244::286.9507::            png_ptr->tst_row = best_row;
if::245::89.8966::         }
if::246::66.5890::      }
if::247::45.0967::   }
if::248::263.5435::   /* Do the actual writing of the filtered row data from the chosen filter. */
if::249::396.0160::   png_write_filtered_row(png_ptr, best_row, row_info->rowbytes+1);
if::250::144.9433::#endif /* WRITE_FILTER */
if::251::29.3497::}
if::254::384.3705::png_write_filtered_row(png_structrp png_ptr, png_bytep filtered_row,
if::255::213.9040::    size_t full_row_length/*includes filter byte*/)
if::256::30.0820::{
if::257::262.5029::   png_debug(1, "in png_write_filtered_row");
if::258::271.0222::   png_debug1(2, "filter = %d", filtered_row[0]);
if::259::387.4674::   png_compress_IDAT(png_ptr, filtered_row, full_row_length, Z_NO_FLUSH);
if::260::186.7257::#ifdef PNG_WRITE_FILTER_SUPPORTED
if::261::130.8672::   /* Swap the current and previous rows */
if::262::180.3876::   if (png_ptr->prev_row != NULL)
if::263::42.1714::   {
if::264::158.5455::      png_bytep tptr;
if::265::200.7963::      tptr = png_ptr->prev_row;
if::266::271.1059::      png_ptr->prev_row = png_ptr->row_buf;
if::267::199.1034::      png_ptr->row_buf = tptr;
if::268::41.0312::   }
if::269::124.8179::#endif /* WRITE_FILTER */
if::270::217.3577::   /* Finish row - updates counters and flushes zlib if last row */
if::271::194.9371::   png_write_finish_row(png_ptr);
if::272::185.8428::#ifdef PNG_WRITE_FLUSH_SUPPORTED
if::273::136.8925::   png_ptr->flush_rows++;
if::274::173.9799::   if (png_ptr->flush_dist > 0 &&
if::275::274.2269::       png_ptr->flush_rows >= png_ptr->flush_dist)
if::276::39.2077::   {
if::277::183.1174::      png_write_flush(png_ptr);
if::278::38.5303::   }
if::279::122.6939::#endif /* WRITE_FLUSH */
if::280::25.2002::}
if::281::70.3180::#endif /* WRITE */
ossl_punycode_decode::1::401.7256::int ossl_punycode_decode(const char *pEncoded, const size_t enc_len,
ossl_punycode_decode::2::401.6869::                         unsigned int *pDecoded, unsigned int *pout_length)
ossl_punycode_decode::3::34.8729::{
ossl_punycode_decode::4::148.3354::    unsigned int n = initial_n;
ossl_punycode_decode::5::127.5262::    unsigned int i = 0;
ossl_punycode_decode::6::165.5712::    unsigned int bias = initial_bias;
ossl_punycode_decode::7::234.5176::    size_t processed_in = 0, written_out = 0;
ossl_punycode_decode::8::192.6345::    unsigned int max_out = *pout_length;
ossl_punycode_decode::9::150.4302::    unsigned int basic_count = 0;
ossl_punycode_decode::10::99.2972::    unsigned int loop;
ossl_punycode_decode::11::261.7026::    for (loop = 0; loop < enc_len; loop++) {
ossl_punycode_decode::12::237.8818::        if (pEncoded[loop] == delimiter)
ossl_punycode_decode::13::181.1295::            basic_count = loop;
ossl_punycode_decode::14::54.6478::    }
ossl_punycode_decode::15::162.3072::    if (basic_count > 0) {
ossl_punycode_decode::16::200.6701::        if (basic_count > max_out)
ossl_punycode_decode::17::146.0298::            return 0;
ossl_punycode_decode::18::294.9049::        for (loop = 0; loop < basic_count; loop++) {
ossl_punycode_decode::19::316.7013::            if (is_basic(pEncoded[loop]) == 0)
ossl_punycode_decode::20::176.4775::                return 0;
ossl_punycode_decode::21::287.1507::            pDecoded[loop] = pEncoded[loop];
ossl_punycode_decode::22::162.2309::            written_out++;
ossl_punycode_decode::23::85.4142::        }
ossl_punycode_decode::24::211.0710::        processed_in = basic_count + 1;
ossl_punycode_decode::25::52.4890::    }
ossl_punycode_decode::26::276.7134::    for (loop = processed_in; loop < enc_len;) {
ossl_punycode_decode::27::179.2748::        unsigned int oldi = i;
ossl_punycode_decode::28::162.7022::        unsigned int w = 1;
ossl_punycode_decode::29::158.3165::        unsigned int k, t;
ossl_punycode_decode::30::120.8623::        int digit;
ossl_punycode_decode::31::239.5884::        for (k = base;; k += base) {
ossl_punycode_decode::32::56.9466::            if (loop >= enc_len)
ossl_punycode_decode::34::357.5094::            digit = digit_decoded(pEncoded[loop]);
ossl_punycode_decode::35::150.9659::            loop++;
ossl_punycode_decode::36::199.1310::            if (digit < 0)
ossl_punycode_decode::37::189.6077::                return 0;
ossl_punycode_decode::38::362.6678::            if ((unsigned int)digit > (maxint - i) / w)
ossl_punycode_decode::39::186.4426::                return 0;
ossl_punycode_decode::40::216.5739::            i = i + digit * w;
ossl_punycode_decode::41::491.3616::            t = (k <= bias) ? tmin : (k >= bias + tmax) ? tmax : k - bias;
ossl_punycode_decode::42::252.8064::            if ((unsigned int)digit < t)
ossl_punycode_decode::43::168.2211::                break;
ossl_punycode_decode::44::272.5746::            if (w > maxint / (base - t))
ossl_punycode_decode::45::186.2569::                return 0;
ossl_punycode_decode::46::222.2792::            w = w * (base - t);
ossl_punycode_decode::47::83.9773::        }
ossl_punycode_decode::48::395.1162::        bias = adapt(i - oldi, written_out + 1, (oldi == 0));
ossl_punycode_decode::49::311.0251::        if (i / (written_out + 1) > maxint - n)
ossl_punycode_decode::50::155.9214::            return 0;
ossl_punycode_decode::51::249.9522::        n = n + i / (written_out + 1);
ossl_punycode_decode::52::221.4381::        i %= (written_out + 1);
ossl_punycode_decode::53::223.5564::        if (written_out >= max_out)
ossl_punycode_decode::54::155.6822::            return 0;
ossl_punycode_decode::55::336.6183::        memmove(pDecoded + i + 1, pDecoded + i,
ossl_punycode_decode::56::353.7008::                (written_out - i) * sizeof *pDecoded);
ossl_punycode_decode::57::214.6373::        pDecoded[i] = n;
ossl_punycode_decode::58::21.1123::        i++;
ossl_punycode_decode::61::157.5805::    *pout_length = written_out;
ossl_punycode_decode::62::76.0708::    return 1;
ossl_punycode_decode::63::11.8953::}
ossl_a2ulabel::1::367.7609::int ossl_a2ulabel(const char *in, char *out, size_t *outlen)
ossl_a2ulabel::2::36.1336::{
ossl_a2ulabel::3::84.9563::    /*-
ossl_a2ulabel::4::254.1706::     * Domain name has some parts consisting of ASCII chars joined with dot.
ossl_a2ulabel::5::307.8057::     * If a part is shorter than 5 chars, it becomes U-label as is.
ossl_a2ulabel::6::336.7014::     * If it does not start with xn--,    it becomes U-label as is.
ossl_a2ulabel::7::162.7135::     * Otherwise we try to decode it.
ossl_a2ulabel::8::64.5291::     */
ossl_a2ulabel::9::134.0770::    char *outptr = out;
ossl_a2ulabel::10::144.8441::    const char *inptr = in;
ossl_a2ulabel::11::122.5506::    size_t size = 0;
ossl_a2ulabel::12::108.0701::    int result = 1;
ossl_a2ulabel::13::341.1451::    unsigned int buf[LABEL_BUF_SIZE];      /* It's a hostname */
ossl_a2ulabel::14::125.8396::    if (out == NULL)
ossl_a2ulabel::15::120.5764::        result = 0;
ossl_a2ulabel::16::106.8427::    while (1) {
ossl_a2ulabel::17::284.4910::        char *tmpptr = strchr(inptr, '.');
ossl_a2ulabel::18::464.9195::        size_t delta = (tmpptr) ? (size_t)(tmpptr - inptr) : strlen(inptr);
ossl_a2ulabel::19::336.9897::        if (strncmp(inptr, "xn--", 4) != 0) {
ossl_a2ulabel::20::188.4230::            size += delta + 1;
ossl_a2ulabel::21::239.1901::            if (size >= *outlen - 1)
ossl_a2ulabel::22::190.8987::                result = 0;
ossl_a2ulabel::23::199.6860::            if (result > 0) {
ossl_a2ulabel::24::357.0750::                memcpy(outptr, inptr, delta + 1);
ossl_a2ulabel::25::250.1722::                outptr += delta + 1;
ossl_a2ulabel::26::114.5191::            }
ossl_a2ulabel::27::112.4771::        } else {
ossl_a2ulabel::28::300.4753::            unsigned int bufsize = LABEL_BUF_SIZE;
ossl_a2ulabel::29::124.5387::            unsigned int i;
ossl_a2ulabel::30::663.0231::            if (ossl_punycode_decode(inptr + 4, delta - 4, buf, &bufsize) <= 0)
ossl_a2ulabel::31::212.4068::                return -1;
ossl_a2ulabel::32::365.7754::            for (i = 0; i < bufsize; i++) {
ossl_a2ulabel::33::238.8233::                unsigned char seed[6];
ossl_a2ulabel::34::462.4949::                size_t utfsize = codepoint2utf8(seed, buf[i]);
ossl_a2ulabel::35::249.3646::                if (utfsize == 0)
ossl_a2ulabel::36::247.9112::                    return -1;
ossl_a2ulabel::37::240.8573::                size += utfsize;
ossl_a2ulabel::38::300.7159::                if (size >= *outlen - 1)
ossl_a2ulabel::39::237.1097::                    result = 0;
ossl_a2ulabel::40::241.6279::                if (result > 0) {
ossl_a2ulabel::41::398.0652::                    memcpy(outptr, seed, utfsize);
ossl_a2ulabel::42::300.0781::                    outptr += utfsize;
ossl_a2ulabel::43::154.2138::                }
ossl_a2ulabel::44::124.1021::            }
ossl_a2ulabel::45::273.6606::            if (tmpptr != NULL) {
ossl_a2ulabel::46::268.8951::                *outptr = '.';
ossl_a2ulabel::47::219.3589::                outptr++;
ossl_a2ulabel::48::188.2559::                size++;
ossl_a2ulabel::49::315.4725::                if (size >= *outlen - 1)
ossl_a2ulabel::50::247.7120::                    result = 0;
ossl_a2ulabel::51::6.9462::            }
ossl_a2ulabel::53::196.0889::        if (tmpptr == NULL)
ossl_a2ulabel::54::143.8799::            break;
ossl_a2ulabel::55::211.8651::        inptr = tmpptr + 1;
ossl_a2ulabel::56::51.1039::    }
ossl_a2ulabel::57::78.8976::    return result;
ossl_a2ulabel::58::12.2945::}
ossl_punycode_decode::1::401.7256::int ossl_punycode_decode(const char *pEncoded, const size_t enc_len,
ossl_punycode_decode::2::401.6869::                         unsigned int *pDecoded, unsigned int *pout_length)
ossl_punycode_decode::3::34.8729::{
ossl_punycode_decode::4::148.3354::    unsigned int n = initial_n;
ossl_punycode_decode::5::127.5262::    unsigned int i = 0;
ossl_punycode_decode::6::165.5712::    unsigned int bias = initial_bias;
ossl_punycode_decode::7::234.5176::    size_t processed_in = 0, written_out = 0;
ossl_punycode_decode::8::192.6345::    unsigned int max_out = *pout_length;
ossl_punycode_decode::9::150.4302::    unsigned int basic_count = 0;
ossl_punycode_decode::10::99.2972::    unsigned int loop;
ossl_punycode_decode::11::261.7026::    for (loop = 0; loop < enc_len; loop++) {
ossl_punycode_decode::12::237.8818::        if (pEncoded[loop] == delimiter)
ossl_punycode_decode::13::181.1295::            basic_count = loop;
ossl_punycode_decode::14::54.6478::    }
ossl_punycode_decode::15::162.3072::    if (basic_count > 0) {
ossl_punycode_decode::16::200.6701::        if (basic_count > max_out)
ossl_punycode_decode::17::146.0298::            return 0;
ossl_punycode_decode::18::294.9049::        for (loop = 0; loop < basic_count; loop++) {
ossl_punycode_decode::19::316.7013::            if (is_basic(pEncoded[loop]) == 0)
ossl_punycode_decode::20::176.4775::                return 0;
ossl_punycode_decode::21::287.1507::            pDecoded[loop] = pEncoded[loop];
ossl_punycode_decode::22::162.2309::            written_out++;
ossl_punycode_decode::23::85.4142::        }
ossl_punycode_decode::24::211.0710::        processed_in = basic_count + 1;
ossl_punycode_decode::25::52.4890::    }
ossl_punycode_decode::26::276.7134::    for (loop = processed_in; loop < enc_len;) {
ossl_punycode_decode::27::179.2748::        unsigned int oldi = i;
ossl_punycode_decode::28::162.7022::        unsigned int w = 1;
ossl_punycode_decode::29::158.3165::        unsigned int k, t;
ossl_punycode_decode::30::120.8623::        int digit;
ossl_punycode_decode::31::239.5884::        for (k = base;; k += base) {
ossl_punycode_decode::32::56.9466::            if (loop >= enc_len)
ossl_punycode_decode::34::360.1607::            digit = digit_decoded(pEncoded[loop]);
ossl_punycode_decode::35::152.3111::            loop++;
ossl_punycode_decode::36::200.7057::            if (digit < 0)
ossl_punycode_decode::37::190.6909::                return 0;
ossl_punycode_decode::38::365.4527::            if ((unsigned int)digit > (maxint - i) / w)
ossl_punycode_decode::39::187.7483::                return 0;
ossl_punycode_decode::40::218.4126::            i = i + digit * w;
ossl_punycode_decode::41::495.3905::            t = (k <= bias) ? tmin : (k >= bias + tmax) ? tmax : k - bias;
ossl_punycode_decode::42::254.4939::            if ((unsigned int)digit < t)
ossl_punycode_decode::43::168.8960::                break;
ossl_punycode_decode::44::275.0160::            if (w > maxint / (base - t))
ossl_punycode_decode::45::187.3279::                return 0;
ossl_punycode_decode::46::223.4830::            w = w * (base - t);
ossl_punycode_decode::47::84.3479::        }
ossl_punycode_decode::48::398.2041::        bias = adapt(i - oldi, written_out + 1, (oldi == 0));
ossl_punycode_decode::49::313.1541::        if (i / (written_out + 1) > maxint - n)
ossl_punycode_decode::50::157.5886::            return 0;
ossl_punycode_decode::51::252.0506::        n = n + i / (written_out + 1);
ossl_punycode_decode::52::223.3393::        i %= (written_out + 1);
ossl_punycode_decode::53::217.5815::        if (written_out > max_out)
ossl_punycode_decode::54::158.2372::            return 0;
ossl_punycode_decode::55::342.7394::        memmove(pDecoded + i + 1, pDecoded + i,
ossl_punycode_decode::56::119.2000::          Expand Down
ossl_punycode_decode::57::366.4450::                (written_out - i) * sizeof *pDecoded);
ossl_punycode_decode::58::62.8325::        pDecoded[i] = n;
ossl_punycode_decode::60::126.2165::        written_out++;
ossl_punycode_decode::61::54.1535::    }
ossl_punycode_decode::62::165.3800::    *pout_length = written_out;
ossl_punycode_decode::63::79.7792::    return 1;
ossl_punycode_decode::64::12.0995::}
pushResources::1::260.9009::void Gfx::drawForm(Object *strRef, Dict *resDict,
pushResources::2::153.8845::		   double *matrix, double *bbox,
pushResources::3::168.0988::		   GBool transpGroup, GBool softMask,
pushResources::4::144.2271::		   GfxColorSpace *blendingColorSpace,
pushResources::5::128.2899::		   GBool isolated, GBool knockout,
pushResources::6::149.5393::		   GBool alpha, Function *transferFunc,
pushResources::7::129.1820::		   GfxColor *backdropColor) {
pushResources::8::91.6720::  Parser *oldParser;
pushResources::9::113.4167::  GfxState *savedState;
pushResources::10::102.8529::  double oldBaseMatrix[6];
pushResources::11::56.8246::  int i;
pushResources::12::90.9143::  // push new resources on stack
pushResources::13::102.6920::  pushResources(resDict);
pushResources::14::81.4993::  // save current graphics state
pushResources::15::102.1912::  savedState = saveStateStack();
pushResources::16::112.2883::  // kill any pre-existing path
pushResources::17::84.1385::  state->clearPath();
pushResources::18::71.3545::  // save current parser
pushResources::19::79.5105::  oldParser = parser;
pushResources::20::77.8617::  // set form transformation matrix
pushResources::21::259.8251::  state->concatCTM(matrix[0], matrix[1], matrix[2],
pushResources::22::188.1156::		   matrix[3], matrix[4], matrix[5]);
pushResources::23::269.6122::  out->updateCTM(state, matrix[0], matrix[1], matrix[2],
pushResources::24::174.2317::		 matrix[3], matrix[4], matrix[5]);
pushResources::25::96.2428::  // set form bounding box
pushResources::26::203.6417::  state->moveTo(bbox[0], bbox[1]);
pushResources::27::197.0789::  state->lineTo(bbox[2], bbox[1]);
pushResources::28::203.4691::  state->lineTo(bbox[2], bbox[3]);
pushResources::29::204.3604::  state->lineTo(bbox[0], bbox[3]);
pushResources::30::86.5165::  state->closePath();
pushResources::31::77.4286::  state->clip();
pushResources::32::99.4373::  out->clip(state);
pushResources::33::86.9878::  state->clearPath();
pushResources::34::140.1317::  if (softMask || transpGroup) {
pushResources::35::246.5449::    if (state->getBlendMode() != gfxBlendNormal) {
pushResources::36::211.8705::      state->setBlendMode(gfxBlendNormal);
pushResources::37::166.6667::      out->updateBlendMode(state);
pushResources::38::48.5593::    }
pushResources::39::205.7697::    if (state->getFillOpacity() != 1) {
pushResources::40::172.2779::      state->setFillOpacity(1);
pushResources::41::171.2658::      out->updateFillOpacity(state);
pushResources::42::12.1143::    }
pushResources::45::201.6277::      out->updateStrokeOpacity(state);
pushResources::46::51.6323::    }
pushResources::47::150.2791::    out->clearSoftMask(state);
pushResources::48::244.2934::    out->beginTransparencyGroup(state, bbox, blendingColorSpace,
pushResources::49::122.8508::				isolated, knockout, softMask);
pushResources::50::35.1519::  }
pushResources::51::85.4793::  // set new base matrix
pushResources::52::201.0426::  for (i = 0; i < 6; ++i) {
pushResources::53::177.4297::    oldBaseMatrix[i] = baseMatrix[i];
pushResources::54::218.2702::    baseMatrix[i] = state->getCTM()[i];
pushResources::55::34.4352::  }
pushResources::56::72.0592::  // draw the form
pushResources::57::120.3332::  display(strRef, gFalse);
pushResources::58::136.7688::  if (softMask || transpGroup) {
pushResources::59::141.6912::    out->endTransparencyGroup(state);
pushResources::60::35.3776::  }
pushResources::61::75.2765::  // restore base matrix
pushResources::62::193.8038::  for (i = 0; i < 6; ++i) {
pushResources::63::172.5117::    baseMatrix[i] = oldBaseMatrix[i];
pushResources::64::34.8968::  }
pushResources::65::63.7134::  // restore parser
pushResources::66::84.2915::  parser = oldParser;
pushResources::67::74.2357::  // restore graphics state
pushResources::68::118.8364::  restoreStateStack(savedState);
pushResources::69::69.5756::  // pop resource stack
pushResources::70::64.6739::  popResources();
pushResources::71::93.8542::  if (softMask) {
pushResources::72::276.1801::    out->setSoftMask(state, bbox, alpha, transferFunc, backdropColor);
pushResources::73::121.6767::  } else if (transpGroup) {
pushResources::74::177.8509::    out->paintTransparencyGroup(state, bbox);
pushResources::75::30.3067::  }
pushResources::76::43.3291::  return;
pushResources::77::9.2189::}
if::1::257.2480::GString *XFAFormField::getFieldValue(const char *valueChildType) {
if::2::269.7348::  ZxElement *valueElem, *datasets, *data, *elem;
if::3::74.0246::  char *p;
if::4::141.0571::  // check the <value> element within the field
if::5::229.3156::  if ((valueElem = xml->findFirstChildElement("value")) &&
if::6::265.3960::      (elem = valueElem->findFirstChildElement(valueChildType))) {
if::7::160.6466::    if (elem->getFirstChild() &&
if::8::179.3040::	elem->getFirstChild()->isCharData() &&
if::9::323.0226::	((ZxCharData *)elem->getFirstChild())->getData()->getLength() > 0) {
if::10::277.5869::      return ((ZxCharData *)elem->getFirstChild())->getData();
if::11::44.7800::    }
if::12::33.3002::  }
if::13::122.4980::  // check the <datasets> packet
if::14::174.1894::  if (!xfaForm->xml->getRoot() ||
if::15::119.3113::      !(datasets =
if::16::314.5832::	  xfaForm->xml->getRoot()->findFirstChildElement("xfa:datasets")) ||
if::17::273.9935::      !(data = datasets->findFirstChildElement("xfa:data"))) {
if::18::78.3935::    return NULL;
if::19::32.9604::  }
if::20::114.4073::  p = name->getCString();
if::21::206.1960::  if (!strncmp(p, "form.",  5)) {
if::22::82.2149::    p += 5;
if::23::56.1259::  } else {
if::24::79.7645::    return NULL;
if::25::32.6236::  }
if::26::151.1420::  elem = findFieldData(data, p);
if::27::83.7877::  if (elem &&
if::28::153.9570::      elem->getFirstChild() &&
if::29::217.8362::      elem->getFirstChild()->isCharData() &&
if::30::367.6307::      ((ZxCharData *)elem->getFirstChild())->getData()->getLength() > 0) {
if::31::273.0375::    return ((ZxCharData *)elem->getFirstChild())->getData();
if::32::33.6797::  }
if::33::66.0411::  return NULL;
if::34::28.7707::}
if::35::315.2583::ZxElement *XFAFormField::findFieldData(ZxElement *elem, char *partName) {
if::36::98.0976::  ZxNode *node;
if::37::94.2596::  GString *nodeName;
if::38::142.7411::  int curIdx, idx, n;
if::39::6.1010::  curIdx = 0;
if::41::148.4810::    if (node->isElement()) {
if::42::255.1115::      nodeName = ((ZxElement *)node)->getType();
if::43::160.4823::      n = nodeName->getLength();
if::44::310.8986::      if (!strncmp(partName, nodeName->getCString(), n)) { 
if::45::148.8791::	if (partName[n] == '[') {
if::46::182.0113::	  idx = atoi(partName + n + 1);
if::47::136.9919::	  if (idx == curIdx) {
if::48::332.3755::	    for (++n; partName[n] && partName[n-1] != ']'; ++n) ;
if::49::60.0448::	  } else {
if::50::95.9477::	    ++curIdx;
if::51::64.3158::	    continue;
if::52::33.5001::	  }
if::53::28.2423::	}
if::54::117.3219::	if (!partName[n]) {
if::55::117.7127::	  return (ZxElement *)node;
if::56::175.9242::	} else if (partName[n] == '.') {
if::57::217.9462::	  return findFieldData((ZxElement *)node, partName + n + 1);
if::58::27.7449::	}
if::59::59.7926::      }
if::60::45.2935::    }
if::61::31.9532::  }
if::62::58.5434::  return NULL;
if::63::10.5657::}
get_recurse_data_length::1::446.9714::static int get_recurse_data_length(compiler_common *common, PCRE2_SPTR cc, PCRE2_SPTR ccend,
get_recurse_data_length::2::306.0677::  BOOL *needs_control_head, BOOL *has_quit, BOOL *has_accept)
get_recurse_data_length::3::27.7547::{
get_recurse_data_length::4::76.1209::int length = 1;
get_recurse_data_length::5::52.3774::int size;
get_recurse_data_length::6::111.2081::PCRE2_SPTR alternative;
get_recurse_data_length::7::121.5547::BOOL quit_found = FALSE;
get_recurse_data_length::8::113.0310::BOOL accept_found = FALSE;
get_recurse_data_length::9::123.1979::BOOL setsom_found = FALSE;
get_recurse_data_length::10::120.7552::BOOL setmark_found = FALSE;
get_recurse_data_length::11::134.1845::BOOL capture_last_found = FALSE;
get_recurse_data_length::12::130.1231::BOOL control_head_found = FALSE;
get_recurse_data_length::13::301.6666::#if defined DEBUG_FORCE_CONTROL_HEAD && DEBUG_FORCE_CONTROL_HEAD
get_recurse_data_length::14::215.1933::SLJIT_ASSERT(common->control_head_ptr != 0);
get_recurse_data_length::15::107.8575::control_head_found = TRUE;
get_recurse_data_length::16::47.3378::#endif
get_recurse_data_length::17::159.4720::/* Calculate the sum of the private machine words. */
get_recurse_data_length::18::98.8792::while (cc < ccend)
get_recurse_data_length::19::34.3499::  {
get_recurse_data_length::20::70.0039::  size = 0;
get_recurse_data_length::21::77.2908::  switch(*cc)
get_recurse_data_length::22::48.5284::    {
get_recurse_data_length::23::129.3685::    case OP_SET_SOM:
get_recurse_data_length::24::234.2774::    SLJIT_ASSERT(common->has_set_som);
get_recurse_data_length::25::127.6093::    setsom_found = TRUE;
get_recurse_data_length::26::90.8163::    cc += 1;
get_recurse_data_length::27::63.8930::    break;
get_recurse_data_length::28::117.6322::    case OP_RECURSE:
get_recurse_data_length::29::167.0471::    if (common->has_set_som)
get_recurse_data_length::30::142.6211::      setsom_found = TRUE;
get_recurse_data_length::31::163.4254::    if (common->mark_ptr != 0)
get_recurse_data_length::32::139.8432::      setmark_found = TRUE;
get_recurse_data_length::33::203.0557::    if (common->capture_last_ptr != 0)
get_recurse_data_length::34::156.5404::      capture_last_found = TRUE;
get_recurse_data_length::35::144.7870::    cc += 1 + LINK_SIZE;
get_recurse_data_length::36::66.1482::    break;
get_recurse_data_length::37::109.3302::    case OP_KET:
get_recurse_data_length::38::213.1098::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::39::64.1306::      {
get_recurse_data_length::40::82.3778::      length++;
get_recurse_data_length::41::311.0850::      SLJIT_ASSERT(PRIVATE_DATA(cc + 1) != 0);
get_recurse_data_length::42::216.0651::      cc += PRIVATE_DATA(cc + 1);
get_recurse_data_length::43::67.5542::      }
get_recurse_data_length::44::71.3766::    cc += 1 + LINK_SIZE;
get_recurse_data_length::49::165.8210::    case OP_ASSERTBACK_NOT:
get_recurse_data_length::50::148.7544::    case OP_ASSERT_NA:
get_recurse_data_length::51::158.0073::    case OP_ASSERTBACK_NA:
get_recurse_data_length::52::118.7556::    case OP_ONCE:
get_recurse_data_length::53::151.0361::    case OP_SCRIPT_RUN:
get_recurse_data_length::54::129.8112::    case OP_BRAPOS:
get_recurse_data_length::55::112.1979::    case OP_SBRA:
get_recurse_data_length::56::141.0287::    case OP_SBRAPOS:
get_recurse_data_length::57::114.2283::    case OP_SCOND:
get_recurse_data_length::58::65.3427::    length++;
get_recurse_data_length::59::272.1346::    SLJIT_ASSERT(PRIVATE_DATA(cc) != 0);
get_recurse_data_length::60::142.9755::    cc += 1 + LINK_SIZE;
get_recurse_data_length::61::65.1583::    break;
get_recurse_data_length::62::108.6198::    case OP_CBRA:
get_recurse_data_length::63::117.8242::    case OP_SCBRA:
get_recurse_data_length::64::92.2329::    length += 2;
get_recurse_data_length::65::203.1680::    if (common->capture_last_ptr != 0)
get_recurse_data_length::66::149.3802::      capture_last_found = TRUE;
get_recurse_data_length::67::358.0081::    if (common->optimized_cbracket[GET2(cc, 1 + LINK_SIZE)] == 0)
get_recurse_data_length::68::80.5226::      length++;
get_recurse_data_length::69::216.9629::    cc += 1 + LINK_SIZE + IMM2_SIZE;
get_recurse_data_length::70::66.4627::    break;
get_recurse_data_length::71::135.4191::    case OP_CBRAPOS:
get_recurse_data_length::72::134.7649::    case OP_SCBRAPOS:
get_recurse_data_length::73::112.2182::    length += 2 + 2;
get_recurse_data_length::74::199.0778::    if (common->capture_last_ptr != 0)
get_recurse_data_length::75::152.0633::      capture_last_found = TRUE;
get_recurse_data_length::76::213.0404::    cc += 1 + LINK_SIZE + IMM2_SIZE;
get_recurse_data_length::77::64.8247::    break;
get_recurse_data_length::78::108.5730::    case OP_COND:
get_recurse_data_length::79::162.7801::    /* Might be a hidden SCOND. */
get_recurse_data_length::80::179.8485::    alternative = cc + GET(cc, 1);
get_recurse_data_length::81::333.3539::    if (*alternative == OP_KETRMAX || *alternative == OP_KETRMIN)
get_recurse_data_length::82::84.6246::      length++;
get_recurse_data_length::83::148.3760::    cc += 1 + LINK_SIZE;
get_recurse_data_length::84::68.6978::    break;
get_recurse_data_length::85::199.6913::    CASE_ITERATOR_PRIVATE_DATA_1
get_recurse_data_length::86::219.0806::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::87::84.6493::      length++;
get_recurse_data_length::88::96.2928::    cc += 2;
get_recurse_data_length::89::124.9559::#ifdef SUPPORT_UNICODE
get_recurse_data_length::90::6.0652::    if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);
get_recurse_data_length::92::69.7004::    break;
get_recurse_data_length::93::219.5361::    CASE_ITERATOR_PRIVATE_DATA_2A
get_recurse_data_length::94::217.8478::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::95::108.8233::      length += 2;
get_recurse_data_length::96::95.0103::    cc += 2;
get_recurse_data_length::97::117.6069::#ifdef SUPPORT_UNICODE
get_recurse_data_length::98::465.4160::    if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);
get_recurse_data_length::99::49.6086::#endif
get_recurse_data_length::100::63.4690::    break;
get_recurse_data_length::101::196.7574::    CASE_ITERATOR_PRIVATE_DATA_2B
get_recurse_data_length::102::201.6857::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::103::100.1674::      length += 2;
get_recurse_data_length::104::152.9546::    cc += 2 + IMM2_SIZE;
get_recurse_data_length::105::115.0650::#ifdef SUPPORT_UNICODE
get_recurse_data_length::106::453.8185::    if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);
get_recurse_data_length::107::50.4269::#endif
get_recurse_data_length::108::64.4697::    break;
get_recurse_data_length::109::212.6539::    CASE_ITERATOR_TYPE_PRIVATE_DATA_1
get_recurse_data_length::110::206.1211::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::111::81.9719::      length++;
get_recurse_data_length::112::90.3737::    cc += 1;
get_recurse_data_length::113::65.5010::    break;
get_recurse_data_length::114::219.5768::    CASE_ITERATOR_TYPE_PRIVATE_DATA_2A
get_recurse_data_length::115::201.3863::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::116::103.8460::      length += 2;
get_recurse_data_length::117::90.3848::    cc += 1;
get_recurse_data_length::118::64.6370::    break;
get_recurse_data_length::119::221.5187::    CASE_ITERATOR_TYPE_PRIVATE_DATA_2B
get_recurse_data_length::120::207.9669::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::121::106.4392::      length += 2;
get_recurse_data_length::122::162.6028::    cc += 1 + IMM2_SIZE;
get_recurse_data_length::123::66.8172::    break;
get_recurse_data_length::124::98.7063::    case OP_CLASS:
get_recurse_data_length::125::109.3449::    case OP_NCLASS:
get_recurse_data_length::126::315.8128::#if defined SUPPORT_UNICODE || PCRE2_CODE_UNIT_WIDTH != 8
get_recurse_data_length::127::109.0241::    case OP_XCLASS:
get_recurse_data_length::128::495.8913::    size = (*cc == OP_XCLASS) ? GET(cc, 1) : 1 + 32 / (int)sizeof(PCRE2_UCHAR);
get_recurse_data_length::129::42.3837::#else
get_recurse_data_length::132::226.1762::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::133::236.8483::      length += get_class_iterator_size(cc + size);
get_recurse_data_length::134::99.1328::    cc += size;
get_recurse_data_length::135::69.8967::    break;
get_recurse_data_length::136::112.7274::    case OP_MARK:
get_recurse_data_length::137::153.8399::    case OP_COMMIT_ARG:
get_recurse_data_length::138::151.0347::    case OP_PRUNE_ARG:
get_recurse_data_length::139::152.4144::    case OP_THEN_ARG:
get_recurse_data_length::140::229.0638::    SLJIT_ASSERT(common->mark_ptr != 0);
get_recurse_data_length::141::130.3130::    if (!setmark_found)
get_recurse_data_length::142::140.4993::      setmark_found = TRUE;
get_recurse_data_length::143::186.8028::    if (common->control_head_ptr != 0)
get_recurse_data_length::144::149.9886::      control_head_found = TRUE;
get_recurse_data_length::145::159.6872::    if (*cc != OP_MARK)
get_recurse_data_length::146::136.5213::      quit_found = TRUE;
get_recurse_data_length::147::162.3247::    cc += 1 + 2 + cc[1];
get_recurse_data_length::148::66.5920::    break;
get_recurse_data_length::149::113.5746::    case OP_PRUNE:
get_recurse_data_length::150::112.5720::    case OP_SKIP:
get_recurse_data_length::151::117.4124::    case OP_COMMIT:
get_recurse_data_length::152::123.2288::    quit_found = TRUE;
get_recurse_data_length::153::68.5756::    cc++;
get_recurse_data_length::154::66.8785::    break;
get_recurse_data_length::155::144.7327::    case OP_SKIP_ARG:
get_recurse_data_length::156::120.2285::    quit_found = TRUE;
get_recurse_data_length::157::159.5475::    cc += 1 + 2 + cc[1];
get_recurse_data_length::158::64.5852::    break;
get_recurse_data_length::159::110.4340::    case OP_THEN:
get_recurse_data_length::160::253.9269::    SLJIT_ASSERT(common->control_head_ptr != 0);
get_recurse_data_length::161::122.2889::    quit_found = TRUE;
get_recurse_data_length::162::141.8471::    if (!control_head_found)
get_recurse_data_length::163::154.9778::      control_head_found = TRUE;
get_recurse_data_length::164::69.8353::    cc++;
get_recurse_data_length::165::68.2406::    break;
get_recurse_data_length::166::116.2202::    case OP_ACCEPT:
get_recurse_data_length::167::151.9069::    case OP_ASSERT_ACCEPT:
get_recurse_data_length::168::120.9938::    accept_found = TRUE;
get_recurse_data_length::169::71.9751::    cc++;
get_recurse_data_length::170::68.4369::    break;
get_recurse_data_length::171::68.6751::    default:
get_recurse_data_length::172::185.4029::    cc = next_opcode(common, cc);
get_recurse_data_length::173::188.5394::    SLJIT_ASSERT(cc != NULL);
get_recurse_data_length::174::68.0678::    break;
get_recurse_data_length::175::51.3423::    }
get_recurse_data_length::176::36.4112::  }
get_recurse_data_length::177::175.1044::SLJIT_ASSERT(cc == ccend);
get_recurse_data_length::178::117.0163::if (control_head_found)
get_recurse_data_length::179::6.5585::  length++;
get_recurse_data_length::187::59.6896::    length++;
get_recurse_data_length::188::34.1317::  }
get_recurse_data_length::189::162.8971::*needs_control_head = control_head_found;
get_recurse_data_length::190::122.6178::*has_quit = quit_found;
get_recurse_data_length::191::111.5414::*has_accept = accept_found;
get_recurse_data_length::192::48.2291::return length;
get_recurse_data_length::193::9.2705::}
get_recurse_data_length::1::446.9714::static int get_recurse_data_length(compiler_common *common, PCRE2_SPTR cc, PCRE2_SPTR ccend,
get_recurse_data_length::2::306.0677::  BOOL *needs_control_head, BOOL *has_quit, BOOL *has_accept)
get_recurse_data_length::3::27.7547::{
get_recurse_data_length::4::76.1209::int length = 1;
get_recurse_data_length::5::52.3774::int size;
get_recurse_data_length::6::111.2081::PCRE2_SPTR alternative;
get_recurse_data_length::7::121.5547::BOOL quit_found = FALSE;
get_recurse_data_length::8::113.0310::BOOL accept_found = FALSE;
get_recurse_data_length::9::123.1979::BOOL setsom_found = FALSE;
get_recurse_data_length::10::120.7552::BOOL setmark_found = FALSE;
get_recurse_data_length::11::134.1845::BOOL capture_last_found = FALSE;
get_recurse_data_length::12::130.1231::BOOL control_head_found = FALSE;
get_recurse_data_length::13::301.6666::#if defined DEBUG_FORCE_CONTROL_HEAD && DEBUG_FORCE_CONTROL_HEAD
get_recurse_data_length::14::215.1933::SLJIT_ASSERT(common->control_head_ptr != 0);
get_recurse_data_length::15::107.8575::control_head_found = TRUE;
get_recurse_data_length::16::47.3378::#endif
get_recurse_data_length::17::159.4720::/* Calculate the sum of the private machine words. */
get_recurse_data_length::18::98.8792::while (cc < ccend)
get_recurse_data_length::19::34.3499::  {
get_recurse_data_length::20::70.0039::  size = 0;
get_recurse_data_length::21::77.2908::  switch(*cc)
get_recurse_data_length::22::48.5284::    {
get_recurse_data_length::23::129.3685::    case OP_SET_SOM:
get_recurse_data_length::24::234.2774::    SLJIT_ASSERT(common->has_set_som);
get_recurse_data_length::25::127.6093::    setsom_found = TRUE;
get_recurse_data_length::26::90.8163::    cc += 1;
get_recurse_data_length::27::63.8930::    break;
get_recurse_data_length::28::117.6322::    case OP_RECURSE:
get_recurse_data_length::29::167.0471::    if (common->has_set_som)
get_recurse_data_length::30::142.6211::      setsom_found = TRUE;
get_recurse_data_length::31::163.4254::    if (common->mark_ptr != 0)
get_recurse_data_length::32::139.8432::      setmark_found = TRUE;
get_recurse_data_length::33::203.0557::    if (common->capture_last_ptr != 0)
get_recurse_data_length::34::156.5404::      capture_last_found = TRUE;
get_recurse_data_length::35::144.7870::    cc += 1 + LINK_SIZE;
get_recurse_data_length::36::66.1482::    break;
get_recurse_data_length::37::109.3302::    case OP_KET:
get_recurse_data_length::38::213.1098::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::39::64.1306::      {
get_recurse_data_length::40::82.3778::      length++;
get_recurse_data_length::41::311.0850::      SLJIT_ASSERT(PRIVATE_DATA(cc + 1) != 0);
get_recurse_data_length::42::216.0651::      cc += PRIVATE_DATA(cc + 1);
get_recurse_data_length::43::67.5542::      }
get_recurse_data_length::44::71.3766::    cc += 1 + LINK_SIZE;
get_recurse_data_length::49::165.8210::    case OP_ASSERTBACK_NOT:
get_recurse_data_length::50::148.7544::    case OP_ASSERT_NA:
get_recurse_data_length::51::158.0073::    case OP_ASSERTBACK_NA:
get_recurse_data_length::52::118.7556::    case OP_ONCE:
get_recurse_data_length::53::151.0361::    case OP_SCRIPT_RUN:
get_recurse_data_length::54::129.8112::    case OP_BRAPOS:
get_recurse_data_length::55::112.1979::    case OP_SBRA:
get_recurse_data_length::56::141.0287::    case OP_SBRAPOS:
get_recurse_data_length::57::114.2283::    case OP_SCOND:
get_recurse_data_length::58::65.3427::    length++;
get_recurse_data_length::59::272.1346::    SLJIT_ASSERT(PRIVATE_DATA(cc) != 0);
get_recurse_data_length::60::142.9755::    cc += 1 + LINK_SIZE;
get_recurse_data_length::61::65.1583::    break;
get_recurse_data_length::62::108.6198::    case OP_CBRA:
get_recurse_data_length::63::117.8242::    case OP_SCBRA:
get_recurse_data_length::64::92.2329::    length += 2;
get_recurse_data_length::65::203.1680::    if (common->capture_last_ptr != 0)
get_recurse_data_length::66::149.3802::      capture_last_found = TRUE;
get_recurse_data_length::67::358.0081::    if (common->optimized_cbracket[GET2(cc, 1 + LINK_SIZE)] == 0)
get_recurse_data_length::68::80.5226::      length++;
get_recurse_data_length::69::216.9629::    cc += 1 + LINK_SIZE + IMM2_SIZE;
get_recurse_data_length::70::66.4627::    break;
get_recurse_data_length::71::135.4191::    case OP_CBRAPOS:
get_recurse_data_length::72::134.7649::    case OP_SCBRAPOS:
get_recurse_data_length::73::112.2182::    length += 2 + 2;
get_recurse_data_length::74::199.0778::    if (common->capture_last_ptr != 0)
get_recurse_data_length::75::152.0633::      capture_last_found = TRUE;
get_recurse_data_length::76::213.0404::    cc += 1 + LINK_SIZE + IMM2_SIZE;
get_recurse_data_length::77::64.8247::    break;
get_recurse_data_length::78::108.5730::    case OP_COND:
get_recurse_data_length::79::162.7801::    /* Might be a hidden SCOND. */
get_recurse_data_length::80::179.8485::    alternative = cc + GET(cc, 1);
get_recurse_data_length::81::333.3539::    if (*alternative == OP_KETRMAX || *alternative == OP_KETRMIN)
get_recurse_data_length::82::84.6246::      length++;
get_recurse_data_length::83::148.3760::    cc += 1 + LINK_SIZE;
get_recurse_data_length::84::68.6978::    break;
get_recurse_data_length::85::199.6913::    CASE_ITERATOR_PRIVATE_DATA_1
get_recurse_data_length::86::219.0806::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::87::84.6493::      length++;
get_recurse_data_length::88::96.2928::    cc += 2;
get_recurse_data_length::89::124.9559::#ifdef SUPPORT_UNICODE
get_recurse_data_length::90::6.0652::    if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);
get_recurse_data_length::92::69.7004::    break;
get_recurse_data_length::93::219.5361::    CASE_ITERATOR_PRIVATE_DATA_2A
get_recurse_data_length::94::217.8478::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::95::108.8233::      length += 2;
get_recurse_data_length::96::95.0103::    cc += 2;
get_recurse_data_length::97::117.6069::#ifdef SUPPORT_UNICODE
get_recurse_data_length::98::465.4160::    if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);
get_recurse_data_length::99::49.6086::#endif
get_recurse_data_length::100::63.4690::    break;
get_recurse_data_length::101::196.7574::    CASE_ITERATOR_PRIVATE_DATA_2B
get_recurse_data_length::102::201.6857::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::103::100.1674::      length += 2;
get_recurse_data_length::104::152.9546::    cc += 2 + IMM2_SIZE;
get_recurse_data_length::105::115.0650::#ifdef SUPPORT_UNICODE
get_recurse_data_length::106::453.8185::    if (common->utf && HAS_EXTRALEN(cc[-1])) cc += GET_EXTRALEN(cc[-1]);
get_recurse_data_length::107::50.4269::#endif
get_recurse_data_length::108::64.4697::    break;
get_recurse_data_length::109::212.6539::    CASE_ITERATOR_TYPE_PRIVATE_DATA_1
get_recurse_data_length::110::206.1211::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::111::81.9719::      length++;
get_recurse_data_length::112::90.3737::    cc += 1;
get_recurse_data_length::113::65.5010::    break;
get_recurse_data_length::114::219.5768::    CASE_ITERATOR_TYPE_PRIVATE_DATA_2A
get_recurse_data_length::115::201.3863::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::116::103.8460::      length += 2;
get_recurse_data_length::117::90.3848::    cc += 1;
get_recurse_data_length::118::64.6370::    break;
get_recurse_data_length::119::221.5187::    CASE_ITERATOR_TYPE_PRIVATE_DATA_2B
get_recurse_data_length::120::207.9669::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::121::106.4392::      length += 2;
get_recurse_data_length::122::162.6028::    cc += 1 + IMM2_SIZE;
get_recurse_data_length::123::66.8172::    break;
get_recurse_data_length::124::98.7063::    case OP_CLASS:
get_recurse_data_length::125::109.3449::    case OP_NCLASS:
get_recurse_data_length::126::315.8128::#if defined SUPPORT_UNICODE || PCRE2_CODE_UNIT_WIDTH != 8
get_recurse_data_length::127::109.0241::    case OP_XCLASS:
get_recurse_data_length::128::495.8913::    size = (*cc == OP_XCLASS) ? GET(cc, 1) : 1 + 32 / (int)sizeof(PCRE2_UCHAR);
get_recurse_data_length::129::42.3837::#else
get_recurse_data_length::132::226.1762::    if (PRIVATE_DATA(cc) != 0)
get_recurse_data_length::133::236.8483::      length += get_class_iterator_size(cc + size);
get_recurse_data_length::134::99.1328::    cc += size;
get_recurse_data_length::135::69.8967::    break;
get_recurse_data_length::136::112.7274::    case OP_MARK:
get_recurse_data_length::137::153.8399::    case OP_COMMIT_ARG:
get_recurse_data_length::138::151.0347::    case OP_PRUNE_ARG:
get_recurse_data_length::139::152.4144::    case OP_THEN_ARG:
get_recurse_data_length::140::229.0638::    SLJIT_ASSERT(common->mark_ptr != 0);
get_recurse_data_length::141::130.3130::    if (!setmark_found)
get_recurse_data_length::142::140.4993::      setmark_found = TRUE;
get_recurse_data_length::143::186.8028::    if (common->control_head_ptr != 0)
get_recurse_data_length::144::149.9886::      control_head_found = TRUE;
get_recurse_data_length::145::159.6872::    if (*cc != OP_MARK)
get_recurse_data_length::146::136.5213::      quit_found = TRUE;
get_recurse_data_length::147::162.3247::    cc += 1 + 2 + cc[1];
get_recurse_data_length::148::66.5920::    break;
get_recurse_data_length::149::113.5746::    case OP_PRUNE:
get_recurse_data_length::150::112.5720::    case OP_SKIP:
get_recurse_data_length::151::117.4124::    case OP_COMMIT:
get_recurse_data_length::152::123.2288::    quit_found = TRUE;
get_recurse_data_length::153::68.5756::    cc++;
get_recurse_data_length::154::66.8785::    break;
get_recurse_data_length::155::144.7327::    case OP_SKIP_ARG:
get_recurse_data_length::156::120.2285::    quit_found = TRUE;
get_recurse_data_length::157::159.5475::    cc += 1 + 2 + cc[1];
get_recurse_data_length::158::64.5852::    break;
get_recurse_data_length::159::110.4340::    case OP_THEN:
get_recurse_data_length::160::253.9269::    SLJIT_ASSERT(common->control_head_ptr != 0);
get_recurse_data_length::161::122.2889::    quit_found = TRUE;
get_recurse_data_length::162::141.8471::    if (!control_head_found)
get_recurse_data_length::163::154.9778::      control_head_found = TRUE;
get_recurse_data_length::164::69.8353::    cc++;
get_recurse_data_length::165::68.2406::    break;
get_recurse_data_length::166::116.2202::    case OP_ACCEPT:
get_recurse_data_length::167::151.9069::    case OP_ASSERT_ACCEPT:
get_recurse_data_length::168::120.9938::    accept_found = TRUE;
get_recurse_data_length::169::71.9751::    cc++;
get_recurse_data_length::170::68.4369::    break;
get_recurse_data_length::171::68.6751::    default:
get_recurse_data_length::172::185.4029::    cc = next_opcode(common, cc);
get_recurse_data_length::173::188.5394::    SLJIT_ASSERT(cc != NULL);
get_recurse_data_length::174::68.0678::    break;
get_recurse_data_length::175::51.3423::    }
get_recurse_data_length::176::36.4112::  }
get_recurse_data_length::177::175.1044::SLJIT_ASSERT(cc == ccend);
get_recurse_data_length::178::117.0163::if (control_head_found)
get_recurse_data_length::179::6.5585::  length++;
get_recurse_data_length::187::59.6896::    length++;
get_recurse_data_length::188::34.1317::  }
get_recurse_data_length::189::162.8971::*needs_control_head = control_head_found;
get_recurse_data_length::190::122.6178::*has_quit = quit_found;
get_recurse_data_length::191::111.5414::*has_accept = accept_found;
get_recurse_data_length::192::48.2291::return length;
get_recurse_data_length::193::9.2705::}
compare_read::1::41.9131::static int
compare_read::2::230.6919::compare_read(struct display *dp, int applied_transforms)
compare_read::3::30.7949::{
compare_read::4::242.8856::   /* Compare the png_info from read_ip with original_info */
compare_read::5::102.8730::   size_t rowbytes;
compare_read::6::152.3609::   png_uint_32 width, height;
compare_read::7::140.2449::   int bit_depth, color_type;
compare_read::8::204.1487::   int interlace_method, compression_method, filter_method;
compare_read::9::115.3569::   const char *e = NULL;
compare_read::10::446.9907::   if (!png_get_IHDR(dp->read_pp, dp->read_ip, &width, &height, &bit_depth,
compare_read::11::305.1349::      &color_type, &interlace_method, &compression_method, &filter_method))
compare_read::12::317.2332::      display_log(dp, LIBPNG_BUG, "png_get_IHDR failed");
compare_read::13::859.4482::#  define C(item) if (item != dp->item)       display_log(dp, APP_WARNING, "IHDR " #item "(%lu) changed to %lu",         (unsigned long)dp->item, (unsigned long)item), e = #item
compare_read::14::166.6388::   /* The IHDR should be identical: */
compare_read::15::83.6470::   C(width);
compare_read::16::83.0651::   C(height);
compare_read::17::104.7629::   C(bit_depth);
compare_read::18::102.2770::   C(color_type);
compare_read::19::113.7227::   C(interlace_method);
compare_read::20::115.7597::   C(compression_method);
compare_read::21::104.3630::   C(filter_method);
compare_read::22::236.6311::   /* 'e' remains set to the name of the last thing changed: */
compare_read::23::79.3575::   if (e)
compare_read::24::310.5845::      display_log(dp, APP_ERROR, "IHDR changed (%s)", e);
compare_read::25::242.7960::   /* All the chunks from the original PNG should be preserved in the output PNG
compare_read::26::175.3342::    * because the PNG format has not been changed.
compare_read::27::54.4919::    */
compare_read::28::43.7454::   {
compare_read::29::103.4841::      unsigned long chunks =
compare_read::30::383.8484::         png_get_valid(dp->read_pp, dp->read_ip, 0xffffffff);
compare_read::31::202.5073::      if (chunks != dp->chunks)
compare_read::32::106.5802::         display_log(dp, APP_FAIL, "PNG chunks changed from 0x%lx to 0x%lx",
compare_read::33::257.9089::            (unsigned long)dp->chunks, chunks);
compare_read::34::45.3364::   }
compare_read::35::154.9167::   /* rowbytes should be the same */
compare_read::36::335.8417::   rowbytes = png_get_rowbytes(dp->read_pp, dp->read_ip);
compare_read::37::280.1796::   /* NOTE: on 64-bit systems this may trash the top bits of rowbytes,
compare_read::38::163.8348::    * which could lead to weird error messages.
compare_read::39::52.1737::    */
compare_read::40::188.4302::   if (rowbytes != dp->original_rowbytes)
compare_read::41::330.5916::      display_log(dp, APP_ERROR, "PNG rowbytes changed from %lu to %lu",
compare_read::42::306.1000::         (unsigned long)dp->original_rowbytes, (unsigned long)rowbytes);
compare_read::43::234.0212::   /* The rows should be the same too, unless the applied transforms includes
compare_read::44::241.7423::    * the shift transform, in which case low bits may have been lost.
compare_read::45::51.8450::    */
compare_read::46::43.8020::   {
compare_read::47::381.9317::      png_bytepp rows = png_get_rows(dp->read_pp, dp->read_ip);
compare_read::48::273.4015::      unsigned int mask;  /* mask (if not zero) for the final byte */
compare_read::49::148.2852::      if (bit_depth < 8)
compare_read::50::64.5169::      {
compare_read::51::299.4583::         /* Need the stray bits at the end, this depends only on the low bits
compare_read::52::309.5438::          * of the image width; overflow does not matter.  If the width is an
compare_read::53::318.9739::          * exact multiple of 8 bits this gives a mask of 0, not 0xff.
compare_read::54::98.7620::          */
compare_read::55::347.0868::         mask = 0xff & (0xff00 >> ((bit_depth * width) & 7));
compare_read::56::63.9535::      }
compare_read::57::71.5154::      else
compare_read::58::127.7967::         mask = 0;
compare_read::59::143.9202::      if (rows == NULL)
compare_read::60::359.1075::         display_log(dp, LIBPNG_BUG, "png_get_rows returned NULL");
compare_read::61::300.9199::      if ((applied_transforms & PNG_TRANSFORM_SHIFT) == 0 ||
compare_read::62::411.9315::         (dp->active_transforms & PNG_TRANSFORM_SHIFT) == 0 ||
compare_read::63::296.5506::         color_type == PNG_COLOR_TYPE_PALETTE)
compare_read::64::72.0425::      {
compare_read::65::146.3619::         unsigned long y;
compare_read::66::284.5043::         for (y=0; y<height; ++y)
compare_read::67::92.1220::         {
compare_read::68::261.6404::            png_bytep row = rows[y];
compare_read::69::329.9835::            png_bytep orig = dp->original_rows[y];
compare_read::70::484.8565::            if (memcmp(row, orig, rowbytes-(mask != 0)) != 0 || (mask != 0 &&
compare_read::71::480.3149::               ((row[rowbytes-1] & mask) != (orig[rowbytes-1] & mask))))
compare_read::72::115.8245::            {
compare_read::73::196.5358::               size_t x;
compare_read::74::223.2268::               /* Find the first error */
compare_read::75::356.3912::               for (x=0; x<rowbytes-1; ++x)
compare_read::76::318.5821::                  if (row[x] != orig[x])
compare_read::77::205.6626::                     break;
compare_read::78::294.6907::               display_log(dp, APP_FAIL,
compare_read::79::488.4658::                  "byte(%lu,%lu) changed 0x%.2x -> 0x%.2x",
compare_read::80::474.6198::                  (unsigned long)x, (unsigned long)y, orig[x], row[x]);
compare_read::81::392.9291::               return 0; /* don't keep reporting failed rows on 'continue' */
compare_read::82::49.0469::            }
compare_read::85::78.2496::      else
compare_read::86::245.7176::#     ifdef PNG_sBIT_SUPPORTED
compare_read::87::76.6626::      {
compare_read::88::150.7462::         unsigned long y;
compare_read::89::385.2671::         int bpp;   /* bits-per-pixel then bytes-per-pixel */
compare_read::90::246.3275::         /* components are up to 8 bytes in size */
compare_read::91::217.8008::         png_byte sig_bits[8];
compare_read::92::219.4117::         png_color_8p sBIT;
compare_read::93::588.3719::         if (png_get_sBIT(dp->read_pp, dp->read_ip, &sBIT) != PNG_INFO_sBIT)
compare_read::94::290.2959::            display_log(dp, INTERNAL_ERROR,
compare_read::95::293.7272::               "active shift transform but no sBIT in file");
compare_read::96::167.3410::         switch (color_type)
compare_read::97::94.6466::         {
compare_read::98::250.1847::            case PNG_COLOR_TYPE_GRAY:
compare_read::99::300.8415::               sig_bits[0] = sBIT->gray;
compare_read::100::225.8890::               bpp = bit_depth;
compare_read::101::163.8017::               break;
compare_read::102::242.8253::            case PNG_COLOR_TYPE_GA:
compare_read::103::313.8832::               sig_bits[0] = sBIT->gray;
compare_read::104::316.4859::               sig_bits[1] = sBIT->alpha;
compare_read::105::272.5826::               bpp = 2 * bit_depth;
compare_read::106::168.2190::               break;
compare_read::107::249.3416::            case PNG_COLOR_TYPE_RGB:
compare_read::108::332.7331::               sig_bits[0] = sBIT->red;
compare_read::109::89.1479::               sig_bits[1] = sBIT->green;
compare_read::110::359.9391::               sig_bits[2] = sBIT->blue;
compare_read::111::292.5981::               bpp = 3 * bit_depth;
compare_read::112::173.9314::               break;
compare_read::113::269.3514::            case PNG_COLOR_TYPE_RGBA:
compare_read::114::326.8246::               sig_bits[0] = sBIT->red;
compare_read::115::318.6238::               sig_bits[1] = sBIT->green;
compare_read::116::317.0604::               sig_bits[2] = sBIT->blue;
compare_read::117::328.6462::               sig_bits[3] = sBIT->alpha;
compare_read::118::273.6442::               bpp = 4 * bit_depth;
compare_read::119::169.8726::               break;
compare_read::120::142.9479::            default:
compare_read::121::438.1010::               display_log(dp, LIBPNG_ERROR, "invalid colour type %d",
compare_read::122::208.0551::                  color_type);
compare_read::123::243.1891::               /*NOTREACHED*/
compare_read::124::421.3646::               memset(sig_bits, 0, sizeof(sig_bits));
compare_read::125::208.6408::               bpp = 0;
compare_read::126::172.6768::               break;
compare_read::127::95.8567::         }
compare_read::128::101.5870::         {
compare_read::129::162.4761::            int b;
compare_read::130::379.2011::            for (b=0; 8*b<bpp; ++b)
compare_read::131::121.8580::            {
compare_read::132::376.3453::               /* libpng should catch this; if not there is a security issue
compare_read::133::435.0735::                * because an app (like this one) may overflow an array. In fact
compare_read::134::318.1592::                * libpng doesn't catch this at present.
compare_read::135::156.2150::                */
compare_read::136::549.5792::               if (sig_bits[b] == 0 || sig_bits[b] > bit_depth/*!palette*/)
compare_read::137::329.9856::                  display_log(dp, LIBPNG_BUG,
compare_read::138::487.9561::                     "invalid sBIT[%u]  value %d returned for PNG bit depth %d",
compare_read::139::359.2841::                     b, sig_bits[b], bit_depth);
compare_read::140::118.2836::            }
compare_read::141::93.8809::         }
compare_read::142::284.6443::         if (bpp < 8 && bpp != bit_depth)
compare_read::143::93.6070::         {
compare_read::144::391.4409::            /* sanity check; this is a grayscale PNG; something is wrong in the
compare_read::145::172.2516::             * code above.
compare_read::146::131.5670::             */
compare_read::147::500.6223::            display_log(dp, INTERNAL_ERROR, "invalid bpp %u for bit_depth %u",
compare_read::148::244.5155::               bpp, bit_depth);
compare_read::149::94.1701::         }
compare_read::150::179.1082::         switch (bit_depth)
compare_read::151::99.4335::         {
compare_read::152::161.7289::            int b;
compare_read::153::360.0168::            case 16: /* Two bytes per component, big-endian */
compare_read::154::391.2102::               for (b = (bpp >> 4); b > 0; --b)
compare_read::155::21.2745::               {
compare_read::156::500.2518::                  unsigned int sig = (unsigned int)(0xffff0000 >> sig_bits[b]);
compare_read::157::448.5015::                  sig_bits[2*b+1] = (png_byte)sig;
compare_read::158::572.6779::                  sig_bits[2*b+0] = (png_byte)(sig >> 8); /* big-endian */
compare_read::159::139.3541::               }
compare_read::160::160.3615::               break;
compare_read::161::260.9388::            case 8: /* One byte per component */
compare_read::162::377.6410::               for (b=0; b*8 < bpp; ++b)
compare_read::163::480.1555::                  sig_bits[b] = (png_byte)(0xff00 >> sig_bits[b]);
compare_read::164::161.3460::               break;
compare_read::165::267.0869::            case 1: /* allowed, but dumb */
compare_read::166::212.0527::               /* Value is 1 */
compare_read::167::278.9848::               sig_bits[0] = 0xff;
compare_read::168::163.9791::               break;
compare_read::169::263.1660::            case 2: /* Replicate 4 times */
compare_read::170::253.4015::               /* Value is 1 or 2 */
compare_read::171::451.2397::               b = 0x3 & ((0x3<<2) >> sig_bits[0]);
compare_read::172::245.8520::               b |= b << 2;
compare_read::173::243.2145::               b |= b << 4;
compare_read::174::354.7880::               sig_bits[0] = (png_byte)b;
compare_read::175::122.1796::               break;
compare_read::176::270.1508::            case 4: /* Replicate twice */
compare_read::177::340.8809::               /* Value is 1, 2, 3 or 4 */
compare_read::178::423.2574::               b = 0xf & ((0xf << 4) >> sig_bits[0]);
compare_read::179::235.3032::               b |= b << 4;
compare_read::180::328.5641::               sig_bits[0] = (png_byte)b;
compare_read::181::161.8552::               break;
compare_read::182::133.8548::            default:
compare_read::183::485.2470::               display_log(dp, LIBPNG_BUG, "invalid bit depth %d", bit_depth);
compare_read::184::160.1091::               break;
compare_read::185::95.7783::         }
compare_read::186::411.6283::         /* Convert bpp to bytes; this gives '1' for low-bit depth grayscale,
compare_read::187::228.4097::          * where there are multiple pixels per byte.
compare_read::188::102.5043::          */
compare_read::189::247.0662::         bpp = (bpp+7) >> 3;
compare_read::190::302.2396::         /* The mask can be combined with sig_bits[0] */
compare_read::191::174.3114::         if (mask != 0)
compare_read::192::95.3945::         {
compare_read::193::231.4883::            mask &= sig_bits[0];
compare_read::194::277.6985::            if (bpp != 1 || mask == 0)
compare_read::195::478.4922::               display_log(dp, INTERNAL_ERROR, "mask calculation error %u, %u",
compare_read::196::229.9563::                  bpp, mask);
compare_read::197::92.3212::         }
compare_read::198::303.0665::         for (y=0; y<height; ++y)
compare_read::199::100.6886::         {
compare_read::200::57.6331::            png_bytep row = rows[y];
compare_read::201::397.0280::            png_bytep orig = dp->original_rows[y];
compare_read::202::183.3941::            unsigned long x;
compare_read::203::447.1700::            for (x=0; x<(width-(mask!=0)); ++x)
compare_read::204::120.2558::            {
compare_read::205::182.8610::               int b;
compare_read::206::355.4808::               for (b=0; b<bpp; ++b)
compare_read::207::138.5276::               {
compare_read::208::568.9216::                  if ((*row++ & sig_bits[b]) != (*orig++ & sig_bits[b]))
compare_read::209::166.0044::                  {
compare_read::210::353.2987::                     display_log(dp, APP_FAIL,
compare_read::211::563.2808::                        "significant bits at (%lu[%u],%lu) changed %.2x->%.2x",
compare_read::212::469.7212::                        x, b, y, orig[-1], row[-1]);
compare_read::213::232.8729::                     return 0;
compare_read::214::169.0000::                  }
compare_read::215::147.2036::               }
compare_read::216::122.3713::            }
compare_read::217::420.7863::            if (mask != 0 && (*row & mask) != (*orig & mask))
compare_read::218::123.5658::            {
compare_read::219::310.4845::               display_log(dp, APP_FAIL,
compare_read::220::472.8381::                  "significant bits at (%lu[end],%lu) changed", x, y);
compare_read::221::14.3384::               return 0;
compare_read::222::113.8529::            }
compare_read::223::170.1152::         } /* for y */
compare_read::224::67.5615::      }
compare_read::225::172.0201::#     else /* !sBIT */
compare_read::226::245.2684::         display_log(dp, INTERNAL_ERROR,
compare_read::227::258.7855::               "active shift transform but no sBIT support");
compare_read::228::162.7280::#     endif /* !sBIT */
compare_read::229::43.7493::   }
compare_read::230::149.5421::   return 1; /* compare succeeded */
compare_read::231::29.3356::}
compare_read::232::198.1467::#ifdef PNG_WRITE_PNG_SUPPORTED
compare_read::233::42.1378::static void
compare_read::234::290.9004::buffer_write(struct display *dp, struct buffer *buffer, png_bytep data,
compare_read::235::90.3568::   size_t size)
compare_read::236::213.7470::   /* Generic write function used both from the write callback provided to
compare_read::237::170.0966::    * libpng and from the generic read code.
compare_read::238::54.0330::    */
compare_read::239::33.0621::{
compare_read::240::218.2719::   /* Write the data into the buffer, adding buffers as required */
compare_read::241::179.1818::   struct buffer_list *last = buffer->last;
compare_read::242::192.6407::   size_t end_count = buffer->end_count;
compare_read::243::106.7968::   while (size > 0)
compare_read::244::44.9913::   {
compare_read::245::122.5900::      size_t avail;
compare_read::246::209.7063::      if (end_count >= sizeof last->buffer)
compare_read::247::66.7290::      {
compare_read::248::196.2108::         if (last->next == NULL)
compare_read::249::89.1226::         {
compare_read::250::227.1590::            last = buffer_extend(last);
compare_read::251::194.0483::            if (last == NULL)
compare_read::252::365.1171::               display_log(dp, APP_ERROR, "out of memory saving file");
compare_read::253::89.2634::         }
compare_read::254::92.4105::         else
compare_read::255::195.7884::            last = last->next;
compare_read::256::325.7484::         buffer->last = last; /* avoid the need to rewrite every time */
compare_read::257::154.2967::         end_count = 0;
compare_read::258::66.8364::      }
compare_read::259::259.9522::      avail = (sizeof last->buffer) - end_count;
compare_read::260::86.5967::      if (avail > size)
compare_read::263::141.9049::      end_count += avail;
compare_read::264::117.5521::      size -= avail;
compare_read::265::109.9323::      data += avail;
compare_read::266::42.8370::   }
compare_read::267::142.9227::   buffer->end_count = end_count;
compare_read::268::11.6412::}
check_chain_extensions::1::289.9173::static int check_chain_extensions(X509_STORE_CTX *ctx)
check_chain_extensions::2::33.1290::{
check_chain_extensions::3::230.7199::    int i, must_be_ca, plen = 0;
check_chain_extensions::4::107.9814::    X509 *x;
check_chain_extensions::5::152.5901::    int proxy_path_length = 0;
check_chain_extensions::6::81.8251::    int purpose;
check_chain_extensions::7::143.3496::    int allow_proxy_certs;
check_chain_extensions::8::221.5000::    int num = sk_X509_num(ctx->chain);
check_chain_extensions::9::73.2452::    /*-
check_chain_extensions::10::216.8621::     *  must_be_ca can have 1 of 3 values:
check_chain_extensions::11::269.4570::     * -1: we accept both CA and non-CA certificates, to allow direct
check_chain_extensions::12::258.5753::     *     use of self-signed certificates (which are marked as CA).
check_chain_extensions::13::266.1555::     * 0:  we only accept non-CA certificates.  This is currently not
check_chain_extensions::14::241.2826::     *     used, but the possibility is present for future extensions.
check_chain_extensions::15::256.0997::     * 1:  we only accept CA certificates.  This is currently used for
check_chain_extensions::16::216.9667::     *     all certificates in the chain except the leaf certificate.
check_chain_extensions::17::61.4401::     */
check_chain_extensions::18::153.3148::    must_be_ca = -1;
check_chain_extensions::19::124.1884::    /* CRL path validation */
check_chain_extensions::20::133.2711::    if (ctx->parent) {
check_chain_extensions::21::179.9513::        allow_proxy_certs = 0;
check_chain_extensions::22::240.8073::        purpose = X509_PURPOSE_CRL_SIGN;
check_chain_extensions::23::79.3524::    } else {
check_chain_extensions::24::151.2339::        allow_proxy_certs =
check_chain_extensions::25::444.0363::            ! !(ctx->param->flags & X509_V_FLAG_ALLOW_PROXY_CERTS);
check_chain_extensions::26::190.4581::        purpose = ctx->param->purpose;
check_chain_extensions::27::51.4159::    }
check_chain_extensions::28::225.1710::    for (i = 0; i < num; i++) {
check_chain_extensions::29::115.2668::        int ret;
check_chain_extensions::30::273.6128::        x = sk_X509_value(ctx->chain, i);
check_chain_extensions::31::402.3199::        if (!(ctx->param->flags & X509_V_FLAG_IGNORE_CRITICAL)
check_chain_extensions::32::108.4367::            && (x->ex_flags & EXFLAG_CRITICAL)) {
check_chain_extensions::33::412.9907::            if (!verify_cb_cert(ctx, x, i,
check_chain_extensions::34::593.6965::                                X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION))
check_chain_extensions::35::194.9532::                return 0;
check_chain_extensions::36::87.4628::        }
check_chain_extensions::37::431.3622::        if (!allow_proxy_certs && (x->ex_flags & EXFLAG_PROXY)) {
check_chain_extensions::38::359.4864::            if (!verify_cb_cert(ctx, x, i,
check_chain_extensions::39::586.2964::                                X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED))
check_chain_extensions::40::189.4146::                return 0;
check_chain_extensions::41::87.9594::        }
check_chain_extensions::42::237.4614::        ret = X509_check_ca(x);
check_chain_extensions::43::199.5428::        switch (must_be_ca) {
check_chain_extensions::44::132.2880::        case -1:
check_chain_extensions::45::415.9435::            if ((ctx->param->flags & X509_V_FLAG_X509_STRICT)
check_chain_extensions::46::354.4691::                && (ret != 1) && (ret != 0)) {
check_chain_extensions::47::204.1521::                ret = 0;
check_chain_extensions::48::426.1078::                ctx->error = X509_V_ERR_INVALID_CA;
check_chain_extensions::49::140.7196::            } else
check_chain_extensions::50::215.7556::                ret = 1;
check_chain_extensions::51::149.8882::            break;
check_chain_extensions::52::124.2551::        case 0:
check_chain_extensions::53::235.8116::            if (ret != 0) {
check_chain_extensions::54::190.0147::                ret = 0;
check_chain_extensions::55::495.9196::                ctx->error = X509_V_ERR_INVALID_NON_CA;
check_chain_extensions::56::140.8651::            } else
check_chain_extensions::57::211.6446::                ret = 1;
check_chain_extensions::58::148.0257::            break;
check_chain_extensions::59::113.3736::        default:
check_chain_extensions::60::418.7961::            /* X509_V_FLAG_X509_STRICT is implicit for intermediate CAs */
check_chain_extensions::61::208.1494::            if ((ret == 0)
check_chain_extensions::62::518.3176::                || ((i + 1 < num || ctx->param->flags &_V_FLAG_X509_STRICT)
check_chain_extensions::63::294.9225::                    && (ret != 1))) {
check_chain_extensions::64::198.8397::                ret = 0;
check_chain_extensions::65::406.9420::                ctx->error = X509_V_ERR_INVALID_CA;
check_chain_extensions::66::131.1959::            } else
check_chain_extensions::67::196.3549::                ret = 1;
check_chain_extensions::68::140.0720::            break;
check_chain_extensions::69::86.7864::        }
check_chain_extensions::70::480.3863::        if ((ctx->param->flags & X509_V_FLAG_X509_STRICT) && num > 1) {
check_chain_extensions::71::296.6367::            /* Check for presence of explicit elliptic curve parameters */
check_chain_extensions::72::252.9858::            ret = check_curve(x);
check_chain_extensions::73::197.1950::            if (ret < 0)
check_chain_extensions::74::408.7698::                ctx->error = X509_V_ERR_UNSPECIFIED;
check_chain_extensions::75::220.5818::            else if (ret == 0)
check_chain_extensions::76::405.8816::                ctx->error = X509_V_ERR_EC_KEY_EXPLICIT_PARAMS;
check_chain_extensions::78::308.8250::        if ((x->ex_flags & EXFLAG_CA) == 0
check_chain_extensions::79::249.0793::            && x->ex_pathlen != -1
check_chain_extensions::80::418.3977::            && (ctx->param->flags & X509_V_FLAG_X509_STRICT)) {
check_chain_extensions::81::383.8037::            ctx->error = X509_V_ERR_INVALID_EXTENSION;
check_chain_extensions::82::156.7482::            ret = 0;
check_chain_extensions::83::80.8851::        }
check_chain_extensions::84::445.9598::        if (ret == 0 && !verify_cb_cert(ctx, x, i, X509_V_OK))
check_chain_extensions::85::145.5427::            return 0;
check_chain_extensions::86::243.4338::        /* check_purpose() makes the callback as needed */
check_chain_extensions::87::421.2489::        if (purpose > 0 && !check_purpose(ctx, x, purpose, i, must_be_ca))
check_chain_extensions::88::145.8264::            return 0;
check_chain_extensions::89::147.6481::        /* Check pathlen */
check_chain_extensions::90::313.5033::        if ((i > 1) && (x->ex_pathlen != -1)
check_chain_extensions::91::356.3609::            && (plen > (x->ex_pathlen + proxy_path_length))) {
check_chain_extensions::92::552.4673::            if (!verify_cb_cert(ctx, x, i, X509_V_ERR_PATH_LENGTH_EXCEEDED))
check_chain_extensions::93::182.2128::                return 0;
check_chain_extensions::94::84.5933::        }
check_chain_extensions::95::274.8720::        /* Increment path length if not a self issued intermediate CA */
check_chain_extensions::96::371.2290::        if (i > 0 && (x->ex_flags & EXFLAG_SI) == 0)
check_chain_extensions::97::147.0826::            plen++;
check_chain_extensions::98::96.8369::        /*
check_chain_extensions::99::259.9628::         * If this certificate is a proxy certificate, the next certificate
check_chain_extensions::100::198.7648::         * must be another proxy certificate or a EE certificate.  If not,
check_chain_extensions::101::252.2351::         * the next certificate must be a CA certificate.
check_chain_extensions::102::111.5004::         */
check_chain_extensions::103::305.2760::        if (x->ex_flags & EXFLAG_PROXY) {
check_chain_extensions::104::139.6682::            /*
check_chain_extensions::105::503.9491::             * RFC3820, 4.1.3 (b)(1) stipulates that if pCPathLengthConstraint
check_chain_extensions::106::361.3542::             * is less than max_path_length, the former should be copied to
check_chain_extensions::107::426.0791::             * the latter, and 4.1.4 (a) stipulates that max_path_length
check_chain_extensions::108::342.6064::             * should be verified to be larger than zero and decrement it.
check_chain_extensions::109::122.0776::             *
check_chain_extensions::110::332.4417::             * Because we're checking the certs in the reverse order, we start
check_chain_extensions::111::374.3838::             * with verifying that proxy_path_length isn't larger than pcPLC,
check_chain_extensions::112::349.2367::             * and copy the latter to the former if it is, and finally,
check_chain_extensions::113::221.4615::             * increment proxy_path_length.
check_chain_extensions::114::131.5307::             */
check_chain_extensions::115::309.5211::            if (x->ex_pcpathlen != -1) {
check_chain_extensions::116::380.9078::                if (proxy_path_length > x->ex_pcpathlen) {
check_chain_extensions::117::966.4775::                    if (!verify_cb_cert(ctx, x,                                X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED))
check_chain_extensions::118::262.1455::                        return 0;
check_chain_extensions::119::83.4714::                }
check_chain_extensions::120::384.0387::                proxy_path_length = x->ex_pcpathlen;
check_chain_extensions::121::126.2285::            }
check_chain_extensions::122::205.0974::            proxy_path_length++;
check_chain_extensions::123::233.9845::            must_be_ca = 0;
check_chain_extensions::124::105.8265::        } else
check_chain_extensions::125::216.2887::            must_be_ca = 1;
check_chain_extensions::126::53.0123::    }
check_chain_extensions::127::85.5310::    return 1;
check_chain_extensions::128::13.4016::}
TextString::1::255.7220::PageLabelNode::PageLabelNode(int firstPageA, Dict *dict) {
TextString::2::156.6382::  Object prefixObj, styleObj, startObj;
TextString::3::112.9516::  // convert page index to page number
TextString::4::133.1579::  firstPage = firstPageA + 1;
TextString::5::123.0299::  // lastPage will be filled in later
TextString::6::94.4041::  lastPage = -1;
TextString::7::244.6443::  if (dict->lookup("P", &prefixObj)->isString()) {
TextString::8::179.5197::    prefix = new TextString(prefixObj.getString());
TextString::9::60.4769::  } else {
TextString::10::107.8432::    prefix = new TextString();
TextString::11::35.9842::  }
TextString::12::89.7222::  prefixObj.free();
TextString::13::88.9220::  style = '\0';
TextString::14::240.2963::  if (dict->lookup("S", &styleObj)->isName()) {
TextString::15::207.6525::    if (strlen(styleObj.getName()) == 1) {
TextString::16::176.9119::      style = styleObj.getName()[0];
TextString::17::44.5937::    }
TextString::18::35.5050::  }
TextString::19::87.2809::  styleObj.free();
TextString::20::71.1991::  start = 1;
TextString::21::235.6729::  if (dict->lookup("St", &startObj)->isInt()) {
TextString::22::131.0590::    start = startObj.getInt();
TextString::23::34.3446::  }
TextString::24::85.2824::  startObj.free();
TextString::25::26.2228::}
TextString::26::119.2411::PageLabelNode::~PageLabelNode() {
TextString::27::52.7183::  delete prefix;
TextString::28::10.6125::}
and_code_range_buf::1::43.5054::static int
and_code_range_buf::2::489.3743::and_code_range_buf(BBuf* bbuf1, int not1, BBuf* bbuf2, int not2, BBuf** pbuf)
and_code_range_buf::3::31.1663::{
and_code_range_buf::4::65.4769::  int r;
and_code_range_buf::5::280.9818::  OnigCodePoint i, j, n1, n2, *data1, *data2;
and_code_range_buf::6::269.1833::  OnigCodePoint from, to, from1, to1, from2, to2;
and_code_range_buf::7::149.6291::  *pbuf = (BBuf* )NULL;
and_code_range_buf::8::159.4775::  if (IS_NULL(bbuf1)) {
and_code_range_buf::9::386.2415::    if (not1 != 0 && IS_NOT_NULL(bbuf2)) /* not1 != 0 -> not2 == 0 */
and_code_range_buf::10::208.1450::      return bbuf_clone(pbuf, bbuf2);
and_code_range_buf::11::75.4702::    return 0;
and_code_range_buf::12::35.2326::  }
and_code_range_buf::13::174.0797::  else if (IS_NULL(bbuf2)) {
and_code_range_buf::14::122.9862::    if (not2 != 0)
and_code_range_buf::15::210.1478::      return bbuf_clone(pbuf, bbuf1);
and_code_range_buf::16::77.9810::    return 0;
and_code_range_buf::17::35.7899::  }
and_code_range_buf::18::113.4665::  if (not1 != 0)
and_code_range_buf::19::296.6723::    SWAP_BB_NOT(bbuf1, not1, bbuf2, not2);
and_code_range_buf::20::227.7941::  data1 = (OnigCodePoint* )(bbuf1->p);
and_code_range_buf::21::219.6896::  data2 = (OnigCodePoint* )(bbuf2->p);
and_code_range_buf::22::190.6390::  GET_CODE_POINT(n1, data1);
and_code_range_buf::23::192.5374::  GET_CODE_POINT(n2, data2);
and_code_range_buf::24::61.9471::  data1++;
and_code_range_buf::25::60.5804::  data2++;
and_code_range_buf::26::256.9622::  if (not2 == 0 && not1 == 0) { /* 1 AND 2 */
and_code_range_buf::27::220.2551::    for (i = 0; i < n1; i++) {
and_code_range_buf::28::181.3616::      from1 = data1[i*2];
and_code_range_buf::29::218.1067::      to1   = data1[i*2+1];
and_code_range_buf::30::240.1125::      for (j = 0; j < n2; j++) {
and_code_range_buf::31::196.4692::        from2 = data2[j*2];
and_code_range_buf::32::229.1871::        to2   = data2[j*2+1];
and_code_range_buf::33::201.7192::        if (from2 > to1) break;
and_code_range_buf::34::87.3954::        if (to2 < from1) continue;
and_code_range_buf::36::229.0935::        to   = MIN(to1, to2);
and_code_range_buf::37::322.1228::        r = add_code_range_to_buf(pbuf, from, to);
and_code_range_buf::38::188.5932::        if (r != 0) return r;
and_code_range_buf::39::62.8941::      }
and_code_range_buf::40::48.4276::    }
and_code_range_buf::41::35.9425::  }
and_code_range_buf::42::254.7988::  else if (not1 == 0) { /* 1 AND (not 2) */
and_code_range_buf::43::218.7885::    for (i = 0; i < n1; i++) {
and_code_range_buf::44::175.2255::      from1 = data1[i*2];
and_code_range_buf::45::206.0002::      to1   = data1[i*2+1];
and_code_range_buf::46::340.4531::      r = and_code_range1(pbuf, from1, to1, data2, n2);
and_code_range_buf::47::165.3423::      if (r != 0) return r;
and_code_range_buf::48::47.5130::    }
and_code_range_buf::49::35.7531::  }
and_code_range_buf::50::60.4146::  return 0;
and_code_range_buf::51::28.9662::}
and_code_range_buf::52::39.2069::static int
and_code_range_buf::53::290.7500::and_cclass(CClassNode* dest, CClassNode* cc, OnigEncoding enc)
and_code_range_buf::54::30.2379::{
and_code_range_buf::55::136.2844::  int r, not1, not2;
and_code_range_buf::56::191.2356::  BBuf *buf1, *buf2, *pbuf;
and_code_range_buf::57::154.9827::  BitSetRef bsr1, bsr2;
and_code_range_buf::58::140.2685::  BitSet bs1, bs2;
and_code_range_buf::59::190.8947::  not1 = IS_NCCLASS_NOT(dest);
and_code_range_buf::60::116.5219::  bsr1 = dest->bs;
and_code_range_buf::61::118.7800::  buf1 = dest->mbuf;
and_code_range_buf::62::195.6586::  not2 = IS_NCCLASS_NOT(cc);
and_code_range_buf::63::118.7460::  bsr2 = cc->bs;
and_code_range_buf::64::126.1625::  buf2 = cc->mbuf;
and_code_range_buf::65::126.5419::  if (not1 != 0) {
and_code_range_buf::66::232.0826::    bitset_invert_to(bsr1, bs1);
and_code_range_buf::67::133.9983::    bsr1 = bs1;
and_code_range_buf::68::34.6631::  }
and_code_range_buf::69::130.0541::  if (not2 != 0) {
and_code_range_buf::70::233.2404::    bitset_invert_to(bsr2, bs2);
and_code_range_buf::71::132.8181::    bsr2 = bs2;
and_code_range_buf::72::36.6953::  }
and_code_range_buf::73::184.4670::  bitset_and(bsr1, bsr2);
and_code_range_buf::74::165.3437::  if (bsr1 != dest->bs) {
and_code_range_buf::75::211.6148::    bitset_copy(dest->bs, bsr1);
and_code_range_buf::76::37.6315::  }
and_code_range_buf::77::85.1655::  if (not1 != 0) {
and_code_range_buf::81::244.4706::    if (not1 != 0 && not2 != 0) {
and_code_range_buf::82::432.0440::      r = or_code_range_buf(enc, buf1, 0, buf2, 0, &pbuf);
and_code_range_buf::83::53.4541::    }
and_code_range_buf::84::71.4043::    else {
and_code_range_buf::85::405.5584::      r = and_code_range_buf(buf1, not1, buf2, not2, &pbuf);
and_code_range_buf::86::218.4908::      if (r == 0 && not1 != 0) {
and_code_range_buf::87::151.3098::        BBuf *tbuf;
and_code_range_buf::88::317.4011::        r = not_code_range_buf(enc, pbuf, &tbuf);
and_code_range_buf::89::160.1000::        if (r != 0) {
and_code_range_buf::90::203.2272::          bbuf_free(pbuf);
and_code_range_buf::91::129.4737::          return r;
and_code_range_buf::92::82.2792::        }
and_code_range_buf::93::181.5156::        bbuf_free(pbuf);
and_code_range_buf::94::147.0182::        pbuf = tbuf;
and_code_range_buf::95::65.3594::      }
and_code_range_buf::96::51.6735::    }
and_code_range_buf::97::155.0677::    if (r != 0) return r;
and_code_range_buf::98::139.7031::    dest->mbuf = pbuf;
and_code_range_buf::99::139.3781::    bbuf_free(buf1);
and_code_range_buf::100::72.9722::    return r;
and_code_range_buf::101::31.8883::  }
and_code_range_buf::102::58.1381::  return 0;
and_code_range_buf::103::10.3531::}
gb18030_mbc_enc_len::1::38.9876::static int
gb18030_mbc_enc_len::2::213.0595::gb18030_mbc_enc_len(const UChar* p)
gb18030_mbc_enc_len::3::29.5866::{
gb18030_mbc_enc_len::4::193.3310::  if (GB18030_MAP[*p] != CM)
gb18030_mbc_enc_len::5::76.9343::    return 1;
gb18030_mbc_enc_len::6::47.7134::  p++;
gb18030_mbc_enc_len::7::187.9653::  if (GB18030_MAP[*p] == C4)
gb18030_mbc_enc_len::8::68.8977::    return 4;
gb18030_mbc_enc_len::9::53.0914::  return 2;
gb18030_mbc_enc_len::10::9.7632::}
search_in_range::1::43.1348::static int
search_in_range::2::953.2416::search_in_range(regex_t* reg, const UChar* str, const UChar* end, const UChar* start, const UChar* range, /* match range */ const UChar* data_range, /* subject string range */ OnigRegion* region, OnigOptionType option, OnigMatchParam* mp);
search_in_range::3::118.9489::#ifdef USE_CALLOUT
search_in_range::4::80.5285::typedef struct {
search_in_range::5::152.8319::  int last_match_at_call_counter;
search_in_range::6::49.2756::  struct {
search_in_range::7::106.7575::    OnigType  type;
search_in_range::8::98.6524::    OnigValue val;
search_in_range::9::218.7149::  } slot[ONIG_CALLOUT_DATA_SLOT_NUM];
search_in_range::10::74.0417::} CalloutData;
search_in_range::11::49.9905::#endif
search_in_range::12::95.1451::struct OnigMatchParamStruct {
search_in_range::13::142.8986::  unsigned int    match_stack_limit;
search_in_range::14::153.4946::#ifdef USE_RETRY_LIMIT
search_in_range::15::167.6618::  unsigned long   retry_limit_in_match;
search_in_range::16::165.8252::  unsigned long   retry_limit_in_search;
search_in_range::17::53.9576::#endif
search_in_range::18::304.4111::  void*           callout_user_data; /* used in callback each match */
search_in_range::19::120.6596::#ifdef USE_CALLOUT
search_in_range::20::221.8901::  OnigCalloutFunc progress_callout_of_contents;
search_in_range::21::231.8011::  OnigCalloutFunc retraction_callout_of_contents;
search_in_range::22::214.8467::  int             match_at_call_counter;
search_in_range::23::150.3449::  CalloutData*    callout_data;
search_in_range::24::214.1346::  int             callout_data_alloc_num;
search_in_range::25::43.6155::#endif
search_in_range::26::14.4989::};
gDestroyMutex::1::95.1475::Catalog::~Catalog() {
gDestroyMutex::2::68.5930::  int i;
gDestroyMutex::3::100.4199::  if (pageTree) {
gDestroyMutex::4::88.6735::    delete pageTree;
gDestroyMutex::5::37.6758::  }
gDestroyMutex::6::92.0964::  if (pages) {
gDestroyMutex::7::234.3053::    for (i = 0; i < numPages; ++i) {
gDestroyMutex::8::142.1648::      if (pages[i]) {
gDestroyMutex::9::78.3961::	delete pages[i];
gDestroyMutex::10::61.9215::      }
gDestroyMutex::11::48.8653::    }
gDestroyMutex::12::105.7527::    gfree(pages);
gDestroyMutex::13::119.6913::    gfree(pageRefs);
gDestroyMutex::14::33.1698::  }
gDestroyMutex::15::98.9871::#if MULTITHREADED
gDestroyMutex::16::128.9035::  gDestroyMutex(&pageMutex);
gDestroyMutex::17::49.4716::#endif
gDestroyMutex::18::88.2778::  dests.free();
gDestroyMutex::19::88.4009::  nameTree.free();
gDestroyMutex::20::89.3508::  if (baseURI) {
gDestroyMutex::21::80.1886::    delete baseURI;
gDestroyMutex::22::33.9033::  }
gDestroyMutex::23::76.7922::  metadata.free();
gDestroyMutex::24::101.1264::  structTreeRoot.free();
gDestroyMutex::25::78.8376::  outline.free();
gDestroyMutex::26::98.7788::  acroForm.free();
gDestroyMutex::27::78.7457::  if (form) {
gDestroyMutex::28::71.0458::    delete form;
gDestroyMutex::29::34.9716::  }
gDestroyMutex::30::107.6284::  ocProperties.free();
gDestroyMutex::31::106.5009::  if (embeddedFiles) {
gDestroyMutex::32::178.7708::    deleteGList(embeddedFiles, EmbeddedFile);
gDestroyMutex::33::34.4336::  }
gDestroyMutex::34::102.0560::  if (pageLabels) {
gDestroyMutex::35::169.5599::    deleteGList(pageLabels, PageLabelNode);
gDestroyMutex::36::32.2411::  }
gDestroyMutex::37::90.5907::  viewerPrefs.free();
gDestroyMutex::38::10.6658::}
if::1::368.4677::void JBIG2Bitmap::combine(JBIG2Bitmap *bitmap, int x, int y,
if::2::99.6102::			  Guint combOp) {
if::3::251.5547::  int x0, x1, y0, y1, xx, yy;
if::4::160.2081::  Guchar *srcPtr, *destPtr;
if::5::281.8373::  Guchar dest, src0, src1, src, m1, m2, m3;
if::6::112.6620::  Guint s1, s2;
if::7::87.8989::  GBool oneByte;
if::8::179.8506::  // check for the pathological case where y = -2^31
if::9::159.5159::  if (y < -0x7fffffff) {
if::10::63.6183::    return;
if::11::32.9184::  }
if::12::100.7837::  if (y < 0) {
if::13::103.9295::    y0 = -y;
if::14::59.5051::  } else {
if::15::97.2338::    y0 = 0;
if::16::33.3084::  }
if::17::155.7935::  if (y + bitmap->h > h) {
if::18::115.7374::    y1 = h - y;
if::19::61.6601::  } else {
if::20::130.6997::    y1 = bitmap->h;
if::21::35.9939::  }
if::22::131.6487::  if (y0 >= y1) {
if::23::64.5644::    return;
if::24::34.4989::  }
if::25::108.9099::  if (x >= 0) {
if::26::130.6852::    x0 = x & ~7;
if::27::60.4769::  } else {
if::28::94.4146::    x0 = 0;
if::29::35.1427::  }
if::30::137.0864::  x1 = x + bitmap->w;
if::31::111.8958::  if (x1 > w) {
if::32::92.7544::    x1 = w;
if::33::33.0329::  }
if::34::132.3826::  if (x0 >= x1) {
if::35::62.9826::    return;
if::36::35.1763::  }
if::37::102.6363::  s1 = x & 7;
if::38::112.4543::  s2 = 8 - s1;
if::39::232.4574::  m1 = (Guchar)(0xff >> (x1 & 7));
if::40::444.5584::  m2 = (Guchar)(0xff << (((x1 & 7) == 0) ? 0 : 8 - (x1 & 7)));
if::41::266.4411::  m3 = (Guchar)((0xff >> s1) & m2);
if::42::222.1602::  oneByte = x0 == ((x1 - 1) & ~7);
if::43::240.8959::  for (yy = y0; yy < y1; ++yy) {
if::44::222.0075::    // one byte per line -- need to mask both left and right side
if::45::116.7013::    if (oneByte) {
if::46::58.7975::      if (x >= 0) {
if::49::93.7848::	dest = *destPtr;
if::50::104.3647::	src1 = *srcPtr;
if::51::91.1205::	switch (combOp) {
if::52::82.0508::	case 0: // or
if::53::261.6598::	  dest |= (Guchar)((src1 >> s1) & m2);
if::54::50.5115::	  break;
if::55::78.8119::	case 1: // and
if::56::314.0365::	  dest &= (Guchar)(((0xff00 | src1) >> s1) | m1);
if::57::49.2866::	  break;
if::58::80.8874::	case 2: // xor
if::59::246.8478::	  dest ^= (Guchar)((src1 >> s1) & m2);
if::60::47.5701::	  break;
if::61::83.9201::	case 3: // xnor
if::62::299.0044::	  dest ^= (Guchar)(((src1 ^ 0xff) >> s1) & m2);
if::63::47.8530::	  break;
if::64::79.4726::	case 4: // replace
if::65::327.7969::	  dest = (Guchar)((dest & ~m3) | ((src1 >> s1) & m3));
if::66::47.8767::	  break;
if::67::27.9050::	}
if::68::90.0976::	*destPtr = dest;
if::69::84.6079::      } else {
if::70::172.0127::	destPtr = data + (y + yy) * line;
if::71::259.7718::	srcPtr = bitmap->data + yy * bitmap->line + (-x >> 3);
if::72::87.3115::	dest = *destPtr;
if::73::96.6627::	src1 = *srcPtr;
if::74::83.3201::	switch (combOp) {
if::75::75.8560::	case 0: // or
if::76::120.3774::	  dest |= src1 & m2;
if::77::47.3185::	  break;
if::78::76.6244::	case 1: // and
if::79::125.6484::	  dest &= src1 | m1;
if::80::50.4743::	  break;
if::81::85.7925::	case 2: // xor
if::82::126.0598::	  dest ^= src1 & m2;
if::83::48.6272::	  break;
if::84::88.9198::	case 3: // xnor
if::85::196.4710::	  dest ^= (src1 ^ 0xff) & m2;
if::86::49.6463::	  break;
if::87::84.3439::	case 4: // replace
if::88::210.2849::	  dest = (src1 & m2) | (dest & m1);
if::89::51.3059::	  break;
if::90::28.2073::	}
if::91::95.4627::	*destPtr = dest;
if::92::62.2600::      }
if::93::224.4507::    // multiple bytes per line -- need to mask left side of left-most
if::94::165.2495::    // byte and right side of right-most byte
if::95::76.9380::    } else {
if::96::118.7653::      // left-most byte
if::97::98.0259::      if (x >= 0) {
if::101::93.6608::	dest = *destPtr;
if::102::90.4903::	switch (combOp) {
if::103::81.1832::	case 0: // or
if::104::204.9278::	  dest |= (Guchar)(src1 >> s1);
if::105::51.7790::	  break;
if::106::79.5920::	case 1: // and
if::107::267.8373::	  dest &= (Guchar)((0xff00 | src1) >> s1);
if::108::48.0683::	  break;
if::109::85.0709::	case 2: // xor
if::110::187.8336::	  dest ^= (Guchar)(src1 >> s1);
if::111::48.4226::	  break;
if::112::88.0569::	case 3: // xnor
if::113::250.5205::	  dest ^= (Guchar)((src1 ^ 0xff) >> s1);
if::114::47.6149::	  break;
if::115::76.9859::	case 4: // replace
if::116::317.4469::	  dest = (Guchar)((dest & (0xff << s2)) | (src1 >> s1));
if::117::48.5632::	  break;
if::118::26.6102::	}
if::119::101.7565::	*destPtr++ = dest;
if::120::94.6448::	xx = x0 + 8;
if::121::81.9244::      } else {
if::122::170.7246::	destPtr = data + (y + yy) * line;
if::123::261.0486::	srcPtr = bitmap->data + yy * bitmap->line + (-x >> 3);
if::124::99.4955::	src1 = *srcPtr++;
if::125::75.2739::	xx = x0;
if::126::59.9866::      }
if::127::85.5261::      // middle bytes
if::128::224.2104::      for (; xx < x1 - 8; xx += 8) {
if::129::83.8872::	dest = *destPtr;
if::130::82.9267::	src0 = src1;
if::131::99.6713::	src1 = *srcPtr++;
if::132::270.1013::	src = (Guchar)(((src0 << 8) | src1) >> s1);
if::133::87.4441::	switch (combOp) {
if::134::75.8305::	case 0: // or
if::135::81.9224::	  dest |= src;
if::136::48.0081::	  break;
if::137::79.7319::	case 1: // and
if::138::86.6153::	  dest &= src;
if::139::49.6766::	  break;
if::140::88.5779::	case 2: // xor
if::141::87.6363::	  dest ^= src;
if::142::49.3202::	  break;
if::143::91.9766::	case 3: // xnor
if::144::125.8907::	  dest ^= src ^ 0xff;
if::145::50.4973::	  break;
if::146::84.0378::	case 4: // replace
if::147::73.4670::	  dest = src;
if::148::49.0460::	  break;
if::149::28.1944::	}
if::150::110.8844::	*destPtr++ = dest;
if::151::62.0651::      }
if::152::116.9946::      // right-most byte
if::153::139.9664::      // note: this last byte (src1) may not actually be used, depending
if::155::282.7301::      // the edge of the source bitmap, which means we need to allocate
if::156::226.9060::      // one extra guard byte at the end of each bitmap
if::157::140.6973::      dest = *destPtr;
if::158::129.1445::      src0 = src1;
if::159::142.3711::      src1 = *srcPtr++;
if::160::324.1633::      src = (Guchar)(((src0 << 8) | src1) >> s1);
if::161::124.9931::      switch (combOp) {
if::162::119.3041::      case 0: // or
if::163::116.2626::	dest |= src & m2;
if::164::47.8534::	break;
if::165::115.3929::      case 1: // and
if::166::116.8056::	dest &= src | m1;
if::167::47.2900::	break;
if::168::121.7966::      case 2: // xor
if::169::116.7896::	dest ^= src & m2;
if::170::47.6651::	break;
if::171::125.4362::      case 3: // xnor
if::172::179.0397::	dest ^= (src ^ 0xff) & m2;
if::173::48.6174::	break;
if::174::116.5584::      case 4: // replace
if::175::188.6980::	dest = (src & m2) | (dest & m1);
if::176::45.8473::	break;
if::177::60.7615::      }
if::178::121.2832::      *destPtr = dest;
if::179::44.3764::    }
if::180::30.9715::  }
if::181::10.9045::}
if::1::300.2390::void JBIG2Stream::readGenericRegionSeg(Guint segNum, GBool imm,
if::2::183.3419::				       GBool lossless, Guint length) {
if::3::140.2262::  JBIG2Bitmap *bitmap;
if::4::277.1606::  Guint w, h, x, y, segInfoFlags, extCombOp, rowCount;
if::5::202.1149::  Guint flags, mmr, templ, tpgdOn;
if::6::148.9245::  int atx[4], aty[4];
if::7::76.0084::  // region segment info field
if::8::249.1892::  if (!readULong(&w) || !readULong(&h) ||
if::9::252.5490::      !readULong(&x) || !readULong(&y) ||
if::10::178.5477::      !readUByte(&segInfoFlags)) {
if::11::103.5458::    goto eofError;
if::12::32.4407::  }
if::13::146.6821::  if (w == 0 || h == 0) {
if::14::155.5784::    error(errSyntaxError, getPos(),
if::15::184.5417::	  "Bad bitmap size in JBIG2 generic region segment");
if::16::62.7478::    return;
if::17::33.6563::  }
if::18::144.0804::  extCombOp = segInfoFlags & 7;
if::19::117.8501::  // rest of the generic region segment header
if::20::149.6918::  if (!readUByte(&flags)) {
if::21::101.8958::    goto eofError;
if::22::33.9253::  }
if::23::101.6714::  mmr = flags & 1;
if::24::151.0028::  templ = (flags >> 1) & 3;
if::25::170.4480::  tpgdOn = (flags >> 3) & 1;
if::26::58.4114::  // AT flags
if::27::100.0278::  if (!mmr) {
if::28::129.5876::    if (templ == 0) {
if::29::196.6674::      if (!readByte(&atx[0]) ||
if::30::146.8754::	  !readByte(&aty[0]) ||
if::31::152.1016::	  !readByte(&atx[1]) ||
if::32::151.2361::	  !readByte(&aty[1]) ||
if::33::154.8990::	  !readByte(&atx[2]) ||
if::34::151.9938::	  !readByte(&aty[2]) ||
if::35::157.0689::	  !readByte(&atx[3]) ||
if::36::165.0428::	  !readByte(&aty[3])) {
if::37::88.6279::	goto eofError;
if::38::58.9652::      }
if::39::75.1786::    } else {
if::40::208.6219::      if (!readByte(&atx[0]) ||
if::41::167.7930::	  !readByte(&aty[0])) {
if::48::167.1215::    resetGenericStats(templ, NULL);
if::49::137.6836::    arithDecoder->start();
if::50::36.7702::  }
if::51::92.0041::  // read the bitmap
if::52::348.4545::  bitmap = readGenericBitmap(mmr, w, h, templ, tpgdOn, gFalse,
if::53::255.7194::			     NULL, atx, aty, mmr ? length - 18 : 0);
if::54::161.5902::  // combine the region bitmap into the page bitmap
if::55::82.5543::  if (imm) {
if::56::257.8784::    if (pageH == 0xffffffff && y + h > curPageH) {
if::57::230.2294::      pageBitmap->expand(y + h, pageDefPixel);
if::58::47.1346::    }
if::59::254.4421::    pageBitmap->combine(bitmap, x, y, extCombOp);
if::60::87.6480::    delete bitmap;
if::61::96.6443::  // store the region bitmap
if::62::59.5843::  } else {
if::63::162.2919::    bitmap->setSegNum(segNum);
if::64::126.7475::    segments->append(bitmap);
if::65::35.0893::  }
if::66::167.2202::  // immediate generic segments can have an unspecified length, in
if::67::210.9966::  // which case, a row count is stored at the end of the segment
if::68::165.2213::  if (imm && length == 0xffffffff) {
if::69::124.2540::    readULong(&rowCount);
if::70::33.5624::  }
if::71::49.8627::  return;
if::72::59.9627:: eofError:
if::73::261.7478::  error(errSyntaxError, getPos(), "Unexpected EOF in JBIG2 stream");
if::74::10.1769::}
GfxShadingBitBuf::1::338.5060::GfxPatchMeshShading *GfxPatchMeshShading::parse(int typeA, Dict *dict,
GfxShadingBitBuf::2::46.7992::						Stream *str
GfxShadingBitBuf::3::43.2768::						) {
GfxShadingBitBuf::4::148.5913::  GfxPatchMeshShading *shading;
GfxShadingBitBuf::5::178.5169::  Function *funcsA[gfxColorMaxComps];
GfxShadingBitBuf::6::94.2766::  int nFuncsA;
GfxShadingBitBuf::7::177.4279::  int coordBits, compBits, flagBits;
GfxShadingBitBuf::8::169.1455::  double xMin, xMax, yMin, yMax;
GfxShadingBitBuf::9::269.0137::  double cMin[gfxColorMaxComps], cMax[gfxColorMaxComps];
GfxShadingBitBuf::10::120.9103::  double xMul, yMul;
GfxShadingBitBuf::11::158.6873::  double cMul[gfxColorMaxComps];
GfxShadingBitBuf::12::148.3546::  GfxPatch *patchesA, *p;
GfxShadingBitBuf::13::269.9944::  int nCompsA, nPatchesA, patchesSize, nPts, nColors;
GfxShadingBitBuf::14::69.4060::  Guint flag;
GfxShadingBitBuf::15::129.4494::  double x[16], y[16];
GfxShadingBitBuf::16::117.7712::  Guint xi, yi;
GfxShadingBitBuf::17::162.8642::  double c[4][gfxColorMaxComps];
GfxShadingBitBuf::18::83.8414::  Guint ci;
GfxShadingBitBuf::19::164.9016::  GfxShadingBitBuf *bitBuf;
GfxShadingBitBuf::20::101.7925::  Object obj1, obj2;
GfxShadingBitBuf::21::83.6090::  int i, j;
GfxShadingBitBuf::22::289.4389::  if (dict->lookup("BitsPerCoordinate", &obj1)->isInt()) {
GfxShadingBitBuf::23::152.4097::    coordBits = obj1.getInt();
GfxShadingBitBuf::24::57.0061::  } else {
GfxShadingBitBuf::25::152.2048::    error(errSyntaxError, -1,
GfxShadingBitBuf::26::174.0593::	  "Missing or invalid BitsPerCoordinate in shading dictionary");
GfxShadingBitBuf::27::87.7456::    goto err2;
GfxShadingBitBuf::28::32.7435::  }
GfxShadingBitBuf::29::88.3914::  obj1.free();
GfxShadingBitBuf::30::279.8865::  if (dict->lookup("BitsPerComponent", &obj1)->isInt()) {
GfxShadingBitBuf::31::159.3306::    compBits = obj1.getInt();
GfxShadingBitBuf::32::59.0596::  } else {
GfxShadingBitBuf::33::160.0063::    error(errSyntaxError, -1,
GfxShadingBitBuf::34::167.0700::	  "Missing or invalid BitsPerComponent in shading dictionary");
GfxShadingBitBuf::35::93.1067::    goto err2;
GfxShadingBitBuf::36::34.4193::  }
GfxShadingBitBuf::37::90.8365::  obj1.free();
GfxShadingBitBuf::38::284.7194::  if (dict->lookup("BitsPerFlag", &obj1)->isInt()) {
GfxShadingBitBuf::39::163.2878::    flagBits = obj1.getInt();
GfxShadingBitBuf::40::63.6724::  } else {
GfxShadingBitBuf::41::163.7665::    error(errSyntaxError, -1,
GfxShadingBitBuf::42::17.4573::	  "Missing or invalid BitsPerFlag in shading dictionary");
GfxShadingBitBuf::46::283.2005::  if (dict->lookup("Decode", &obj1)->isArray() &&
GfxShadingBitBuf::47::199.6718::      obj1.arrayGetLength() >= 6) {
GfxShadingBitBuf::48::285.8601::    xMin = obj1.arrayGet(0, &obj2)->getNum();
GfxShadingBitBuf::49::108.2754::    obj2.free();
GfxShadingBitBuf::50::276.8952::    xMax = obj1.arrayGet(1, &obj2)->getNum();
GfxShadingBitBuf::51::104.8749::    obj2.free();
GfxShadingBitBuf::52::349.4796::    xMul = (xMax - xMin) / (pow(2.0, coordBits) - 1);
GfxShadingBitBuf::53::265.0375::    yMin = obj1.arrayGet(2, &obj2)->getNum();
GfxShadingBitBuf::54::101.8409::    obj2.free();
GfxShadingBitBuf::55::269.9684::    yMax = obj1.arrayGet(3, &obj2)->getNum();
GfxShadingBitBuf::56::105.4026::    obj2.free();
GfxShadingBitBuf::57::348.9974::    yMul = (yMax - yMin) / (pow(2.0, coordBits) - 1);
GfxShadingBitBuf::58::441.5710::    for (i = 0; 5 + 2*i < obj1.arrayGetLength() && i < gfxColorMaxComps; ++i) {
GfxShadingBitBuf::59::370.8444::      cMin[i] = obj1.arrayGet(4 + 2*i, &obj2)->getNum();
GfxShadingBitBuf::60::117.3529::      obj2.free();
GfxShadingBitBuf::61::370.0145::      cMax[i] = obj1.arrayGet(5 + 2*i, &obj2)->getNum();
GfxShadingBitBuf::62::116.5719::      obj2.free();
GfxShadingBitBuf::63::457.3406::      cMul[i] = (cMax[i] - cMin[i]) / (double)((1 << compBits) - 1);
GfxShadingBitBuf::64::48.7852::    }
GfxShadingBitBuf::65::115.5482::    nCompsA = i;
GfxShadingBitBuf::66::60.3827::  } else {
GfxShadingBitBuf::67::161.0734::    error(errSyntaxError, -1,
GfxShadingBitBuf::68::163.8615::	  "Missing or invalid Decode array in shading dictionary");
GfxShadingBitBuf::69::96.0031::    goto err2;
GfxShadingBitBuf::70::35.3939::  }
GfxShadingBitBuf::71::92.8713::  obj1.free();
GfxShadingBitBuf::72::266.9282::  if (!dict->lookup("Function", &obj1)->isNull()) {
GfxShadingBitBuf::73::154.9832::    if (obj1.isArray()) {
GfxShadingBitBuf::74::206.9627::      nFuncsA = obj1.arrayGetLength();
GfxShadingBitBuf::75::12.5653::      if (nFuncsA > gfxColorMaxComps) {
GfxShadingBitBuf::77::170.4758::	      "Invalid Function array in shading dictionary");
GfxShadingBitBuf::78::87.5421::	goto err1;
GfxShadingBitBuf::79::66.8083::      }
GfxShadingBitBuf::80::278.8825::      for (i = 0; i < nFuncsA; ++i) {
GfxShadingBitBuf::81::171.9761::	obj1.arrayGet(i, &obj2);
GfxShadingBitBuf::82::273.9344::	if (!(funcsA[i] = Function::parse(&obj2))) {
GfxShadingBitBuf::83::95.6588::	  obj1.free();
GfxShadingBitBuf::84::93.4701::	  obj2.free();
GfxShadingBitBuf::85::88.1102::	  goto err1;
GfxShadingBitBuf::86::29.1785::	}
GfxShadingBitBuf::87::85.8483::	obj2.free();
GfxShadingBitBuf::88::62.6139::      }
GfxShadingBitBuf::89::76.0194::    } else {
GfxShadingBitBuf::90::134.2001::      nFuncsA = 1;
GfxShadingBitBuf::91::295.9800::      if (!(funcsA[0] = Function::parse(&obj1))) {
GfxShadingBitBuf::92::84.9960::	obj1.free();
GfxShadingBitBuf::93::79.6128::	goto err1;
GfxShadingBitBuf::94::62.4443::      }
GfxShadingBitBuf::95::50.0919::    }
GfxShadingBitBuf::96::59.3985::  } else {
GfxShadingBitBuf::97::120.9163::    nFuncsA = 0;
GfxShadingBitBuf::98::35.6156::  }
GfxShadingBitBuf::99::94.9304::  obj1.free();
GfxShadingBitBuf::100::106.2201::  nPatchesA = 0;
GfxShadingBitBuf::101::90.0717::  patchesA = NULL;
GfxShadingBitBuf::102::85.3440::  patchesSize = 0;
GfxShadingBitBuf::103::206.9868::  bitBuf = new GfxShadingBitBuf(str);
GfxShadingBitBuf::104::84.7010::  while (1) {
GfxShadingBitBuf::105::276.5182::    if (!bitBuf->getBits(flagBits, &flag)) {
GfxShadingBitBuf::106::78.7381::      break;
GfxShadingBitBuf::107::48.6931::    }
GfxShadingBitBuf::108::133.3809::    if (typeA == 6) {
GfxShadingBitBuf::109::114.5744::      switch (flag) {
GfxShadingBitBuf::110::268.9195::      case 0: nPts = 12; nColors = 4; break;
GfxShadingBitBuf::111::92.0126::      case 1:
GfxShadingBitBuf::112::94.2054::      case 2:
GfxShadingBitBuf::113::96.0042::      case 3:
GfxShadingBitBuf::114::272.6891::      default: nPts =  8; nColors = 2; break;
GfxShadingBitBuf::115::64.4386::      }
GfxShadingBitBuf::116::81.3834::    } else {
GfxShadingBitBuf::117::119.5806::      switch (flag) {
GfxShadingBitBuf::118::282.9745::      case 0: nPts = 16; nColors = 4; break;
GfxShadingBitBuf::119::95.2356::      case 1:
GfxShadingBitBuf::120::93.5513::      case 2:
GfxShadingBitBuf::121::96.2590::      case 3:
GfxShadingBitBuf::122::277.7053::      default: nPts = 12; nColors = 2; break;
GfxShadingBitBuf::123::67.4680::      }
GfxShadingBitBuf::124::49.0889::    }
GfxShadingBitBuf::125::6.4117::    for (i = 0; i < nPts; ++i) {
GfxShadingBitBuf::127::265.3220::	  !bitBuf->getBits(coordBits, &yi)) {
GfxShadingBitBuf::128::52.1580::	break;
GfxShadingBitBuf::129::65.1802::      }
GfxShadingBitBuf::130::276.0619::      x[i] = xMin + xMul * (double)xi;
GfxShadingBitBuf::131::265.5585::      y[i] = yMin + yMul * (double)yi;
GfxShadingBitBuf::132::49.3763::    }
GfxShadingBitBuf::133::145.9108::    if (i < nPts) {
GfxShadingBitBuf::134::80.5071::      break;
GfxShadingBitBuf::135::49.1614::    }
GfxShadingBitBuf::136::242.6669::    for (i = 0; i < nColors; ++i) {
GfxShadingBitBuf::137::253.7168::      for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::138::248.0546::	if (!bitBuf->getBits(compBits, &ci)) {
GfxShadingBitBuf::139::51.7850::	  break;
GfxShadingBitBuf::140::29.3437::	}
GfxShadingBitBuf::141::313.4544::	c[i][j] = cMin[j] + cMul[j] * (double)ci;
GfxShadingBitBuf::142::62.1752::      }
GfxShadingBitBuf::143::166.2230::      if (j < nCompsA) {
GfxShadingBitBuf::144::49.3370::	break;
GfxShadingBitBuf::145::63.5965::      }
GfxShadingBitBuf::146::49.9912::    }
GfxShadingBitBuf::147::144.2272::    if (i < nColors) {
GfxShadingBitBuf::148::80.0255::      break;
GfxShadingBitBuf::149::49.5270::    }
GfxShadingBitBuf::150::172.3149::    if (nPatchesA == patchesSize) {
GfxShadingBitBuf::151::273.6733::      patchesSize = (patchesSize == 0) ? 16 : 2 * patchesSize;
GfxShadingBitBuf::152::259.3065::      patchesA = (GfxPatch *)greallocn(patchesA,
GfxShadingBitBuf::153::193.0073::				       patchesSize, sizeof(GfxPatch));
GfxShadingBitBuf::154::47.9311::    }
GfxShadingBitBuf::155::187.2349::    p = &patchesA[nPatchesA];
GfxShadingBitBuf::156::138.6837::    if (typeA == 6) {
GfxShadingBitBuf::157::116.2589::      switch (flag) {
GfxShadingBitBuf::158::87.8898::      case 0:
GfxShadingBitBuf::159::185.6795::	p->x[0][0] = x[0];
GfxShadingBitBuf::160::185.8865::	p->y[0][0] = y[0];
GfxShadingBitBuf::161::184.6919::	p->x[0][1] = x[1];
GfxShadingBitBuf::162::181.9599::	p->y[0][1] = y[1];
GfxShadingBitBuf::163::179.4651::	p->x[0][2] = x[2];
GfxShadingBitBuf::164::190.4122::	p->y[0][2] = y[2];
GfxShadingBitBuf::165::182.9767::	p->x[0][3] = x[3];
GfxShadingBitBuf::168::183.0148::	p->y[1][3] = y[4];
GfxShadingBitBuf::169::176.9695::	p->x[2][3] = x[5];
GfxShadingBitBuf::170::177.3207::	p->y[2][3] = y[5];
GfxShadingBitBuf::171::177.8365::	p->x[3][3] = x[6];
GfxShadingBitBuf::172::166.7909::	p->y[3][3] = y[6];
GfxShadingBitBuf::173::163.5473::	p->x[3][2] = x[7];
GfxShadingBitBuf::174::158.1707::	p->y[3][2] = y[7];
GfxShadingBitBuf::175::163.9155::	p->x[3][1] = x[8];
GfxShadingBitBuf::176::163.8408::	p->y[3][1] = y[8];
GfxShadingBitBuf::177::162.6500::	p->x[3][0] = x[9];
GfxShadingBitBuf::178::159.6228::	p->y[3][0] = y[9];
GfxShadingBitBuf::179::163.8538::	p->x[2][0] = x[10];
GfxShadingBitBuf::180::165.6451::	p->y[2][0] = y[10];
GfxShadingBitBuf::181::162.4622::	p->x[1][0] = x[11];
GfxShadingBitBuf::182::165.7085::	p->y[1][0] = y[11];
GfxShadingBitBuf::183::209.2036::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::184::224.3320::	  p->color[0][0][j] = c[0][j];
GfxShadingBitBuf::185::220.0714::	  p->color[0][1][j] = c[1][j];
GfxShadingBitBuf::186::221.2750::	  p->color[1][1][j] = c[2][j];
GfxShadingBitBuf::187::214.5674::	  p->color[1][0][j] = c[3][j];
GfxShadingBitBuf::188::26.1273::	}
GfxShadingBitBuf::189::44.5905::	break;
GfxShadingBitBuf::190::80.2253::      case 1:
GfxShadingBitBuf::191::311.6082::	p->x[0][0] = patchesA[nPatchesA-1].x[0][3];
GfxShadingBitBuf::192::320.1685::	p->y[0][0] = patchesA[nPatchesA-1].y[0][3];
GfxShadingBitBuf::193::316.0369::	p->x[0][1] = patchesA[nPatchesA-1].x[1][3];
GfxShadingBitBuf::194::325.8237::	p->y[0][1] = patchesA[nPatchesA-1].y[1][3];
GfxShadingBitBuf::195::308.6467::	p->x[0][2] = patchesA[nPatchesA-1].x[2][3];
GfxShadingBitBuf::196::326.5909::	p->y[0][2] = patchesA[nPatchesA-1].y[2][3];
GfxShadingBitBuf::197::79.9104::	p->x[0][3] = patchesA[nPatchesA-1].x[3][3];
GfxShadingBitBuf::198::331.6559::	p->y[0][3] = patchesA[nPatchesA-1].y[3][3];
GfxShadingBitBuf::199::175.9690::	p->x[1][3] = x[0];
GfxShadingBitBuf::200::179.8002::	p->y[1][3] = y[0];
GfxShadingBitBuf::201::166.6610::	p->x[2][3] = x[1];
GfxShadingBitBuf::202::163.5345::	p->y[2][3] = y[1];
GfxShadingBitBuf::203::159.2831::	p->x[3][3] = x[2];
GfxShadingBitBuf::204::164.2809::	p->y[3][3] = y[2];
GfxShadingBitBuf::205::164.1449::	p->x[3][2] = x[3];
GfxShadingBitBuf::206::160.5544::	p->y[3][2] = y[3];
GfxShadingBitBuf::207::157.5431::	p->x[3][1] = x[4];
GfxShadingBitBuf::208::162.2252::	p->y[3][1] = y[4];
GfxShadingBitBuf::209::165.9588::	p->x[3][0] = x[5];
GfxShadingBitBuf::210::164.1336::	p->y[3][0] = y[5];
GfxShadingBitBuf::211::164.6643::	p->x[2][0] = x[6];
GfxShadingBitBuf::212::170.4707::	p->y[2][0] = y[6];
GfxShadingBitBuf::213::174.6253::	p->x[1][0] = x[7];
GfxShadingBitBuf::214::172.6274::	p->y[1][0] = y[7];
GfxShadingBitBuf::215::204.3657::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::216::365.2386::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[0][1][j];
GfxShadingBitBuf::217::358.5979::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[1][1][j];
GfxShadingBitBuf::218::223.6764::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::219::227.8552::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::220::27.4597::	}
GfxShadingBitBuf::221::40.8086::	break;
GfxShadingBitBuf::222::80.3102::      case 2:
GfxShadingBitBuf::223::323.8715::	p->x[0][0] = patchesA[nPatchesA-1].x[3][3];
GfxShadingBitBuf::224::319.1273::	p->y[0][0] = patchesA[nPatchesA-1].y[3][3];
GfxShadingBitBuf::225::314.7128::	p->x[0][1] = patchesA[nPatchesA-1].x[3][2];
GfxShadingBitBuf::226::269.6223::	p->y[0][1] = patchesA[nPatchesA-1].y[3][2];
GfxShadingBitBuf::227::329.3756::	p->x[0][2] = patchesA[nPatchesA-1].x[3][1];
GfxShadingBitBuf::228::325.4000::	p->y[0][2] = patchesA[nPatchesA-1].y[3][1];
GfxShadingBitBuf::229::306.6963::	p->x[0][3] = patchesA[nPatchesA-1].x[3][0];
GfxShadingBitBuf::230::294.0908::	p->y[0][3] = patchesA[nPatchesA-1].y[3][0];
GfxShadingBitBuf::231::164.2646::	p->x[1][3] = x[0];
GfxShadingBitBuf::232::163.3753::	p->y[1][3] = y[0];
GfxShadingBitBuf::233::158.7311::	p->x[2][3] = x[1];
GfxShadingBitBuf::234::159.6707::	p->y[2][3] = y[1];
GfxShadingBitBuf::235::164.3014::	p->x[3][3] = x[2];
GfxShadingBitBuf::236::163.7327::	p->y[3][3] = y[2];
GfxShadingBitBuf::237::161.8268::	p->x[3][2] = x[3];
GfxShadingBitBuf::238::166.6850::	p->y[3][2] = y[3];
GfxShadingBitBuf::239::171.3860::	p->x[3][1] = x[4];
GfxShadingBitBuf::240::172.5554::	p->y[3][1] = y[4];
GfxShadingBitBuf::241::171.2326::	p->x[3][0] = x[5];
GfxShadingBitBuf::242::168.1887::	p->y[3][0] = y[5];
GfxShadingBitBuf::243::169.6827::	p->x[2][0] = x[6];
GfxShadingBitBuf::244::170.1487::	p->y[2][0] = y[6];
GfxShadingBitBuf::245::167.6541::	p->x[1][0] = x[7];
GfxShadingBitBuf::246::167.2651::	p->y[1][0] = y[7];
GfxShadingBitBuf::247::211.0769::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::248::374.1710::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[1][1][j];
GfxShadingBitBuf::249::377.0700::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[1][0][j];
GfxShadingBitBuf::250::230.8917::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::251::218.9538::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::252::27.7186::	}
GfxShadingBitBuf::253::43.9049::	break;
GfxShadingBitBuf::254::84.9820::      case 3:
GfxShadingBitBuf::255::268.2167::	p->x[0][0] = patchesA[nPatchesA-1].x[3][0];
GfxShadingBitBuf::256::330.1609::	p->y[0][0] = patchesA[nPatchesA-1].y[3][0];
GfxShadingBitBuf::257::322.0969::	p->x[0][1] = patchesA[nPatchesA-1].x[2][0];
GfxShadingBitBuf::258::308.6222::	p->y[0][1] = patchesA[nPatchesA-1].y[2][0];
GfxShadingBitBuf::259::291.7523::	p->x[0][2] = patchesA[nPatchesA-1].x[1][0];
GfxShadingBitBuf::260::299.3844::	p->y[0][2] = patchesA[nPatchesA-1].y[1][0];
GfxShadingBitBuf::261::290.0803::	p->x[0][3] = patchesA[nPatchesA-1].x[0][0];
GfxShadingBitBuf::262::302.0919::	p->y[0][3] = patchesA[nPatchesA-1].y[0][0];
GfxShadingBitBuf::263::162.0269::	p->x[1][3] = x[0];
GfxShadingBitBuf::264::162.2142::	p->y[1][3] = y[0];
GfxShadingBitBuf::265::165.4900::	p->x[2][3] = x[1];
GfxShadingBitBuf::266::173.4039::	p->y[2][3] = y[1];
GfxShadingBitBuf::267::168.7352::	p->x[3][3] = x[2];
GfxShadingBitBuf::268::167.7352::	p->y[3][3] = y[2];
GfxShadingBitBuf::269::166.9236::	p->x[3][2] = x[3];
GfxShadingBitBuf::270::169.7096::	p->y[3][2] = y[3];
GfxShadingBitBuf::271::162.7671::	p->x[3][1] = x[4];
GfxShadingBitBuf::272::166.6062::	p->y[3][1] = y[4];
GfxShadingBitBuf::273::165.6992::	p->x[3][0] = x[5];
GfxShadingBitBuf::274::174.7806::	p->y[3][0] = y[5];
GfxShadingBitBuf::275::174.5901::	p->x[2][0] = x[6];
GfxShadingBitBuf::276::174.3391::	p->y[2][0] = y[6];
GfxShadingBitBuf::277::172.3420::	p->x[1][0] = x[7];
GfxShadingBitBuf::278::178.0331::	p->y[1][0] = y[7];
GfxShadingBitBuf::279::217.7518::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::280::360.7521::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[1][0][j];
GfxShadingBitBuf::281::344.7038::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[0][0][j];
GfxShadingBitBuf::283::237.9714::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::284::28.7845::	}
GfxShadingBitBuf::285::47.4830::	break;
GfxShadingBitBuf::286::59.7566::      }
GfxShadingBitBuf::287::75.1431::    } else {
GfxShadingBitBuf::288::111.1149::      switch (flag) {
GfxShadingBitBuf::289::85.4161::      case 0:
GfxShadingBitBuf::290::166.1670::	p->x[0][0] = x[0];
GfxShadingBitBuf::291::165.5761::	p->y[0][0] = y[0];
GfxShadingBitBuf::292::158.2482::	p->x[0][1] = x[1];
GfxShadingBitBuf::293::165.6584::	p->y[0][1] = y[1];
GfxShadingBitBuf::294::163.1841::	p->x[0][2] = x[2];
GfxShadingBitBuf::295::161.9786::	p->y[0][2] = y[2];
GfxShadingBitBuf::296::159.1509::	p->x[0][3] = x[3];
GfxShadingBitBuf::297::166.2218::	p->y[0][3] = y[3];
GfxShadingBitBuf::298::164.5306::	p->x[1][3] = x[4];
GfxShadingBitBuf::299::162.5522::	p->y[1][3] = y[4];
GfxShadingBitBuf::300::165.5261::	p->x[2][3] = x[5];
GfxShadingBitBuf::301::172.7158::	p->y[2][3] = y[5];
GfxShadingBitBuf::302::174.8839::	p->x[3][3] = x[6];
GfxShadingBitBuf::303::170.5838::	p->y[3][3] = y[6];
GfxShadingBitBuf::304::169.0861::	p->x[3][2] = x[7];
GfxShadingBitBuf::305::170.8030::	p->y[3][2] = y[7];
GfxShadingBitBuf::306::166.1540::	p->x[3][1] = x[8];
GfxShadingBitBuf::307::165.3318::	p->y[3][1] = y[8];
GfxShadingBitBuf::308::166.5279::	p->x[3][0] = x[9];
GfxShadingBitBuf::309::172.0063::	p->y[3][0] = y[9];
GfxShadingBitBuf::310::174.3798::	p->x[2][0] = x[10];
GfxShadingBitBuf::311::175.0802::	p->y[2][0] = y[10];
GfxShadingBitBuf::312::169.5704::	p->x[1][0] = x[11];
GfxShadingBitBuf::313::176.5503::	p->y[1][0] = y[11];
GfxShadingBitBuf::314::180.1748::	p->x[1][1] = x[12];
GfxShadingBitBuf::315::177.2281::	p->y[1][1] = y[12];
GfxShadingBitBuf::316::171.9187::	p->x[1][2] = x[13];
GfxShadingBitBuf::317::171.8439::	p->y[1][2] = y[13];
GfxShadingBitBuf::318::177.9194::	p->x[2][2] = x[14];
GfxShadingBitBuf::319::158.0733::	p->y[2][2] = y[14];
GfxShadingBitBuf::322::232.1315::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::323::232.0338::	  p->color[0][0][j] = c[0][j];
GfxShadingBitBuf::324::231.1494::	  p->color[0][1][j] = c[1][j];
GfxShadingBitBuf::325::215.0154::	  p->color[1][1][j] = c[2][j];
GfxShadingBitBuf::326::209.9621::	  p->color[1][0][j] = c[3][j];
GfxShadingBitBuf::327::26.2579::	}
GfxShadingBitBuf::328::42.7400::	break;
GfxShadingBitBuf::329::78.6579::      case 1:
GfxShadingBitBuf::330::300.3472::	p->x[0][0] = patchesA[nPatchesA-1].x[0][3];
GfxShadingBitBuf::331::293.5169::	p->y[0][0] = patchesA[nPatchesA-1].y[0][3];
GfxShadingBitBuf::332::302.2731::	p->x[0][1] = patchesA[nPatchesA-1].x[1][3];
GfxShadingBitBuf::333::297.3876::	p->y[0][1] = patchesA[nPatchesA-1].y[1][3];
GfxShadingBitBuf::334::313.9727::	p->x[0][2] = patchesA[nPatchesA-1].x[2][3];
GfxShadingBitBuf::335::310.4507::	p->y[0][2] = patchesA[nPatchesA-1].y[2][3];
GfxShadingBitBuf::336::309.7601::	p->x[0][3] = patchesA[nPatchesA-1].x[3][3];
GfxShadingBitBuf::337::302.3289::	p->y[0][3] = patchesA[nPatchesA-1].y[3][3];
GfxShadingBitBuf::338::165.5088::	p->x[1][3] = x[0];
GfxShadingBitBuf::339::170.7751::	p->y[1][3] = y[0];
GfxShadingBitBuf::340::173.4462::	p->x[2][3] = x[1];
GfxShadingBitBuf::341::173.5436::	p->y[2][3] = y[1];
GfxShadingBitBuf::342::169.8491::	p->x[3][3] = x[2];
GfxShadingBitBuf::343::175.6278::	p->y[3][3] = y[2];
GfxShadingBitBuf::344::178.5394::	p->x[3][2] = x[3];
GfxShadingBitBuf::345::178.0143::	p->y[3][2] = y[3];
GfxShadingBitBuf::346::170.6588::	p->x[3][1] = x[4];
GfxShadingBitBuf::347::170.9529::	p->y[3][1] = y[4];
GfxShadingBitBuf::348::178.4279::	p->x[3][0] = x[5];
GfxShadingBitBuf::349::159.6549::	p->y[3][0] = y[5];
GfxShadingBitBuf::351::184.9549::	p->y[2][0] = y[6];
GfxShadingBitBuf::352::178.8247::	p->x[1][0] = x[7];
GfxShadingBitBuf::353::178.7246::	p->y[1][0] = y[7];
GfxShadingBitBuf::354::176.3078::	p->x[1][1] = x[8];
GfxShadingBitBuf::355::167.1798::	p->y[1][1] = y[8];
GfxShadingBitBuf::356::163.1042::	p->x[1][2] = x[9];
GfxShadingBitBuf::357::158.2659::	p->y[1][2] = y[9];
GfxShadingBitBuf::358::162.6451::	p->x[2][2] = x[10];
GfxShadingBitBuf::359::164.8820::	p->y[2][2] = y[10];
GfxShadingBitBuf::360::161.5405::	p->x[2][1] = x[11];
GfxShadingBitBuf::361::159.5249::	p->y[2][1] = y[11];
GfxShadingBitBuf::362::204.9584::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::363::350.9236::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[0][1][j];
GfxShadingBitBuf::364::366.8031::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[1][1][j];
GfxShadingBitBuf::365::223.2537::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::366::217.3044::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::367::26.2417::	}
GfxShadingBitBuf::368::43.0195::	break;
GfxShadingBitBuf::369::80.3606::      case 2:
GfxShadingBitBuf::370::305.0621::	p->x[0][0] = patchesA[nPatchesA-1].x[3][3];
GfxShadingBitBuf::371::307.5359::	p->y[0][0] = patchesA[nPatchesA-1].y[3][3];
GfxShadingBitBuf::372::319.8281::	p->x[0][1] = patchesA[nPatchesA-1].x[3][2];
GfxShadingBitBuf::373::313.4554::	p->y[0][1] = patchesA[nPatchesA-1].y[3][2];
GfxShadingBitBuf::374::322.2445::	p->x[0][2] = patchesA[nPatchesA-1].x[3][1];
GfxShadingBitBuf::375::313.4367::	p->y[0][2] = patchesA[nPatchesA-1].y[3][1];
GfxShadingBitBuf::376::323.0961::	p->x[0][3] = patchesA[nPatchesA-1].x[3][0];
GfxShadingBitBuf::377::193.7233::	p->y[0][3] = patchesA[nPatchesA-1].y[3][0];
GfxShadingBitBuf::379::183.1456::	p->y[1][3] = y[0];
GfxShadingBitBuf::380::177.2291::	p->x[2][3] = x[1];
GfxShadingBitBuf::381::177.1057::	p->y[2][3] = y[1];
GfxShadingBitBuf::382::175.8381::	p->x[3][3] = x[2];
GfxShadingBitBuf::383::165.1085::	p->y[3][3] = y[2];
GfxShadingBitBuf::384::161.5589::	p->x[3][2] = x[3];
GfxShadingBitBuf::385::157.9185::	p->y[3][2] = y[3];
GfxShadingBitBuf::386::162.6172::	p->x[3][1] = x[4];
GfxShadingBitBuf::387::163.3358::	p->y[3][1] = y[4];
GfxShadingBitBuf::388::162.3925::	p->x[3][0] = x[5];
GfxShadingBitBuf::389::158.7083::	p->y[3][0] = y[5];
GfxShadingBitBuf::390::163.8381::	p->x[2][0] = x[6];
GfxShadingBitBuf::391::165.3546::	p->y[2][0] = y[6];
GfxShadingBitBuf::392::162.8941::	p->x[1][0] = x[7];
GfxShadingBitBuf::393::164.7503::	p->y[1][0] = y[7];
GfxShadingBitBuf::394::170.4071::	p->x[1][1] = x[8];
GfxShadingBitBuf::395::174.3437::	p->y[1][1] = y[8];
GfxShadingBitBuf::396::168.2545::	p->x[1][2] = x[9];
GfxShadingBitBuf::397::168.4817::	p->y[1][2] = y[9];
GfxShadingBitBuf::398::168.6602::	p->x[2][2] = x[10];
GfxShadingBitBuf::399::168.6462::	p->y[2][2] = y[10];
GfxShadingBitBuf::400::165.6688::	p->x[2][1] = x[11];
GfxShadingBitBuf::401::168.3887::	p->y[2][1] = y[11];
GfxShadingBitBuf::402::208.7608::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::403::371.8193::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[1][1][j];
GfxShadingBitBuf::404::373.4194::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[1][0][j];
GfxShadingBitBuf::405::231.4877::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::406::218.8296::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::407::25.9709::	}
GfxShadingBitBuf::408::44.8967::	break;
GfxShadingBitBuf::409::84.5562::      case 3:
GfxShadingBitBuf::410::306.8939::	p->x[0][0] = patchesA[nPatchesA-1].x[3][0];
GfxShadingBitBuf::412::325.3486::	p->x[0][1] = patchesA[nPatchesA-1].x[2][0];
GfxShadingBitBuf::413::321.8403::	p->y[0][1] = patchesA[nPatchesA-1].y[2][0];
GfxShadingBitBuf::414::303.5938::	p->x[0][2] = patchesA[nPatchesA-1].x[1][0];
GfxShadingBitBuf::415::291.8268::	p->y[0][2] = patchesA[nPatchesA-1].y[1][0];
GfxShadingBitBuf::416::297.7865::	p->x[0][3] = patchesA[nPatchesA-1].x[0][0];
GfxShadingBitBuf::417::288.5141::	p->y[0][3] = patchesA[nPatchesA-1].y[0][0];
GfxShadingBitBuf::418::160.9936::	p->x[1][3] = x[0];
GfxShadingBitBuf::419::165.6449::	p->y[1][3] = y[0];
GfxShadingBitBuf::420::160.7781::	p->x[2][3] = x[1];
GfxShadingBitBuf::421::162.9551::	p->y[2][3] = y[1];
GfxShadingBitBuf::422::168.1469::	p->x[3][3] = x[2];
GfxShadingBitBuf::423::174.2694::	p->y[3][3] = y[2];
GfxShadingBitBuf::424::166.9547::	p->x[3][2] = x[3];
GfxShadingBitBuf::425::167.8758::	p->y[3][2] = y[3];
GfxShadingBitBuf::426::165.7458::	p->x[3][1] = x[4];
GfxShadingBitBuf::427::168.5396::	p->y[3][1] = y[4];
GfxShadingBitBuf::428::162.2363::	p->x[3][0] = x[5];
GfxShadingBitBuf::429::167.3097::	p->y[3][0] = y[5];
GfxShadingBitBuf::430::166.2034::	p->x[2][0] = x[6];
GfxShadingBitBuf::431::174.7927::	p->y[2][0] = y[6];
GfxShadingBitBuf::432::173.8037::	p->x[1][0] = x[7];
GfxShadingBitBuf::433::172.1299::	p->y[1][0] = y[7];
GfxShadingBitBuf::434::171.9259::	p->x[1][1] = x[8];
GfxShadingBitBuf::435::177.2741::	p->y[1][1] = y[8];
GfxShadingBitBuf::436::176.1566::	p->x[1][2] = x[9];
GfxShadingBitBuf::437::172.7158::	p->y[1][2] = y[9];
GfxShadingBitBuf::438::166.7403::	p->x[2][2] = x[10];
GfxShadingBitBuf::439::177.8249::	p->y[2][2] = y[10];
GfxShadingBitBuf::440::173.0554::	p->x[2][1] = x[11];
GfxShadingBitBuf::441::22.1863::	p->y[2][1] = y[11];
GfxShadingBitBuf::443::417.4677::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[1][0][j];
GfxShadingBitBuf::444::402.4413::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[0][0][j];
GfxShadingBitBuf::445::226.8279::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::446::221.1538::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::447::28.8740::	}
GfxShadingBitBuf::448::47.7612::	break;
GfxShadingBitBuf::449::59.7015::      }
GfxShadingBitBuf::450::46.8939::    }
GfxShadingBitBuf::451::112.1825::    ++nPatchesA;
GfxShadingBitBuf::452::133.8216::    bitBuf->flushBits();
GfxShadingBitBuf::453::32.6136::  }
GfxShadingBitBuf::454::80.5189::  delete bitBuf;
GfxShadingBitBuf::455::115.9060::  if (typeA == 6) {
GfxShadingBitBuf::456::244.1127::    for (i = 0; i < nPatchesA; ++i) {
GfxShadingBitBuf::457::158.6124::      p = &patchesA[i];
GfxShadingBitBuf::458::288.1533::      p->x[1][1] = (-4 * p->x[0][0]
GfxShadingBitBuf::459::299.7319::		    +6 * (p->x[0][1] + p->x[1][0])
GfxShadingBitBuf::460::292.5667::		    -2 * (p->x[0][3] + p->x[3][0])
GfxShadingBitBuf::461::294.2957::		    +3 * (p->x[3][1] + p->x[1][3])
GfxShadingBitBuf::462::183.1496::		    - p->x[3][3]) / 9;
GfxShadingBitBuf::463::295.4163::      p->y[1][1] = (-4 * p->y[0][0]
GfxShadingBitBuf::464::302.6821::		    +6 * (p->y[0][1] + p->y[1][0])
GfxShadingBitBuf::465::298.3778::		    -2 * (p->y[0][3] + p->y[3][0])
GfxShadingBitBuf::466::310.2214::		    +3 * (p->y[3][1] + p->y[1][3])
GfxShadingBitBuf::467::196.9683::		    - p->y[3][3]) / 9;
GfxShadingBitBuf::468::298.0430::      p->x[1][2] = (-4 * p->x[0][3]
GfxShadingBitBuf::469::309.5244::		    +6 * (p->x[0][2] + p->x[1][3])
GfxShadingBitBuf::470::30.4624::		    -2 * (p->x[0][0] + p->x[3][3])
GfxShadingBitBuf::471::319.8484::		    +3 * (p->x[3][2] + p->x[1][0])
GfxShadingBitBuf::472::204.6521::		    - p->x[3][0]) / 9;
GfxShadingBitBuf::473::305.2955::      p->y[1][2] = (-4 * p->y[0][3]
GfxShadingBitBuf::474::286.9033::		    +6 * (p->y[0][2] + p->y[1][3])
GfxShadingBitBuf::475::288.4961::		    -2 * (p->y[0][0] + p->y[3][3])
GfxShadingBitBuf::476::282.2757::		    +3 * (p->y[3][2] + p->y[1][0])
GfxShadingBitBuf::477::183.6124::		    - p->y[3][0]) / 9;
GfxShadingBitBuf::478::296.2434::      p->x[2][1] = (-4 * p->x[3][0]
GfxShadingBitBuf::479::289.0898::		    +6 * (p->x[3][1] + p->x[2][0])
GfxShadingBitBuf::480::303.1844::		    -2 * (p->x[3][3] + p->x[0][0])
GfxShadingBitBuf::481::297.5922::		    +3 * (p->x[0][1] + p->x[2][3])
GfxShadingBitBuf::482::188.2710::		    - p->x[0][3]) / 9;
GfxShadingBitBuf::483::295.7322::      p->y[2][1] = (-4 * p->y[3][0]
GfxShadingBitBuf::484::293.3814::		    +6 * (p->y[3][1] + p->y[2][0])
GfxShadingBitBuf::485::304.2578::		    -2 * (p->y[3][3] + p->y[0][0])
GfxShadingBitBuf::486::302.9737::		    +3 * (p->y[0][1] + p->y[2][3])
GfxShadingBitBuf::487::198.5742::		    - p->y[0][3]) / 9;
GfxShadingBitBuf::488::313.1565::      p->x[2][2] = (-4 * p->x[3][3]
GfxShadingBitBuf::489::298.4239::		    +6 * (p->x[3][2] + p->x[2][3])
GfxShadingBitBuf::490::309.8814::		    -2 * (p->x[3][0] + p->x[0][3])
GfxShadingBitBuf::491::77.2028::		    +3 * (p->x[0][2] + p->x[2][0])
GfxShadingBitBuf::492::210.0257::		    - p->x[0][0]) / 9;
GfxShadingBitBuf::493::319.1115::      p->y[2][2] = (-4 * p->y[3][3]
GfxShadingBitBuf::494::300.8808::		    +6 * (p->y[3][2] + p->y[2][3])
GfxShadingBitBuf::495::287.7582::		    -2 * (p->y[3][0] + p->y[0][3])
GfxShadingBitBuf::496::285.8767::		    +3 * (p->y[0][2] + p->y[2][0])
GfxShadingBitBuf::497::183.9391::		    - p->y[0][0]) / 9;
GfxShadingBitBuf::498::46.5774::    }
GfxShadingBitBuf::499::33.5539::  }
GfxShadingBitBuf::500::271.5487::  shading = new GfxPatchMeshShading(typeA, patchesA, nPatchesA,
GfxShadingBitBuf::501::201.6143::				    nCompsA, funcsA, nFuncsA);
GfxShadingBitBuf::502::126.7201::  if (!shading->init(dict
GfxShadingBitBuf::503::69.3967::		     )) {
GfxShadingBitBuf::504::75.5145::    delete shading;
GfxShadingBitBuf::505::75.5986::    return NULL;
GfxShadingBitBuf::506::33.4694::  }
GfxShadingBitBuf::507::63.4491::  return shading;
GfxShadingBitBuf::508::49.3065:: err2:
GfxShadingBitBuf::509::83.6748::  obj1.free();
GfxShadingBitBuf::510::47.1659:: err1:
GfxShadingBitBuf::511::58.7147::  return NULL;
GfxShadingBitBuf::512::10.3903::}
if::1::160.3842::void JPXStream::fillReadBuf() {
if::2::135.5591::  JPXTileComp *tileComp;
if::3::159.4304::  Guint tileIdx, tx, ty;
if::4::161.8203::  int pix, pixBits, k;
if::5::87.1406::  GBool eol;
if::6::48.3051::  do {
if::7::212.8632::    if (curY >= (img.ySize >> reduction)) {
if::8::80.0424::      return;
if::9::48.7059::    }
if::10::389.8044::    tileIdx = ((curY - img.yTileOffsetR) / img.yTileSizeR) * img.nXTiles
if::11::339.9223::              + (curX - img.xTileOffsetR) / img.xTileSizeR;
if::12::219.8361::#if 1 //~ ignore the palette, assume the PDF ColorSpace object is valid
if::13::273.3243::    tileComp = &img.tiles[tileIdx].tileComps[curComp];
if::14::41.5567::#else
if::15::345.1475::    tileComp = &img.tiles[tileIdx].tileComps[havePalette ? 0 : curComp];
if::16::48.0748::#endif
if::17::260.7439::    //~ can curX/curY be less than x/yTileOffsetR?
if::18::260.3970::    //~ if yes, we need to use tx = max(0, ....)
if::19::348.4457::    tx = jpxFloorDiv((curX - img.xTileOffsetR) % img.xTileSizeR,
if::20::119.3586::		     tileComp->hSep);
if::21::361.2415::    ty = jpxFloorDiv((curY - img.yTileOffsetR) % img.yTileSizeR,
if::22::118.4544::		     tileComp->vSep);
if::23::278.5035::    pix = (int)tileComp->data[ty * tileComp->w + tx];
if::24::168.6171::    pixBits = tileComp->prec;
if::25::108.4715::    eol = gFalse;
if::26::228.1469::#if 1 //~ ignore the palette, assume the PDF ColorSpace object is valid
if::27::205.2912::    if (++curComp == img.nComps) {
if::28::45.5617::#else
if::29::128.1204::    if (havePalette) {
if::30::260.8981::      if (pix >= 0 && pix < palette.nEntries) {
if::31::255.0328::	pix = palette.c[pix * palette.nComps + curComp];
if::32::32.0972::      } else {
if::35::236.2597::      pixBits = palette.bpc[curComp];
if::36::53.2979::    }
if::37::407.4935::    if (++curComp == (Guint)(havePalette ? palette.nComps : img.nComps)) {
if::38::56.5746::#endif
if::39::118.2036::      curComp = 0;
if::40::249.5029::      if (++curX == (img.xSize >> reduction)) {
if::41::128.1030::	curX = img.xOffsetR;
if::42::73.3373::	++curY;
if::43::95.7358::	eol = gTrue;
if::44::64.4330::      }
if::45::50.7133::    }
if::46::159.3563::    if (pixBits == 8) {
if::47::284.5100::      readBuf = (readBuf << 8) | (pix & 0xff);
if::48::75.0446::    } else {
if::49::418.3277::      readBuf = (readBuf << pixBits) | (pix & ((1 << pixBits) - 1));
if::50::50.5412::    }
if::51::161.9032::    readBufLen += pixBits;
if::52::232.7638::    if (eol && (k = readBufLen & 7)) {
if::53::163.5013::      readBuf <<= 8 - k;
if::54::160.7550::      readBufLen += 8 - k;
if::55::47.0053::    }
if::56::131.4813::  } while (readBufLen < 8);
if::57::10.6865::}
GfxShadingBitBuf::1::338.5060::GfxPatchMeshShading *GfxPatchMeshShading::parse(int typeA, Dict *dict,
GfxShadingBitBuf::2::46.7992::						Stream *str
GfxShadingBitBuf::3::43.2768::						) {
GfxShadingBitBuf::4::148.5913::  GfxPatchMeshShading *shading;
GfxShadingBitBuf::5::178.5169::  Function *funcsA[gfxColorMaxComps];
GfxShadingBitBuf::6::94.2766::  int nFuncsA;
GfxShadingBitBuf::7::177.4279::  int coordBits, compBits, flagBits;
GfxShadingBitBuf::8::169.1455::  double xMin, xMax, yMin, yMax;
GfxShadingBitBuf::9::269.0137::  double cMin[gfxColorMaxComps], cMax[gfxColorMaxComps];
GfxShadingBitBuf::10::120.9103::  double xMul, yMul;
GfxShadingBitBuf::11::158.6873::  double cMul[gfxColorMaxComps];
GfxShadingBitBuf::12::148.3546::  GfxPatch *patchesA, *p;
GfxShadingBitBuf::13::269.9944::  int nCompsA, nPatchesA, patchesSize, nPts, nColors;
GfxShadingBitBuf::14::69.4060::  Guint flag;
GfxShadingBitBuf::15::129.4494::  double x[16], y[16];
GfxShadingBitBuf::16::117.7712::  Guint xi, yi;
GfxShadingBitBuf::17::162.8642::  double c[4][gfxColorMaxComps];
GfxShadingBitBuf::18::83.8414::  Guint ci;
GfxShadingBitBuf::19::164.9016::  GfxShadingBitBuf *bitBuf;
GfxShadingBitBuf::20::101.7925::  Object obj1, obj2;
GfxShadingBitBuf::21::83.6090::  int i, j;
GfxShadingBitBuf::22::289.4389::  if (dict->lookup("BitsPerCoordinate", &obj1)->isInt()) {
GfxShadingBitBuf::23::152.4097::    coordBits = obj1.getInt();
GfxShadingBitBuf::24::57.0061::  } else {
GfxShadingBitBuf::25::152.2048::    error(errSyntaxError, -1,
GfxShadingBitBuf::26::174.0593::	  "Missing or invalid BitsPerCoordinate in shading dictionary");
GfxShadingBitBuf::27::87.7456::    goto err2;
GfxShadingBitBuf::28::32.7435::  }
GfxShadingBitBuf::29::88.3914::  obj1.free();
GfxShadingBitBuf::30::279.8865::  if (dict->lookup("BitsPerComponent", &obj1)->isInt()) {
GfxShadingBitBuf::31::159.3306::    compBits = obj1.getInt();
GfxShadingBitBuf::32::59.0596::  } else {
GfxShadingBitBuf::33::160.0063::    error(errSyntaxError, -1,
GfxShadingBitBuf::34::167.0700::	  "Missing or invalid BitsPerComponent in shading dictionary");
GfxShadingBitBuf::35::93.1067::    goto err2;
GfxShadingBitBuf::36::34.4193::  }
GfxShadingBitBuf::37::90.8365::  obj1.free();
GfxShadingBitBuf::38::284.7194::  if (dict->lookup("BitsPerFlag", &obj1)->isInt()) {
GfxShadingBitBuf::39::163.2878::    flagBits = obj1.getInt();
GfxShadingBitBuf::40::63.6724::  } else {
GfxShadingBitBuf::41::163.7665::    error(errSyntaxError, -1,
GfxShadingBitBuf::42::17.4573::	  "Missing or invalid BitsPerFlag in shading dictionary");
GfxShadingBitBuf::46::283.2005::  if (dict->lookup("Decode", &obj1)->isArray() &&
GfxShadingBitBuf::47::199.6718::      obj1.arrayGetLength() >= 6) {
GfxShadingBitBuf::48::285.8601::    xMin = obj1.arrayGet(0, &obj2)->getNum();
GfxShadingBitBuf::49::108.2754::    obj2.free();
GfxShadingBitBuf::50::276.8952::    xMax = obj1.arrayGet(1, &obj2)->getNum();
GfxShadingBitBuf::51::104.8749::    obj2.free();
GfxShadingBitBuf::52::349.4796::    xMul = (xMax - xMin) / (pow(2.0, coordBits) - 1);
GfxShadingBitBuf::53::265.0375::    yMin = obj1.arrayGet(2, &obj2)->getNum();
GfxShadingBitBuf::54::101.8409::    obj2.free();
GfxShadingBitBuf::55::269.9684::    yMax = obj1.arrayGet(3, &obj2)->getNum();
GfxShadingBitBuf::56::105.4026::    obj2.free();
GfxShadingBitBuf::57::348.9974::    yMul = (yMax - yMin) / (pow(2.0, coordBits) - 1);
GfxShadingBitBuf::58::441.5710::    for (i = 0; 5 + 2*i < obj1.arrayGetLength() && i < gfxColorMaxComps; ++i) {
GfxShadingBitBuf::59::370.8444::      cMin[i] = obj1.arrayGet(4 + 2*i, &obj2)->getNum();
GfxShadingBitBuf::60::117.3529::      obj2.free();
GfxShadingBitBuf::61::370.0145::      cMax[i] = obj1.arrayGet(5 + 2*i, &obj2)->getNum();
GfxShadingBitBuf::62::116.5719::      obj2.free();
GfxShadingBitBuf::63::457.3406::      cMul[i] = (cMax[i] - cMin[i]) / (double)((1 << compBits) - 1);
GfxShadingBitBuf::64::48.7852::    }
GfxShadingBitBuf::65::115.5482::    nCompsA = i;
GfxShadingBitBuf::66::60.3827::  } else {
GfxShadingBitBuf::67::161.0734::    error(errSyntaxError, -1,
GfxShadingBitBuf::68::163.8615::	  "Missing or invalid Decode array in shading dictionary");
GfxShadingBitBuf::69::96.0031::    goto err2;
GfxShadingBitBuf::70::35.3939::  }
GfxShadingBitBuf::71::92.8713::  obj1.free();
GfxShadingBitBuf::72::266.9282::  if (!dict->lookup("Function", &obj1)->isNull()) {
GfxShadingBitBuf::73::154.9832::    if (obj1.isArray()) {
GfxShadingBitBuf::74::206.9627::      nFuncsA = obj1.arrayGetLength();
GfxShadingBitBuf::75::12.5653::      if (nFuncsA > gfxColorMaxComps) {
GfxShadingBitBuf::77::170.4758::	      "Invalid Function array in shading dictionary");
GfxShadingBitBuf::78::87.5421::	goto err1;
GfxShadingBitBuf::79::66.8083::      }
GfxShadingBitBuf::80::278.8825::      for (i = 0; i < nFuncsA; ++i) {
GfxShadingBitBuf::81::171.9761::	obj1.arrayGet(i, &obj2);
GfxShadingBitBuf::82::273.9344::	if (!(funcsA[i] = Function::parse(&obj2))) {
GfxShadingBitBuf::83::95.6588::	  obj1.free();
GfxShadingBitBuf::84::93.4701::	  obj2.free();
GfxShadingBitBuf::85::88.1102::	  goto err1;
GfxShadingBitBuf::86::29.1785::	}
GfxShadingBitBuf::87::85.8483::	obj2.free();
GfxShadingBitBuf::88::62.6139::      }
GfxShadingBitBuf::89::76.0194::    } else {
GfxShadingBitBuf::90::134.2001::      nFuncsA = 1;
GfxShadingBitBuf::91::295.9800::      if (!(funcsA[0] = Function::parse(&obj1))) {
GfxShadingBitBuf::92::84.9960::	obj1.free();
GfxShadingBitBuf::93::79.6128::	goto err1;
GfxShadingBitBuf::94::62.4443::      }
GfxShadingBitBuf::95::50.0919::    }
GfxShadingBitBuf::96::59.3985::  } else {
GfxShadingBitBuf::97::120.9163::    nFuncsA = 0;
GfxShadingBitBuf::98::35.6156::  }
GfxShadingBitBuf::99::94.9304::  obj1.free();
GfxShadingBitBuf::100::106.2201::  nPatchesA = 0;
GfxShadingBitBuf::101::90.0717::  patchesA = NULL;
GfxShadingBitBuf::102::85.3440::  patchesSize = 0;
GfxShadingBitBuf::103::206.9868::  bitBuf = new GfxShadingBitBuf(str);
GfxShadingBitBuf::104::84.7010::  while (1) {
GfxShadingBitBuf::105::276.5182::    if (!bitBuf->getBits(flagBits, &flag)) {
GfxShadingBitBuf::106::78.7381::      break;
GfxShadingBitBuf::107::48.6931::    }
GfxShadingBitBuf::108::133.3809::    if (typeA == 6) {
GfxShadingBitBuf::109::114.5744::      switch (flag) {
GfxShadingBitBuf::110::268.9195::      case 0: nPts = 12; nColors = 4; break;
GfxShadingBitBuf::111::92.0126::      case 1:
GfxShadingBitBuf::112::94.2054::      case 2:
GfxShadingBitBuf::113::96.0042::      case 3:
GfxShadingBitBuf::114::272.6891::      default: nPts =  8; nColors = 2; break;
GfxShadingBitBuf::115::64.4386::      }
GfxShadingBitBuf::116::81.3834::    } else {
GfxShadingBitBuf::117::119.5806::      switch (flag) {
GfxShadingBitBuf::118::282.9745::      case 0: nPts = 16; nColors = 4; break;
GfxShadingBitBuf::119::95.2356::      case 1:
GfxShadingBitBuf::120::93.5513::      case 2:
GfxShadingBitBuf::121::96.2590::      case 3:
GfxShadingBitBuf::122::277.7053::      default: nPts = 12; nColors = 2; break;
GfxShadingBitBuf::123::67.4680::      }
GfxShadingBitBuf::124::49.0889::    }
GfxShadingBitBuf::125::6.4117::    for (i = 0; i < nPts; ++i) {
GfxShadingBitBuf::127::265.3220::	  !bitBuf->getBits(coordBits, &yi)) {
GfxShadingBitBuf::128::52.1580::	break;
GfxShadingBitBuf::129::65.1802::      }
GfxShadingBitBuf::130::276.0619::      x[i] = xMin + xMul * (double)xi;
GfxShadingBitBuf::131::265.5585::      y[i] = yMin + yMul * (double)yi;
GfxShadingBitBuf::132::49.3763::    }
GfxShadingBitBuf::133::145.9108::    if (i < nPts) {
GfxShadingBitBuf::134::80.5071::      break;
GfxShadingBitBuf::135::49.1614::    }
GfxShadingBitBuf::136::242.6669::    for (i = 0; i < nColors; ++i) {
GfxShadingBitBuf::137::253.7168::      for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::138::248.0546::	if (!bitBuf->getBits(compBits, &ci)) {
GfxShadingBitBuf::139::51.7850::	  break;
GfxShadingBitBuf::140::29.3437::	}
GfxShadingBitBuf::141::313.4544::	c[i][j] = cMin[j] + cMul[j] * (double)ci;
GfxShadingBitBuf::142::62.1752::      }
GfxShadingBitBuf::143::166.2230::      if (j < nCompsA) {
GfxShadingBitBuf::144::49.3370::	break;
GfxShadingBitBuf::145::63.5965::      }
GfxShadingBitBuf::146::49.9912::    }
GfxShadingBitBuf::147::144.2272::    if (i < nColors) {
GfxShadingBitBuf::148::80.0255::      break;
GfxShadingBitBuf::149::49.5270::    }
GfxShadingBitBuf::150::172.3149::    if (nPatchesA == patchesSize) {
GfxShadingBitBuf::151::273.6733::      patchesSize = (patchesSize == 0) ? 16 : 2 * patchesSize;
GfxShadingBitBuf::152::259.3065::      patchesA = (GfxPatch *)greallocn(patchesA,
GfxShadingBitBuf::153::193.0073::				       patchesSize, sizeof(GfxPatch));
GfxShadingBitBuf::154::47.9311::    }
GfxShadingBitBuf::155::187.2349::    p = &patchesA[nPatchesA];
GfxShadingBitBuf::156::138.6837::    if (typeA == 6) {
GfxShadingBitBuf::157::116.2589::      switch (flag) {
GfxShadingBitBuf::158::87.8898::      case 0:
GfxShadingBitBuf::159::185.6795::	p->x[0][0] = x[0];
GfxShadingBitBuf::160::185.8865::	p->y[0][0] = y[0];
GfxShadingBitBuf::161::184.6919::	p->x[0][1] = x[1];
GfxShadingBitBuf::162::181.9599::	p->y[0][1] = y[1];
GfxShadingBitBuf::163::179.4651::	p->x[0][2] = x[2];
GfxShadingBitBuf::164::190.4122::	p->y[0][2] = y[2];
GfxShadingBitBuf::165::182.9767::	p->x[0][3] = x[3];
GfxShadingBitBuf::168::183.0148::	p->y[1][3] = y[4];
GfxShadingBitBuf::169::176.9695::	p->x[2][3] = x[5];
GfxShadingBitBuf::170::177.3207::	p->y[2][3] = y[5];
GfxShadingBitBuf::171::177.8365::	p->x[3][3] = x[6];
GfxShadingBitBuf::172::166.7909::	p->y[3][3] = y[6];
GfxShadingBitBuf::173::163.5473::	p->x[3][2] = x[7];
GfxShadingBitBuf::174::158.1707::	p->y[3][2] = y[7];
GfxShadingBitBuf::175::163.9155::	p->x[3][1] = x[8];
GfxShadingBitBuf::176::163.8408::	p->y[3][1] = y[8];
GfxShadingBitBuf::177::162.6500::	p->x[3][0] = x[9];
GfxShadingBitBuf::178::159.6228::	p->y[3][0] = y[9];
GfxShadingBitBuf::179::163.8538::	p->x[2][0] = x[10];
GfxShadingBitBuf::180::165.6451::	p->y[2][0] = y[10];
GfxShadingBitBuf::181::162.4622::	p->x[1][0] = x[11];
GfxShadingBitBuf::182::165.7085::	p->y[1][0] = y[11];
GfxShadingBitBuf::183::209.2036::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::184::224.3320::	  p->color[0][0][j] = c[0][j];
GfxShadingBitBuf::185::220.0714::	  p->color[0][1][j] = c[1][j];
GfxShadingBitBuf::186::221.2750::	  p->color[1][1][j] = c[2][j];
GfxShadingBitBuf::187::214.5674::	  p->color[1][0][j] = c[3][j];
GfxShadingBitBuf::188::26.1273::	}
GfxShadingBitBuf::189::44.5905::	break;
GfxShadingBitBuf::190::80.2253::      case 1:
GfxShadingBitBuf::191::311.6082::	p->x[0][0] = patchesA[nPatchesA-1].x[0][3];
GfxShadingBitBuf::192::320.1685::	p->y[0][0] = patchesA[nPatchesA-1].y[0][3];
GfxShadingBitBuf::193::316.0369::	p->x[0][1] = patchesA[nPatchesA-1].x[1][3];
GfxShadingBitBuf::194::325.8237::	p->y[0][1] = patchesA[nPatchesA-1].y[1][3];
GfxShadingBitBuf::195::308.6467::	p->x[0][2] = patchesA[nPatchesA-1].x[2][3];
GfxShadingBitBuf::196::326.5909::	p->y[0][2] = patchesA[nPatchesA-1].y[2][3];
GfxShadingBitBuf::197::79.9104::	p->x[0][3] = patchesA[nPatchesA-1].x[3][3];
GfxShadingBitBuf::198::331.6559::	p->y[0][3] = patchesA[nPatchesA-1].y[3][3];
GfxShadingBitBuf::199::175.9690::	p->x[1][3] = x[0];
GfxShadingBitBuf::200::179.8002::	p->y[1][3] = y[0];
GfxShadingBitBuf::201::166.6610::	p->x[2][3] = x[1];
GfxShadingBitBuf::202::163.5345::	p->y[2][3] = y[1];
GfxShadingBitBuf::203::159.2831::	p->x[3][3] = x[2];
GfxShadingBitBuf::204::164.2809::	p->y[3][3] = y[2];
GfxShadingBitBuf::205::164.1449::	p->x[3][2] = x[3];
GfxShadingBitBuf::206::160.5544::	p->y[3][2] = y[3];
GfxShadingBitBuf::207::157.5431::	p->x[3][1] = x[4];
GfxShadingBitBuf::208::162.2252::	p->y[3][1] = y[4];
GfxShadingBitBuf::209::165.9588::	p->x[3][0] = x[5];
GfxShadingBitBuf::210::164.1336::	p->y[3][0] = y[5];
GfxShadingBitBuf::211::164.6643::	p->x[2][0] = x[6];
GfxShadingBitBuf::212::170.4707::	p->y[2][0] = y[6];
GfxShadingBitBuf::213::174.6253::	p->x[1][0] = x[7];
GfxShadingBitBuf::214::172.6274::	p->y[1][0] = y[7];
GfxShadingBitBuf::215::204.3657::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::216::365.2386::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[0][1][j];
GfxShadingBitBuf::217::358.5979::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[1][1][j];
GfxShadingBitBuf::218::223.6764::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::219::227.8552::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::220::27.4597::	}
GfxShadingBitBuf::221::40.8086::	break;
GfxShadingBitBuf::222::80.3102::      case 2:
GfxShadingBitBuf::223::323.8715::	p->x[0][0] = patchesA[nPatchesA-1].x[3][3];
GfxShadingBitBuf::224::319.1273::	p->y[0][0] = patchesA[nPatchesA-1].y[3][3];
GfxShadingBitBuf::225::314.7128::	p->x[0][1] = patchesA[nPatchesA-1].x[3][2];
GfxShadingBitBuf::226::269.6223::	p->y[0][1] = patchesA[nPatchesA-1].y[3][2];
GfxShadingBitBuf::227::329.3756::	p->x[0][2] = patchesA[nPatchesA-1].x[3][1];
GfxShadingBitBuf::228::325.4000::	p->y[0][2] = patchesA[nPatchesA-1].y[3][1];
GfxShadingBitBuf::229::306.6963::	p->x[0][3] = patchesA[nPatchesA-1].x[3][0];
GfxShadingBitBuf::230::294.0908::	p->y[0][3] = patchesA[nPatchesA-1].y[3][0];
GfxShadingBitBuf::231::164.2646::	p->x[1][3] = x[0];
GfxShadingBitBuf::232::163.3753::	p->y[1][3] = y[0];
GfxShadingBitBuf::233::158.7311::	p->x[2][3] = x[1];
GfxShadingBitBuf::234::159.6707::	p->y[2][3] = y[1];
GfxShadingBitBuf::235::164.3014::	p->x[3][3] = x[2];
GfxShadingBitBuf::236::163.7327::	p->y[3][3] = y[2];
GfxShadingBitBuf::237::161.8268::	p->x[3][2] = x[3];
GfxShadingBitBuf::238::166.6850::	p->y[3][2] = y[3];
GfxShadingBitBuf::239::171.3860::	p->x[3][1] = x[4];
GfxShadingBitBuf::240::172.5554::	p->y[3][1] = y[4];
GfxShadingBitBuf::241::171.2326::	p->x[3][0] = x[5];
GfxShadingBitBuf::242::168.1887::	p->y[3][0] = y[5];
GfxShadingBitBuf::243::169.6827::	p->x[2][0] = x[6];
GfxShadingBitBuf::244::170.1487::	p->y[2][0] = y[6];
GfxShadingBitBuf::245::167.6541::	p->x[1][0] = x[7];
GfxShadingBitBuf::246::167.2651::	p->y[1][0] = y[7];
GfxShadingBitBuf::247::211.0769::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::248::374.1710::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[1][1][j];
GfxShadingBitBuf::249::377.0700::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[1][0][j];
GfxShadingBitBuf::250::230.8917::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::251::218.9538::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::252::27.7186::	}
GfxShadingBitBuf::253::43.9049::	break;
GfxShadingBitBuf::254::84.9820::      case 3:
GfxShadingBitBuf::255::268.2167::	p->x[0][0] = patchesA[nPatchesA-1].x[3][0];
GfxShadingBitBuf::256::330.1609::	p->y[0][0] = patchesA[nPatchesA-1].y[3][0];
GfxShadingBitBuf::257::322.0969::	p->x[0][1] = patchesA[nPatchesA-1].x[2][0];
GfxShadingBitBuf::258::308.6222::	p->y[0][1] = patchesA[nPatchesA-1].y[2][0];
GfxShadingBitBuf::259::291.7523::	p->x[0][2] = patchesA[nPatchesA-1].x[1][0];
GfxShadingBitBuf::260::299.3844::	p->y[0][2] = patchesA[nPatchesA-1].y[1][0];
GfxShadingBitBuf::261::290.0803::	p->x[0][3] = patchesA[nPatchesA-1].x[0][0];
GfxShadingBitBuf::262::302.0919::	p->y[0][3] = patchesA[nPatchesA-1].y[0][0];
GfxShadingBitBuf::263::162.0269::	p->x[1][3] = x[0];
GfxShadingBitBuf::264::162.2142::	p->y[1][3] = y[0];
GfxShadingBitBuf::265::165.4900::	p->x[2][3] = x[1];
GfxShadingBitBuf::266::173.4039::	p->y[2][3] = y[1];
GfxShadingBitBuf::267::168.7352::	p->x[3][3] = x[2];
GfxShadingBitBuf::268::167.7352::	p->y[3][3] = y[2];
GfxShadingBitBuf::269::166.9236::	p->x[3][2] = x[3];
GfxShadingBitBuf::270::169.7096::	p->y[3][2] = y[3];
GfxShadingBitBuf::271::162.7671::	p->x[3][1] = x[4];
GfxShadingBitBuf::272::166.6062::	p->y[3][1] = y[4];
GfxShadingBitBuf::273::165.6992::	p->x[3][0] = x[5];
GfxShadingBitBuf::274::174.7806::	p->y[3][0] = y[5];
GfxShadingBitBuf::275::174.5901::	p->x[2][0] = x[6];
GfxShadingBitBuf::276::174.3391::	p->y[2][0] = y[6];
GfxShadingBitBuf::277::172.3420::	p->x[1][0] = x[7];
GfxShadingBitBuf::278::178.0331::	p->y[1][0] = y[7];
GfxShadingBitBuf::279::217.7518::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::280::360.7521::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[1][0][j];
GfxShadingBitBuf::281::344.7038::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[0][0][j];
GfxShadingBitBuf::283::237.9714::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::284::28.7845::	}
GfxShadingBitBuf::285::47.4830::	break;
GfxShadingBitBuf::286::59.7566::      }
GfxShadingBitBuf::287::75.1431::    } else {
GfxShadingBitBuf::288::111.1149::      switch (flag) {
GfxShadingBitBuf::289::85.4161::      case 0:
GfxShadingBitBuf::290::166.1670::	p->x[0][0] = x[0];
GfxShadingBitBuf::291::165.5761::	p->y[0][0] = y[0];
GfxShadingBitBuf::292::158.2482::	p->x[0][1] = x[1];
GfxShadingBitBuf::293::165.6584::	p->y[0][1] = y[1];
GfxShadingBitBuf::294::163.1841::	p->x[0][2] = x[2];
GfxShadingBitBuf::295::161.9786::	p->y[0][2] = y[2];
GfxShadingBitBuf::296::159.1509::	p->x[0][3] = x[3];
GfxShadingBitBuf::297::166.2218::	p->y[0][3] = y[3];
GfxShadingBitBuf::298::164.5306::	p->x[1][3] = x[4];
GfxShadingBitBuf::299::162.5522::	p->y[1][3] = y[4];
GfxShadingBitBuf::300::165.5261::	p->x[2][3] = x[5];
GfxShadingBitBuf::301::172.7158::	p->y[2][3] = y[5];
GfxShadingBitBuf::302::174.8839::	p->x[3][3] = x[6];
GfxShadingBitBuf::303::170.5838::	p->y[3][3] = y[6];
GfxShadingBitBuf::304::169.0861::	p->x[3][2] = x[7];
GfxShadingBitBuf::305::170.8030::	p->y[3][2] = y[7];
GfxShadingBitBuf::306::166.1540::	p->x[3][1] = x[8];
GfxShadingBitBuf::307::165.3318::	p->y[3][1] = y[8];
GfxShadingBitBuf::308::166.5279::	p->x[3][0] = x[9];
GfxShadingBitBuf::309::172.0063::	p->y[3][0] = y[9];
GfxShadingBitBuf::310::174.3798::	p->x[2][0] = x[10];
GfxShadingBitBuf::311::175.0802::	p->y[2][0] = y[10];
GfxShadingBitBuf::312::169.5704::	p->x[1][0] = x[11];
GfxShadingBitBuf::313::176.5503::	p->y[1][0] = y[11];
GfxShadingBitBuf::314::180.1748::	p->x[1][1] = x[12];
GfxShadingBitBuf::315::177.2281::	p->y[1][1] = y[12];
GfxShadingBitBuf::316::171.9187::	p->x[1][2] = x[13];
GfxShadingBitBuf::317::171.8439::	p->y[1][2] = y[13];
GfxShadingBitBuf::318::177.9194::	p->x[2][2] = x[14];
GfxShadingBitBuf::319::158.0733::	p->y[2][2] = y[14];
GfxShadingBitBuf::322::232.1315::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::323::232.0338::	  p->color[0][0][j] = c[0][j];
GfxShadingBitBuf::324::231.1494::	  p->color[0][1][j] = c[1][j];
GfxShadingBitBuf::325::215.0154::	  p->color[1][1][j] = c[2][j];
GfxShadingBitBuf::326::209.9621::	  p->color[1][0][j] = c[3][j];
GfxShadingBitBuf::327::26.2579::	}
GfxShadingBitBuf::328::42.7400::	break;
GfxShadingBitBuf::329::78.6579::      case 1:
GfxShadingBitBuf::330::300.3472::	p->x[0][0] = patchesA[nPatchesA-1].x[0][3];
GfxShadingBitBuf::331::293.5169::	p->y[0][0] = patchesA[nPatchesA-1].y[0][3];
GfxShadingBitBuf::332::302.2731::	p->x[0][1] = patchesA[nPatchesA-1].x[1][3];
GfxShadingBitBuf::333::297.3876::	p->y[0][1] = patchesA[nPatchesA-1].y[1][3];
GfxShadingBitBuf::334::313.9727::	p->x[0][2] = patchesA[nPatchesA-1].x[2][3];
GfxShadingBitBuf::335::310.4507::	p->y[0][2] = patchesA[nPatchesA-1].y[2][3];
GfxShadingBitBuf::336::309.7601::	p->x[0][3] = patchesA[nPatchesA-1].x[3][3];
GfxShadingBitBuf::337::302.3289::	p->y[0][3] = patchesA[nPatchesA-1].y[3][3];
GfxShadingBitBuf::338::165.5088::	p->x[1][3] = x[0];
GfxShadingBitBuf::339::170.7751::	p->y[1][3] = y[0];
GfxShadingBitBuf::340::173.4462::	p->x[2][3] = x[1];
GfxShadingBitBuf::341::173.5436::	p->y[2][3] = y[1];
GfxShadingBitBuf::342::169.8491::	p->x[3][3] = x[2];
GfxShadingBitBuf::343::175.6278::	p->y[3][3] = y[2];
GfxShadingBitBuf::344::178.5394::	p->x[3][2] = x[3];
GfxShadingBitBuf::345::178.0143::	p->y[3][2] = y[3];
GfxShadingBitBuf::346::170.6588::	p->x[3][1] = x[4];
GfxShadingBitBuf::347::170.9529::	p->y[3][1] = y[4];
GfxShadingBitBuf::348::178.4279::	p->x[3][0] = x[5];
GfxShadingBitBuf::349::159.6549::	p->y[3][0] = y[5];
GfxShadingBitBuf::351::184.9549::	p->y[2][0] = y[6];
GfxShadingBitBuf::352::178.8247::	p->x[1][0] = x[7];
GfxShadingBitBuf::353::178.7246::	p->y[1][0] = y[7];
GfxShadingBitBuf::354::176.3078::	p->x[1][1] = x[8];
GfxShadingBitBuf::355::167.1798::	p->y[1][1] = y[8];
GfxShadingBitBuf::356::163.1042::	p->x[1][2] = x[9];
GfxShadingBitBuf::357::158.2659::	p->y[1][2] = y[9];
GfxShadingBitBuf::358::162.6451::	p->x[2][2] = x[10];
GfxShadingBitBuf::359::164.8820::	p->y[2][2] = y[10];
GfxShadingBitBuf::360::161.5405::	p->x[2][1] = x[11];
GfxShadingBitBuf::361::159.5249::	p->y[2][1] = y[11];
GfxShadingBitBuf::362::204.9584::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::363::350.9236::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[0][1][j];
GfxShadingBitBuf::364::366.8031::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[1][1][j];
GfxShadingBitBuf::365::223.2537::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::366::217.3044::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::367::26.2417::	}
GfxShadingBitBuf::368::43.0195::	break;
GfxShadingBitBuf::369::80.3606::      case 2:
GfxShadingBitBuf::370::305.0621::	p->x[0][0] = patchesA[nPatchesA-1].x[3][3];
GfxShadingBitBuf::371::307.5359::	p->y[0][0] = patchesA[nPatchesA-1].y[3][3];
GfxShadingBitBuf::372::319.8281::	p->x[0][1] = patchesA[nPatchesA-1].x[3][2];
GfxShadingBitBuf::373::313.4554::	p->y[0][1] = patchesA[nPatchesA-1].y[3][2];
GfxShadingBitBuf::374::322.2445::	p->x[0][2] = patchesA[nPatchesA-1].x[3][1];
GfxShadingBitBuf::375::313.4367::	p->y[0][2] = patchesA[nPatchesA-1].y[3][1];
GfxShadingBitBuf::376::323.0961::	p->x[0][3] = patchesA[nPatchesA-1].x[3][0];
GfxShadingBitBuf::377::193.7233::	p->y[0][3] = patchesA[nPatchesA-1].y[3][0];
GfxShadingBitBuf::379::183.1456::	p->y[1][3] = y[0];
GfxShadingBitBuf::380::177.2291::	p->x[2][3] = x[1];
GfxShadingBitBuf::381::177.1057::	p->y[2][3] = y[1];
GfxShadingBitBuf::382::175.8381::	p->x[3][3] = x[2];
GfxShadingBitBuf::383::165.1085::	p->y[3][3] = y[2];
GfxShadingBitBuf::384::161.5589::	p->x[3][2] = x[3];
GfxShadingBitBuf::385::157.9185::	p->y[3][2] = y[3];
GfxShadingBitBuf::386::162.6172::	p->x[3][1] = x[4];
GfxShadingBitBuf::387::163.3358::	p->y[3][1] = y[4];
GfxShadingBitBuf::388::162.3925::	p->x[3][0] = x[5];
GfxShadingBitBuf::389::158.7083::	p->y[3][0] = y[5];
GfxShadingBitBuf::390::163.8381::	p->x[2][0] = x[6];
GfxShadingBitBuf::391::165.3546::	p->y[2][0] = y[6];
GfxShadingBitBuf::392::162.8941::	p->x[1][0] = x[7];
GfxShadingBitBuf::393::164.7503::	p->y[1][0] = y[7];
GfxShadingBitBuf::394::170.4071::	p->x[1][1] = x[8];
GfxShadingBitBuf::395::174.3437::	p->y[1][1] = y[8];
GfxShadingBitBuf::396::168.2545::	p->x[1][2] = x[9];
GfxShadingBitBuf::397::168.4817::	p->y[1][2] = y[9];
GfxShadingBitBuf::398::168.6602::	p->x[2][2] = x[10];
GfxShadingBitBuf::399::168.6462::	p->y[2][2] = y[10];
GfxShadingBitBuf::400::165.6688::	p->x[2][1] = x[11];
GfxShadingBitBuf::401::168.3887::	p->y[2][1] = y[11];
GfxShadingBitBuf::402::208.7608::	for (j = 0; j < nCompsA; ++j) {
GfxShadingBitBuf::403::371.8193::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[1][1][j];
GfxShadingBitBuf::404::373.4194::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[1][0][j];
GfxShadingBitBuf::405::231.4877::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::406::218.8296::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::407::25.9709::	}
GfxShadingBitBuf::408::44.8967::	break;
GfxShadingBitBuf::409::84.5562::      case 3:
GfxShadingBitBuf::410::306.8939::	p->x[0][0] = patchesA[nPatchesA-1].x[3][0];
GfxShadingBitBuf::412::325.3486::	p->x[0][1] = patchesA[nPatchesA-1].x[2][0];
GfxShadingBitBuf::413::321.8403::	p->y[0][1] = patchesA[nPatchesA-1].y[2][0];
GfxShadingBitBuf::414::303.5938::	p->x[0][2] = patchesA[nPatchesA-1].x[1][0];
GfxShadingBitBuf::415::291.8268::	p->y[0][2] = patchesA[nPatchesA-1].y[1][0];
GfxShadingBitBuf::416::297.7865::	p->x[0][3] = patchesA[nPatchesA-1].x[0][0];
GfxShadingBitBuf::417::288.5141::	p->y[0][3] = patchesA[nPatchesA-1].y[0][0];
GfxShadingBitBuf::418::160.9936::	p->x[1][3] = x[0];
GfxShadingBitBuf::419::165.6449::	p->y[1][3] = y[0];
GfxShadingBitBuf::420::160.7781::	p->x[2][3] = x[1];
GfxShadingBitBuf::421::162.9551::	p->y[2][3] = y[1];
GfxShadingBitBuf::422::168.1469::	p->x[3][3] = x[2];
GfxShadingBitBuf::423::174.2694::	p->y[3][3] = y[2];
GfxShadingBitBuf::424::166.9547::	p->x[3][2] = x[3];
GfxShadingBitBuf::425::167.8758::	p->y[3][2] = y[3];
GfxShadingBitBuf::426::165.7458::	p->x[3][1] = x[4];
GfxShadingBitBuf::427::168.5396::	p->y[3][1] = y[4];
GfxShadingBitBuf::428::162.2363::	p->x[3][0] = x[5];
GfxShadingBitBuf::429::167.3097::	p->y[3][0] = y[5];
GfxShadingBitBuf::430::166.2034::	p->x[2][0] = x[6];
GfxShadingBitBuf::431::174.7927::	p->y[2][0] = y[6];
GfxShadingBitBuf::432::173.8037::	p->x[1][0] = x[7];
GfxShadingBitBuf::433::172.1299::	p->y[1][0] = y[7];
GfxShadingBitBuf::434::171.9259::	p->x[1][1] = x[8];
GfxShadingBitBuf::435::177.2741::	p->y[1][1] = y[8];
GfxShadingBitBuf::436::176.1566::	p->x[1][2] = x[9];
GfxShadingBitBuf::437::172.7158::	p->y[1][2] = y[9];
GfxShadingBitBuf::438::166.7403::	p->x[2][2] = x[10];
GfxShadingBitBuf::439::177.8249::	p->y[2][2] = y[10];
GfxShadingBitBuf::440::173.0554::	p->x[2][1] = x[11];
GfxShadingBitBuf::441::22.1863::	p->y[2][1] = y[11];
GfxShadingBitBuf::443::417.4677::	  p->color[0][0][j] = patchesA[nPatchesA-1].color[1][0][j];
GfxShadingBitBuf::444::402.4413::	  p->color[0][1][j] = patchesA[nPatchesA-1].color[0][0][j];
GfxShadingBitBuf::445::226.8279::	  p->color[1][1][j] = c[0][j];
GfxShadingBitBuf::446::221.1538::	  p->color[1][0][j] = c[1][j];
GfxShadingBitBuf::447::28.8740::	}
GfxShadingBitBuf::448::47.7612::	break;
GfxShadingBitBuf::449::59.7015::      }
GfxShadingBitBuf::450::46.8939::    }
GfxShadingBitBuf::451::112.1825::    ++nPatchesA;
GfxShadingBitBuf::452::133.8216::    bitBuf->flushBits();
GfxShadingBitBuf::453::32.6136::  }
GfxShadingBitBuf::454::80.5189::  delete bitBuf;
GfxShadingBitBuf::455::115.9060::  if (typeA == 6) {
GfxShadingBitBuf::456::244.1127::    for (i = 0; i < nPatchesA; ++i) {
GfxShadingBitBuf::457::158.6124::      p = &patchesA[i];
GfxShadingBitBuf::458::288.1533::      p->x[1][1] = (-4 * p->x[0][0]
GfxShadingBitBuf::459::299.7319::		    +6 * (p->x[0][1] + p->x[1][0])
GfxShadingBitBuf::460::292.5667::		    -2 * (p->x[0][3] + p->x[3][0])
GfxShadingBitBuf::461::294.2957::		    +3 * (p->x[3][1] + p->x[1][3])
GfxShadingBitBuf::462::183.1496::		    - p->x[3][3]) / 9;
GfxShadingBitBuf::463::295.4163::      p->y[1][1] = (-4 * p->y[0][0]
GfxShadingBitBuf::464::302.6821::		    +6 * (p->y[0][1] + p->y[1][0])
GfxShadingBitBuf::465::298.3778::		    -2 * (p->y[0][3] + p->y[3][0])
GfxShadingBitBuf::466::310.2214::		    +3 * (p->y[3][1] + p->y[1][3])
GfxShadingBitBuf::467::196.9683::		    - p->y[3][3]) / 9;
GfxShadingBitBuf::468::298.0430::      p->x[1][2] = (-4 * p->x[0][3]
GfxShadingBitBuf::469::309.5244::		    +6 * (p->x[0][2] + p->x[1][3])
GfxShadingBitBuf::470::30.4624::		    -2 * (p->x[0][0] + p->x[3][3])
GfxShadingBitBuf::471::319.8484::		    +3 * (p->x[3][2] + p->x[1][0])
GfxShadingBitBuf::472::204.6521::		    - p->x[3][0]) / 9;
GfxShadingBitBuf::473::305.2955::      p->y[1][2] = (-4 * p->y[0][3]
GfxShadingBitBuf::474::286.9033::		    +6 * (p->y[0][2] + p->y[1][3])
GfxShadingBitBuf::475::288.4961::		    -2 * (p->y[0][0] + p->y[3][3])
GfxShadingBitBuf::476::282.2757::		    +3 * (p->y[3][2] + p->y[1][0])
GfxShadingBitBuf::477::183.6124::		    - p->y[3][0]) / 9;
GfxShadingBitBuf::478::296.2434::      p->x[2][1] = (-4 * p->x[3][0]
GfxShadingBitBuf::479::289.0898::		    +6 * (p->x[3][1] + p->x[2][0])
GfxShadingBitBuf::480::303.1844::		    -2 * (p->x[3][3] + p->x[0][0])
GfxShadingBitBuf::481::297.5922::		    +3 * (p->x[0][1] + p->x[2][3])
GfxShadingBitBuf::482::188.2710::		    - p->x[0][3]) / 9;
GfxShadingBitBuf::483::295.7322::      p->y[2][1] = (-4 * p->y[3][0]
GfxShadingBitBuf::484::293.3814::		    +6 * (p->y[3][1] + p->y[2][0])
GfxShadingBitBuf::485::304.2578::		    -2 * (p->y[3][3] + p->y[0][0])
GfxShadingBitBuf::486::302.9737::		    +3 * (p->y[0][1] + p->y[2][3])
GfxShadingBitBuf::487::198.5742::		    - p->y[0][3]) / 9;
GfxShadingBitBuf::488::313.1565::      p->x[2][2] = (-4 * p->x[3][3]
GfxShadingBitBuf::489::298.4239::		    +6 * (p->x[3][2] + p->x[2][3])
GfxShadingBitBuf::490::309.8814::		    -2 * (p->x[3][0] + p->x[0][3])
GfxShadingBitBuf::491::77.2028::		    +3 * (p->x[0][2] + p->x[2][0])
GfxShadingBitBuf::492::203.0318::		    - p->x[0][0]) / 9;
GfxShadingBitBuf::493::308.2211::      p->y[2][2] = (-4 * p->y[3][3]
GfxShadingBitBuf::494::292.8908::		    +6 * (p->y[3][2] + p->y[2][3])
GfxShadingBitBuf::495::281.6682::		    -2 * (p->y[3][0] + p->y[0][3])
GfxShadingBitBuf::496::280.2309::		    +3 * (p->y[0][2] + p->y[2][0])
GfxShadingBitBuf::497::179.3364::		    - p->y[0][0]) / 9;
GfxShadingBitBuf::498::45.7019::    }
GfxShadingBitBuf::499::32.5517::  }
GfxShadingBitBuf::500::273.0493::  shading = new GfxPatchMeshShading(typeA, patchesA, nPatchesA,
GfxShadingBitBuf::501::202.0971::				    nCompsA, funcsA, nFuncsA);
GfxShadingBitBuf::502::126.0085::  if (!shading->init(dict
GfxShadingBitBuf::503::69.2397::		     )) {
GfxShadingBitBuf::504::78.9995::    delete shading;
GfxShadingBitBuf::505::77.6301::    return NULL;
GfxShadingBitBuf::506::34.3328::  }
GfxShadingBitBuf::507::68.5076::  return shading;
GfxShadingBitBuf::508::50.8844:: err2:
GfxShadingBitBuf::509::87.7672::  obj1.free();
GfxShadingBitBuf::510::50.2280:: err1:
GfxShadingBitBuf::511::65.1530::  return NULL;
GfxShadingBitBuf::512::26.3547::}
GfxShadingBitBuf::513::196.7830::GfxShading *GfxPatchMeshShading::copy() {
GfxShadingBitBuf::514::164.2479::  return new GfxPatchMeshShading(this);
GfxShadingBitBuf::515::27.9830::}
GfxShadingBitBuf::516::284.1724::void GfxPatchMeshShading::getColor(double *in, GfxColor *out) {
GfxShadingBitBuf::517::134.9790::  double c[gfxColorMaxComps];
GfxShadingBitBuf::518::60.4122::  int i;
GfxShadingBitBuf::519::127.6837::  if (nFuncs > 0) {
GfxShadingBitBuf::520::233.0169::    for (i = 0; i < nFuncs; ++i) {
GfxShadingBitBuf::521::248.2464::      funcs[i]->transform(in, &c[i]);
GfxShadingBitBuf::522::48.6626::    }
GfxShadingBitBuf::523::288.2098::    for (i = 0; i < colorSpace->getNComps(); ++i) {
GfxShadingBitBuf::524::254.5854::      out->c[i] = dblToCol(c[i]);
GfxShadingBitBuf::525::47.8772::    }
GfxShadingBitBuf::526::62.8776::  } else {
GfxShadingBitBuf::527::238.8938::    for (i = 0; i < nComps; ++i) {
GfxShadingBitBuf::528::251.0491::      out->c[i] = dblToCol(in[i]);
GfxShadingBitBuf::529::47.3939::    }
GfxShadingBitBuf::530::34.5891::  }
GfxShadingBitBuf::531::28.5778::}
GfxShadingBitBuf::532::62.7809:://------------------------------------------------------------------------
GfxShadingBitBuf::533::94.8837::// GfxImageColorMap
GfxShadingBitBuf::534::58.8963:://------------------------------------------------------------------------
GfxShadingBitBuf::537::135.9287::				   int maxAllowedBits) {
GfxShadingBitBuf::538::164.6591::  GfxIndexedColorSpace *indexedCS;
GfxShadingBitBuf::539::163.8609::  GfxSeparationColorSpace *sepCS;
GfxShadingBitBuf::540::116.5606::  int maxPixel, indexHigh;
GfxShadingBitBuf::541::136.0558::  Guchar *indexedLookup;
GfxShadingBitBuf::542::106.3689::  Function *sepFunc;
GfxShadingBitBuf::543::59.2251::  Object obj;
GfxShadingBitBuf::544::279.6855::  double defaultLow[gfxColorMaxComps], defaultRange[gfxColorMaxComps];
GfxShadingBitBuf::545::247.9435::  double x[gfxColorMaxComps], y[gfxColorMaxComps];
GfxShadingBitBuf::546::108.5534::  int i, j, k;
GfxShadingBitBuf::547::86.1813::  ok = gTrue;
GfxShadingBitBuf::548::108.8599::  // bits per component and color space
GfxShadingBitBuf::549::89.4289::  bits = bitsA;
GfxShadingBitBuf::550::148.2822::  if (bits <= maxAllowedBits) {
GfxShadingBitBuf::551::167.4020::    maxPixel = (1 << bits) - 1;
GfxShadingBitBuf::552::61.2094::  } else {
GfxShadingBitBuf::553::206.8699::    maxPixel = (1 << maxAllowedBits) - 1;
GfxShadingBitBuf::554::34.5292::  }
GfxShadingBitBuf::555::104.4808::  colorSpace = colorSpaceA;
GfxShadingBitBuf::556::54.2976::  // initialize
GfxShadingBitBuf::557::248.1934::  for (k = 0; k < gfxColorMaxComps; ++k) {
GfxShadingBitBuf::558::131.2170::    lookup[k] = NULL;
GfxShadingBitBuf::559::136.8344::    lookup2[k] = NULL;
GfxShadingBitBuf::560::33.8152::  }
GfxShadingBitBuf::561::73.6802::  // get decode map
GfxShadingBitBuf::562::237.6606::  colorSpace->getDefaultRanges(defaultLow, defaultRange, maxPixel);
GfxShadingBitBuf::563::131.1808::  if (decode->isNull()) {
GfxShadingBitBuf::564::178.0230::    nComps = colorSpace->getNComps();
GfxShadingBitBuf::565::232.1257::    for (i = 0; i < nComps; ++i) {
GfxShadingBitBuf::566::187.3376::      decodeLow[i] = defaultLow[i];
GfxShadingBitBuf::567::191.7271::      decodeRange[i] = defaultRange[i];
GfxShadingBitBuf::568::48.4411::    }
GfxShadingBitBuf::569::164.7120::  } else if (decode->isArray()) {
GfxShadingBitBuf::570::203.7825::    nComps = decode->arrayGetLength() / 2;
GfxShadingBitBuf::571::218.9639::    if (nComps < colorSpace->getNComps()) {
GfxShadingBitBuf::572::115.7010::      goto err1;
GfxShadingBitBuf::573::50.9252::    }
GfxShadingBitBuf::574::222.4666::    if (nComps > colorSpace->getNComps()) {
GfxShadingBitBuf::575::301.8700::      error(errSyntaxWarning, -1, "Too many elements in Decode array");
GfxShadingBitBuf::576::208.8050::      nComps = colorSpace->getNComps();
GfxShadingBitBuf::577::47.7367::    }
GfxShadingBitBuf::578::12.6504::    for (i = 0; i < nComps; ++i) {
GfxShadingBitBuf::580::170.4114::      if (!obj.isNum()) {
GfxShadingBitBuf::581::87.2686::	goto err2;
GfxShadingBitBuf::582::65.5733::      }
GfxShadingBitBuf::583::205.3871::      decodeLow[i] = obj.getNum();
GfxShadingBitBuf::584::112.0380::      obj.free();
GfxShadingBitBuf::585::235.0829::      decode->arrayGet(2*i+1, &obj);
GfxShadingBitBuf::586::159.0086::      if (!obj.isNum()) {
GfxShadingBitBuf::587::79.7208::	goto err2;
GfxShadingBitBuf::588::60.6999::      }
GfxShadingBitBuf::589::261.3298::      decodeRange[i] = obj.getNum() - decodeLow[i];
GfxShadingBitBuf::590::105.6685::      obj.free();
GfxShadingBitBuf::591::47.7227::    }
GfxShadingBitBuf::592::60.9321::  } else {
GfxShadingBitBuf::593::96.9999::    goto err1;
GfxShadingBitBuf::594::34.2645::  }
GfxShadingBitBuf::595::194.3798::  // Construct a lookup table -- this stores pre-computed decoded
GfxShadingBitBuf::596::213.4749::  // values for each component, i.e., the result of applying the
GfxShadingBitBuf::597::161.0547::  // decode mapping to each possible image pixel component value.
GfxShadingBitBuf::598::208.3490::  for (k = 0; k < nComps; ++k) {
GfxShadingBitBuf::599::283.5011::    lookup[k] = (GfxColorComp *)gmallocn(maxPixel + 1,
GfxShadingBitBuf::600::116.4886::					 sizeof(GfxColorComp));
GfxShadingBitBuf::601::228.3152::    for (i = 0; i <= maxPixel; ++i) {
GfxShadingBitBuf::602::296.6255::      double t = decodeLow[k] + (i * decodeRange[k]) / maxPixel;
GfxShadingBitBuf::603::168.5488::      if (t < defaultLow[k]) {
GfxShadingBitBuf::604::97.1870::	t = defaultLow[k];
GfxShadingBitBuf::605::266.1891::      } else if (t > defaultLow[k] + defaultRange[k]) {
GfxShadingBitBuf::606::171.7654::	t = defaultLow[k] + defaultRange[k];
GfxShadingBitBuf::607::63.8353::      }
GfxShadingBitBuf::608::223.2627::      lookup[k][i] = dblToCol(t);
GfxShadingBitBuf::609::47.7546::    }
GfxShadingBitBuf::610::34.6338::  }
GfxShadingBitBuf::611::217.9762::  // Optimization: for Indexed and Separation color spaces (which have
GfxShadingBitBuf::612::223.4297::  // only one component), we pre-compute a second lookup table with
GfxShadingBitBuf::613::60.0525::  // color values
GfxShadingBitBuf::614::100.9467::  colorSpace2 = NULL;
GfxShadingBitBuf::615::103.6949::  nComps2 = 0;
GfxShadingBitBuf::616::199.7493::  if (colorSpace->getMode() == csIndexed) {
GfxShadingBitBuf::617::231.8122::    // Note that indexHigh may not be the same as maxPixel --
GfxShadingBitBuf::618::193.1895::    // Distiller will remove unused palette entries, resulting in
GfxShadingBitBuf::619::12.4113::    // indexHigh < maxPixel.
GfxShadingBitBuf::622::182.3316::    indexHigh = indexedCS->getIndexHigh();
GfxShadingBitBuf::623::216.9432::    nComps2 = colorSpace2->getNComps();
GfxShadingBitBuf::624::193.8688::    indexedLookup = indexedCS->getLookup();
GfxShadingBitBuf::625::242.5091::    colorSpace2->getDefaultRanges(x, y, indexHigh);
GfxShadingBitBuf::626::246.9857::    for (k = 0; k < nComps2; ++k) {
GfxShadingBitBuf::627::316.1125::      lookup2[k] = (GfxColorComp *)gmallocn(maxPixel + 1,
GfxShadingBitBuf::628::139.8290::					    sizeof(GfxColorComp));
GfxShadingBitBuf::629::48.8703::    }
GfxShadingBitBuf::630::228.4792::    for (i = 0; i <= maxPixel; ++i) {
GfxShadingBitBuf::631::387.8062::      j = (int)(decodeLow[0] + (i * decodeRange[0]) / maxPixel + 0.5);
GfxShadingBitBuf::632::132.2684::      if (j < 0) {
GfxShadingBitBuf::633::66.3458::	j = 0;
GfxShadingBitBuf::634::171.9494::      } else if (j > indexHigh) {
GfxShadingBitBuf::635::80.2290::	j = indexHigh;
GfxShadingBitBuf::636::64.5541::      }
GfxShadingBitBuf::637::257.2633::      for (k = 0; k < nComps2; ++k) {
GfxShadingBitBuf::638::126.6374::	lookup2[k][i] =
GfxShadingBitBuf::639::448.8304::	    dblToCol(x[k] + (indexedLookup[j*nComps2 + k] / 255.0) * y[k]);
GfxShadingBitBuf::640::61.0451::      }
GfxShadingBitBuf::641::48.0107::    }
GfxShadingBitBuf::642::227.5985::  } else if (colorSpace->getMode() == csSeparation) {
GfxShadingBitBuf::643::214.7428::    sepCS = (GfxSeparationColorSpace *)colorSpace;
GfxShadingBitBuf::644::170.2023::    colorSpace2 = sepCS->getAlt();
GfxShadingBitBuf::645::207.9855::    nComps2 = colorSpace2->getNComps();
GfxShadingBitBuf::646::182.1166::    sepFunc = sepCS->getFunc();
GfxShadingBitBuf::647::250.0909::    for (k = 0; k < nComps2; ++k) {
GfxShadingBitBuf::648::329.8543::      lookup2[k] = (GfxColorComp *)gmallocn(maxPixel + 1,
GfxShadingBitBuf::649::143.5032::					    sizeof(GfxColorComp));
GfxShadingBitBuf::650::51.9305::    }
GfxShadingBitBuf::651::247.3682::    for (i = 0; i <= maxPixel; ++i) {
GfxShadingBitBuf::652::159.8527::      double t = decodeLow[0] + (i * decodeRange[0]) / maxPixel;
GfxShadingBitBuf::654::113.0990::	t = defaultLow[0];
GfxShadingBitBuf::655::285.4075::      } else if (t > defaultLow[0] + defaultRange[0]) {
GfxShadingBitBuf::656::180.0492::	t = defaultLow[0] + defaultRange[0];
GfxShadingBitBuf::657::63.5079::      }
GfxShadingBitBuf::658::137.5120::      x[0] = t;
GfxShadingBitBuf::659::174.4284::      sepFunc->transform(x, y);
GfxShadingBitBuf::660::246.9984::      for (k = 0; k < nComps2; ++k) {
GfxShadingBitBuf::661::232.2717::	lookup2[k][i] = dblToCol(y[k]);
GfxShadingBitBuf::662::60.4834::      }
GfxShadingBitBuf::663::45.5905::    }
GfxShadingBitBuf::664::33.4518::  }
GfxShadingBitBuf::665::51.1525::  return;
GfxShadingBitBuf::666::49.7657:: err2:
GfxShadingBitBuf::667::74.4739::  obj.free();
GfxShadingBitBuf::668::50.0336:: err1:
GfxShadingBitBuf::669::83.0142::  ok = gFalse;
GfxShadingBitBuf::670::27.6165::}
GfxShadingBitBuf::671::279.6165::GfxImageColorMap::GfxImageColorMap(GfxImageColorMap *colorMap) {
GfxShadingBitBuf::672::103.8961::  int n, i, k;
GfxShadingBitBuf::673::160.7051::  colorSpace = colorMap->colorSpace->copy();
GfxShadingBitBuf::674::110.3740::  bits = colorMap->bits;
GfxShadingBitBuf::675::147.7193::  nComps = colorMap->nComps;
GfxShadingBitBuf::676::172.3029::  nComps2 = colorMap->nComps2;
GfxShadingBitBuf::677::96.5417::  colorSpace2 = NULL;
GfxShadingBitBuf::678::247.6603::  for (k = 0; k < gfxColorMaxComps; ++k) {
GfxShadingBitBuf::679::127.5703::    lookup[k] = NULL;
GfxShadingBitBuf::680::137.2020::    lookup2[k] = NULL;
GfxShadingBitBuf::681::32.7673::  }
GfxShadingBitBuf::682::104.7392::  if (bits <= 8) {
GfxShadingBitBuf::683::104.3684::    n = 1 << bits;
GfxShadingBitBuf::684::58.5141::  } else {
GfxShadingBitBuf::685::84.7970::    n = 256;
GfxShadingBitBuf::686::34.7275::  }
GfxShadingBitBuf::687::205.3367::  for (k = 0; k < nComps; ++k) {
GfxShadingBitBuf::688::352.9157::    lookup[k] = (GfxColorComp *)gmallocn(n, sizeof(GfxColorComp));
GfxShadingBitBuf::689::370.5538::    memcpy(lookup[k], colorMap->lookup[k], n * sizeof(GfxColorComp));
GfxShadingBitBuf::690::35.2811::  }
GfxShadingBitBuf::691::194.0206::  if (colorSpace->getMode() == csIndexed) {
GfxShadingBitBuf::692::285.7507::    colorSpace2 = ((GfxIndexedColorSpace *)colorSpace)->getBase();
GfxShadingBitBuf::693::237.6248::    for (k = 0; k < nComps2; ++k) {
GfxShadingBitBuf::694::374.2986::      lookup2[k] = (GfxColorComp *)gmallocn(n, sizeof(GfxColorComp));
GfxShadingBitBuf::697::238.1067::  } else if (colorSpace->getMode() == csSeparation) {
GfxShadingBitBuf::698::296.5634::    colorSpace2 = ((GfxSeparationColorSpace *)colorSpace)->getAlt();
GfxShadingBitBuf::699::241.9837::    for (k = 0; k < nComps2; ++k) {
GfxShadingBitBuf::700::369.4309::      lookup2[k] = (GfxColorComp *)gmallocn(n, sizeof(GfxColorComp));
GfxShadingBitBuf::701::388.7841::      memcpy(lookup2[k], colorMap->lookup2[k], n * sizeof(GfxColorComp));
GfxShadingBitBuf::702::46.5293::    }
GfxShadingBitBuf::703::32.8609::  }
GfxShadingBitBuf::704::209.2911::  for (i = 0; i < nComps; ++i) {
GfxShadingBitBuf::705::209.2921::    decodeLow[i] = colorMap->decodeLow[i];
GfxShadingBitBuf::706::212.3511::    decodeRange[i] = colorMap->decodeRange[i];
GfxShadingBitBuf::707::34.5010::  }
GfxShadingBitBuf::708::80.1280::  ok = gTrue;
GfxShadingBitBuf::709::28.8341::}
GfxShadingBitBuf::710::181.6159::GfxImageColorMap::~GfxImageColorMap() {
GfxShadingBitBuf::711::60.7344::  int i;
GfxShadingBitBuf::712::72.6353::  delete colorSpace;
GfxShadingBitBuf::713::250.0059::  for (i = 0; i < gfxColorMaxComps; ++i) {
GfxShadingBitBuf::714::141.4386::    gfree(lookup[i]);
GfxShadingBitBuf::715::152.3888::    gfree(lookup2[i]);
GfxShadingBitBuf::716::31.7314::  }
GfxShadingBitBuf::717::26.6130::}
GfxShadingBitBuf::718::286.5833::void GfxImageColorMap::getGray(Guchar *x, GfxGray *gray,
GfxShadingBitBuf::719::178.3321::			       GfxRenderingIntent ri) {
GfxShadingBitBuf::720::86.7815::  GfxColor color;
GfxShadingBitBuf::721::60.2886::  int i;
GfxShadingBitBuf::722::106.2637::  if (colorSpace2) {
GfxShadingBitBuf::723::235.9963::    for (i = 0; i < nComps2; ++i) {
GfxShadingBitBuf::724::262.6063::      color.c[i] = lookup2[i][x[0]];
GfxShadingBitBuf::725::48.7572::    }
GfxShadingBitBuf::726::215.6039::    colorSpace2->getGray(&color, gray, ri);
GfxShadingBitBuf::727::60.2585::  } else {
GfxShadingBitBuf::728::234.5889::    for (i = 0; i < nComps; ++i) {
GfxShadingBitBuf::729::253.9261::      color.c[i] = lookup[i][x[i]];
GfxShadingBitBuf::730::47.0019::    }
GfxShadingBitBuf::731::206.1548::    colorSpace->getGray(&color, gray, ri);
GfxShadingBitBuf::732::35.6359::  }
GfxShadingBitBuf::733::29.8514::}
GfxShadingBitBuf::734::318.1138::void GfxImageColorMap::getRGB(Guchar *x, GfxRGB *rgb, GfxRenderingIntent ri) {
GfxShadingBitBuf::738::267.8296::    for (i = 0; i < nComps2; ++i) {
GfxShadingBitBuf::739::273.7252::      color.c[i] = lookup2[i][x[0]];
GfxShadingBitBuf::740::49.5266::    }
GfxShadingBitBuf::741::229.0764::    colorSpace2->getRGB(&color, rgb, ri);
GfxShadingBitBuf::742::61.6624::  } else {
GfxShadingBitBuf::743::234.6742::    for (i = 0; i < nComps; ++i) {
GfxShadingBitBuf::744::242.3741::      color.c[i] = lookup[i][x[i]];
GfxShadingBitBuf::745::47.0523::    }
GfxShadingBitBuf::746::211.4759::    colorSpace->getRGB(&color, rgb, ri);
GfxShadingBitBuf::747::31.6532::  }
GfxShadingBitBuf::748::27.6715::}
GfxShadingBitBuf::749::345.7693::void GfxImageColorMap::getCMYK(Guchar *x, GfxCMYK *cmyk,
GfxShadingBitBuf::750::181.9043::			       GfxRenderingIntent ri) {
GfxShadingBitBuf::751::89.2559::  GfxColor color;
GfxShadingBitBuf::752::61.5149::  int i;
GfxShadingBitBuf::753::103.5146::  if (colorSpace2) {
GfxShadingBitBuf::754::239.6409::    for (i = 0; i < nComps2; ++i) {
GfxShadingBitBuf::755::263.5839::      color.c[i] = lookup2[i][x[0]];
GfxShadingBitBuf::756::47.4813::    }
GfxShadingBitBuf::757::257.2083::    colorSpace2->getCMYK(&color, cmyk, ri);
GfxShadingBitBuf::758::59.1408::  } else {
GfxShadingBitBuf::759::226.0642::    for (i = 0; i < nComps; ++i) {
GfxShadingBitBuf::760::242.9214::      color.c[i] = lookup[i][x[i]];
GfxShadingBitBuf::761::48.2915::    }
GfxShadingBitBuf::762::244.3417::    colorSpace->getCMYK(&color, cmyk, ri);
GfxShadingBitBuf::763::32.3083::  }
GfxShadingBitBuf::764::28.6768::}
GfxShadingBitBuf::765::308.5373::void GfxImageColorMap::getColor(Guchar *x, GfxColor *color) {
GfxShadingBitBuf::766::62.0343::  int i;
GfxShadingBitBuf::767::218.5333::  for (i = 0; i < nComps; ++i) {
GfxShadingBitBuf::768::239.2653::    color->c[i] = lookup[i][x[i]];
GfxShadingBitBuf::769::34.3469::  }
GfxShadingBitBuf::770::28.6686::}
GfxShadingBitBuf::771::361.4334::void GfxImageColorMap::getGrayByteLine(Guchar *in, Guchar *out, int n,
GfxShadingBitBuf::772::190.2557::				       GfxRenderingIntent ri) {
GfxShadingBitBuf::773::94.3713::  GfxColor color;
GfxShadingBitBuf::774::95.7539::  GfxGray gray;
GfxShadingBitBuf::775::91.3579::  int i, j;
GfxShadingBitBuf::776::64.4385::  if (colorSpace2) {
GfxShadingBitBuf::778::296.7220::      for (i = 0; i < nComps2; ++i) {
GfxShadingBitBuf::779::255.9031::	color.c[i] = lookup2[i][in[j]];
GfxShadingBitBuf::780::67.5496::      }
GfxShadingBitBuf::781::257.1151::      colorSpace2->getGray(&color, &gray, ri);
GfxShadingBitBuf::782::189.1774::      out[j] = colToByte(gray);
GfxShadingBitBuf::783::49.8512::    }
GfxShadingBitBuf::784::65.8061::  } else {
GfxShadingBitBuf::785::214.4715::    for (j = 0; j < n; ++j) {
GfxShadingBitBuf::786::252.1044::      for (i = 0; i < nComps; ++i) {
GfxShadingBitBuf::787::272.0924::	color.c[i] = lookup[i][in[j * nComps + i]];
GfxShadingBitBuf::788::61.9008::      }
GfxShadingBitBuf::789::229.0020::      colorSpace->getGray(&color, &gray, ri);
GfxShadingBitBuf::790::176.9777::      out[j] = colToByte(gray);
GfxShadingBitBuf::791::43.9125::    }
GfxShadingBitBuf::792::31.7747::  }
GfxShadingBitBuf::793::10.3207::}
if::1::160.3842::void JPXStream::fillReadBuf() {
if::2::135.5591::  JPXTileComp *tileComp;
if::3::159.4304::  Guint tileIdx, tx, ty;
if::4::161.8203::  int pix, pixBits, k;
if::5::87.1406::  GBool eol;
if::6::48.3051::  do {
if::7::212.8632::    if (curY >= (img.ySize >> reduction)) {
if::8::80.0424::      return;
if::9::48.7059::    }
if::10::389.8044::    tileIdx = ((curY - img.yTileOffsetR) / img.yTileSizeR) * img.nXTiles
if::11::339.9223::              + (curX - img.xTileOffsetR) / img.xTileSizeR;
if::12::219.8361::#if 1 //~ ignore the palette, assume the PDF ColorSpace object is valid
if::13::273.3243::    tileComp = &img.tiles[tileIdx].tileComps[curComp];
if::14::41.5567::#else
if::15::345.1475::    tileComp = &img.tiles[tileIdx].tileComps[havePalette ? 0 : curComp];
if::16::48.0748::#endif
if::17::260.7439::    //~ can curX/curY be less than x/yTileOffsetR?
if::18::260.3970::    //~ if yes, we need to use tx = max(0, ....)
if::19::348.4457::    tx = jpxFloorDiv((curX - img.xTileOffsetR) % img.xTileSizeR,
if::20::119.3586::		     tileComp->hSep);
if::21::361.2415::    ty = jpxFloorDiv((curY - img.yTileOffsetR) % img.yTileSizeR,
if::22::118.4544::		     tileComp->vSep);
if::23::278.5035::    pix = (int)tileComp->data[ty * tileComp->w + tx];
if::24::168.6171::    pixBits = tileComp->prec;
if::25::108.4715::    eol = gFalse;
if::26::228.1469::#if 1 //~ ignore the palette, assume the PDF ColorSpace object is valid
if::27::205.2912::    if (++curComp == img.nComps) {
if::28::45.5617::#else
if::29::128.1204::    if (havePalette) {
if::30::260.8981::      if (pix >= 0 && pix < palette.nEntries) {
if::31::255.0328::	pix = palette.c[pix * palette.nComps + curComp];
if::32::32.0972::      } else {
if::35::236.2597::      pixBits = palette.bpc[curComp];
if::36::53.2979::    }
if::37::407.4935::    if (++curComp == (Guint)(havePalette ? palette.nComps : img.nComps)) {
if::38::56.5746::#endif
if::39::118.2036::      curComp = 0;
if::40::249.5029::      if (++curX == (img.xSize >> reduction)) {
if::41::128.1030::	curX = img.xOffsetR;
if::42::73.3373::	++curY;
if::43::95.7358::	eol = gTrue;
if::44::64.4330::      }
if::45::50.7133::    }
if::46::159.3563::    if (pixBits == 8) {
if::47::284.5100::      readBuf = (readBuf << 8) | (pix & 0xff);
if::48::75.0446::    } else {
if::49::418.3277::      readBuf = (readBuf << pixBits) | (pix & ((1 << pixBits) - 1));
if::50::50.5412::    }
if::51::161.9032::    readBufLen += pixBits;
if::52::232.7638::    if (eol && (k = readBufLen & 7)) {
if::53::163.5013::      readBuf <<= 8 - k;
if::54::160.7550::      readBufLen += 8 - k;
if::55::47.0053::    }
if::56::131.4813::  } while (readBufLen < 8);
if::57::10.6865::}
fetch_interval_quantifier::1::41.1260::static int
fetch_interval_quantifier::2::411.0843::fetch_interval_quantifier(UChar** src, UChar* end, PToken* tok, ScanEnv* env)
fetch_interval_quantifier::3::30.9140::{
fetch_interval_quantifier::4::212.9805::  int low, up, syn_allow, non_low = 0;
fetch_interval_quantifier::5::82.7029::  int r = 0;
fetch_interval_quantifier::6::93.4678::  OnigCodePoint c;
fetch_interval_quantifier::7::144.5217::  OnigEncoding enc = env->enc;
fetch_interval_quantifier::8::119.1030::  UChar* p = *src;
fetch_interval_quantifier::9::110.5689::  PFETCH_READY;
fetch_interval_quantifier::10::428.6137::  syn_allow = IS_SYNTAX_BV(env->syntax, ONIG_SYN_ALLOW_INVALID_INTERVAL);
fetch_interval_quantifier::11::93.7170::  if (PEND) {
fetch_interval_quantifier::12::107.1004::    if (syn_allow)
fetch_interval_quantifier::13::204.5364::      return 1;  /* "....{" : OK! */
fetch_interval_quantifier::14::50.7583::    else
fetch_interval_quantifier::15::388.0942::      return ONIGERR_END_PATTERN_AT_LEFT_BRACE;  /* "....{" syntax error */
fetch_interval_quantifier::16::33.5891::  }
fetch_interval_quantifier::17::114.5347::  if (! syn_allow) {
fetch_interval_quantifier::18::98.0815::    c = PPEEK;
fetch_interval_quantifier::19::261.8784::    if (c == ')' || c == '(' || c == '|') {
fetch_interval_quantifier::20::296.1773::      return ONIGERR_END_PATTERN_AT_LEFT_BRACE;
fetch_interval_quantifier::21::47.8392::    }
fetch_interval_quantifier::22::33.5976::  }
fetch_interval_quantifier::23::196.6565::  low = scan_number(&p, end, env->enc);
fetch_interval_quantifier::24::380.1439::  if (low < 0) return ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE;
fetch_interval_quantifier::25::204.2082::  if (low > ONIG_MAX_REPEAT_NUM)
fetch_interval_quantifier::26::327.4113::    return ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE;
fetch_interval_quantifier::27::205.0797::  if (p == *src) { /* can't read low */
fetch_interval_quantifier::28::489.0792::    if (IS_SYNTAX_BV(env->syntax, ONIG_SYN_ALLOW_INTERVAL_LOW_ABBREV)) {
fetch_interval_quantifier::29::224.6955::      /* allow {,n} as {0,n} */
fetch_interval_quantifier::30::99.9926::      low = 0;
fetch_interval_quantifier::31::124.9606::      non_low = 1;
fetch_interval_quantifier::32::51.1271::    }
fetch_interval_quantifier::33::52.4297::    else
fetch_interval_quantifier::34::106.4162::      goto invalid;
fetch_interval_quantifier::35::36.1613::  }
fetch_interval_quantifier::36::107.6365::  if (PEND) goto invalid;
fetch_interval_quantifier::40::236.0638::    up = scan_number(&p, end, env->enc);
fetch_interval_quantifier::41::424.9218::    if (up < 0) return ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE;
fetch_interval_quantifier::42::221.0428::    if (up > ONIG_MAX_REPEAT_NUM)
fetch_interval_quantifier::43::352.1755::      return ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE;
fetch_interval_quantifier::44::122.5207::    if (p == prev) {
fetch_interval_quantifier::45::151.8612::      if (non_low != 0)
fetch_interval_quantifier::46::117.8715::        goto invalid;
fetch_interval_quantifier::47::343.3518::      up = INFINITE_REPEAT;  /* {n,} : {n,infinite} */
fetch_interval_quantifier::48::47.2162::    }
fetch_interval_quantifier::49::34.7966::  }
fetch_interval_quantifier::50::49.2110::  else {
fetch_interval_quantifier::51::136.9336::    if (non_low != 0)
fetch_interval_quantifier::52::101.6766::      goto invalid;
fetch_interval_quantifier::53::108.1659::    PUNFETCH;
fetch_interval_quantifier::54::209.6900::    up = low;  /* {n} : exact n times */
fetch_interval_quantifier::55::155.1302::    r = 2;     /* fixed */
fetch_interval_quantifier::56::34.7900::  }
fetch_interval_quantifier::57::134.6706::  if (PEND) goto invalid;
fetch_interval_quantifier::58::103.9387::  PFETCH(c);
fetch_interval_quantifier::59::430.6043::  if (IS_SYNTAX_OP(env->syntax, ONIG_SYN_OP_ESC_BRACE_INTERVAL)) {
fetch_interval_quantifier::60::261.4764::    if (c != MC_ESC(env->syntax)) goto invalid;
fetch_interval_quantifier::61::117.5699::    PFETCH(c);
fetch_interval_quantifier::62::34.3979::  }
fetch_interval_quantifier::63::160.5663::  if (c != '}') goto invalid;
fetch_interval_quantifier::64::103.6842::          Expand Down
fetch_interval_quantifier::65::277.9721::  if (!IS_INFINITE_REPEAT(up) && low > up) {
fetch_interval_quantifier::66::169.6958::    /* {n,m}+ supported case */
fetch_interval_quantifier::67::500.5850::    if (IS_SYNTAX_OP2(env->syntax, ONIG_SYN_OP2_PLUS_POSSESSIVE_INTERVAL))
fetch_interval_quantifier::68::407.2982::      return ONIGERR_UPPER_SMALLER_THAN_LOWER_IN_REPEAT_RANGE;
fetch_interval_quantifier::69::219.8139::    tok->u.repeat.possessive = 1;
fetch_interval_quantifier::70::52.3426::    {
fetch_interval_quantifier::71::98.2045::      int tmp;
fetch_interval_quantifier::72::89.6856::      tmp = low; low = up; up = tmp;
fetch_interval_quantifier::76::223.3496::    tok->u.repeat.possessive = 0;
fetch_interval_quantifier::77::159.3730::  tok->type = TK_INTERVAL;
fetch_interval_quantifier::78::167.4665::  tok->u.repeat.lower = low;
fetch_interval_quantifier::79::161.3937::  tok->u.repeat.upper = up;
fetch_interval_quantifier::80::81.2089::  *src = p;
fetch_interval_quantifier::81::251.6312::  return r; /* 0: normal {n,m}, 2: fixed {n} */
fetch_interval_quantifier::82::43.5250:: invalid:
fetch_interval_quantifier::83::102.6642::  if (syn_allow) {
fetch_interval_quantifier::84::250.3277::    /* *src = p; */ /* !!! Don't do this line !!! */
fetch_interval_quantifier::85::124.8923::    return 1;  /* OK */
fetch_interval_quantifier::86::32.0958::  }
fetch_interval_quantifier::87::34.2866::  else
fetch_interval_quantifier::88::251.6315::    return ONIGERR_INVALID_REPEAT_RANGE_PATTERN;
fetch_interval_quantifier::89::9.7415::}
add_ctype_to_cc::1::41.6243::static int
add_ctype_to_cc::2::374.5643::add_ctype_to_cc(CClassNode* cc, int ctype, int not, ScanEnv* env)
add_ctype_to_cc::3::29.8757::{
add_ctype_to_cc::4::144.2722::#define ASCII_LIMIT    127
add_ctype_to_cc::5::88.8408::  int c, r;
add_ctype_to_cc::6::110.4714::  int ascii_mode;
add_ctype_to_cc::7::132.2598::  const OnigCodePoint *ranges;
add_ctype_to_cc::8::94.1155::  OnigCodePoint limit;
add_ctype_to_cc::9::126.0315::  OnigCodePoint sb_out;
add_ctype_to_cc::10::144.2814::  OnigEncoding enc = env->enc;
add_ctype_to_cc::11::346.7145::  ascii_mode = IS_ASCII_MODE_CTYPE_OPTION(ctype, env->options);
add_ctype_to_cc::12::403.9552::  r = ONIGENC_GET_CTYPE_CODE_RANGE(enc, ctype, &sb_out, &ranges);
add_ctype_to_cc::13::109.3235::  if (r == 0) {
add_ctype_to_cc::14::158.0710::    if (ascii_mode == 0)
add_ctype_to_cc::15::450.5183::      r = add_ctype_to_cc_by_range(cc, ctype, not, env->enc, sb_out, ranges);
add_ctype_to_cc::16::53.9876::    else
add_ctype_to_cc::17::463.3284::      r = add_ctype_to_cc_by_range_limit(cc, ctype, not, env->enc, sb_out,
add_ctype_to_cc::18::401.9000::                                         ranges, ASCII_LIMIT);
add_ctype_to_cc::19::76.1337::    return r;
add_ctype_to_cc::20::36.5661::  }
add_ctype_to_cc::21::237.0565::  else if (r != ONIG_NO_SUPPORT_CONFIG) {
add_ctype_to_cc::22::74.2196::    return r;
add_ctype_to_cc::23::35.3020::  }
add_ctype_to_cc::24::72.0495::  r = 0;
add_ctype_to_cc::25::299.0276::  limit = ascii_mode ? ASCII_LIMIT : SINGLE_BYTE_SIZE;
add_ctype_to_cc::26::96.0189::  switch (ctype) {
add_ctype_to_cc::27::191.5822::  case ONIGENC_CTYPE_ALPHA:
add_ctype_to_cc::28::182.7241::  case ONIGENC_CTYPE_BLANK:
add_ctype_to_cc::29::189.1756::  case ONIGENC_CTYPE_CNTRL:
add_ctype_to_cc::30::192.1335::  case ONIGENC_CTYPE_DIGIT:
add_ctype_to_cc::31::179.2854::  case ONIGENC_CTYPE_LOWER:
add_ctype_to_cc::32::198.8511::  case ONIGENC_CTYPE_PUNCT:
add_ctype_to_cc::33::185.1246::  case ONIGENC_CTYPE_SPACE:
add_ctype_to_cc::34::100.7033::  case ONIGENC_CTYPE_UPPER:
add_ctype_to_cc::37::192.1105::  case ONIGENC_CTYPE_ALNUM:
add_ctype_to_cc::38::142.9619::    if (not != 0) {
add_ctype_to_cc::39::279.2928::      for (c = 0; c < (int )limit; c++) {
add_ctype_to_cc::40::434.9385::        if (! ONIGENC_IS_CODE_CTYPE(enc, (OnigCodePoint )c, ctype))
add_ctype_to_cc::41::257.2808::          BITSET_SET_BIT(cc->bs, c);
add_ctype_to_cc::42::65.0578::      }
add_ctype_to_cc::43::309.6531::      for (c = limit; c < SINGLE_BYTE_SIZE; c++) {
add_ctype_to_cc::44::239.9961::        BITSET_SET_BIT(cc->bs, c);
add_ctype_to_cc::45::63.3072::      }
add_ctype_to_cc::46::324.4833::      ADD_ALL_MULTI_BYTE_RANGE(enc, cc->mbuf);
add_ctype_to_cc::47::50.1888::    }
add_ctype_to_cc::48::66.2683::    else {
add_ctype_to_cc::49::257.5817::      for (c = 0; c < (int )limit; c++) {
add_ctype_to_cc::50::414.9460::        if (ONIGENC_IS_CODE_CTYPE(enc, (OnigCodePoint )c, ctype))
add_ctype_to_cc::51::262.3593::          BITSET_SET_BIT(cc->bs, c);
add_ctype_to_cc::52::62.9919::      }
add_ctype_to_cc::53::49.4595::    }
add_ctype_to_cc::54::65.6830::    break;
add_ctype_to_cc::55::174.6965::  case ONIGENC_CTYPE_GRAPH:
add_ctype_to_cc::56::178.6531::  case ONIGENC_CTYPE_PRINT:
add_ctype_to_cc::57::178.1742::  case ONIGENC_CTYPE_WORD:
add_ctype_to_cc::58::128.9795::    if (not != 0) {
add_ctype_to_cc::59::261.9026::      for (c = 0; c < (int )limit; c++) {
add_ctype_to_cc::60::439.4428::        if (ONIGENC_CODE_TO_MBCLEN(enc, c) > 0 /* check invalid code point */
add_ctype_to_cc::61::465.2062::            && ! ONIGENC_IS_CODE_CTYPE(enc, (OnigCodePoint )c, ctype))
add_ctype_to_cc::62::267.3246::          BITSET_SET_BIT(cc->bs, c);
add_ctype_to_cc::63::68.5490::      }
add_ctype_to_cc::64::314.3848::      for (c = limit; c < SINGLE_BYTE_SIZE; c++) {
add_ctype_to_cc::65::405.3096::        if (ONIGENC_CODE_TO_MBCLEN(enc, c) > 0)
add_ctype_to_cc::66::281.6815::          BITSET_SET_BIT(cc->bs, c);
add_ctype_to_cc::67::67.4687::      }
add_ctype_to_cc::68::54.6288::    }
add_ctype_to_cc::69::70.6698::    else {
add_ctype_to_cc::70::278.2114::      for (c = 0; c < (int )limit; c++) {
add_ctype_to_cc::71::423.6048::        if (ONIGENC_IS_CODE_CTYPE(enc, (OnigCodePoint )c, ctype))
add_ctype_to_cc::72::262.2673::          BITSET_SET_BIT(cc->bs, c);
add_ctype_to_cc::73::65.7620::      }
add_ctype_to_cc::74::177.1830::      if (ascii_mode == 0)
add_ctype_to_cc::75::335.7355::        ADD_ALL_MULTI_BYTE_RANGE(enc, cc->mbuf);
add_ctype_to_cc::76::48.6373::    }
add_ctype_to_cc::77::66.7282::    break;
add_ctype_to_cc::78::52.9559::  default:
add_ctype_to_cc::79::171.2441::    return ONIGERR_PARSER_BUG;
add_ctype_to_cc::80::63.4929::    break;
add_ctype_to_cc::81::33.7282::  }
add_ctype_to_cc::82::57.5367::  return r;
add_ctype_to_cc::83::10.9603::}
regset_search_body_position_lead::1::58.6265::static inline int
regset_search_body_position_lead::2::249.6199::regset_search_body_position_lead(OnigRegSet* set,
regset_search_body_position_lead::3::253.1787::           const UChar* str, const UChar* end,
regset_search_body_position_lead::4::324.1053::           const UChar* start, const UChar* range, /* match start range */
regset_search_body_position_lead::5::246.7547::           const UChar* orig_range, /* data range */
regset_search_body_position_lead::6::314.5249::           OnigOptionType option, MatchArg* msas, int* rmatch_pos)
regset_search_body_position_lead::7::30.2753::{
regset_search_body_position_lead::8::106.8320::  int r, n, i;
regset_search_body_position_lead::9::124.1479::  UChar *s, *prev;
regset_search_body_position_lead::10::183.7427::  UChar *low, *high, *low_prev;
regset_search_body_position_lead::11::113.4671::  UChar* sch_range;
regset_search_body_position_lead::12::97.2275::  regex_t* reg;
regset_search_body_position_lead::13::99.0782::  OnigEncoding enc;
regset_search_body_position_lead::14::88.3439::  SearchRange* sr;
regset_search_body_position_lead::15::107.7872::  n   = set->n;
regset_search_body_position_lead::16::97.9284::  enc = set->enc;
regset_search_body_position_lead::17::129.6364::  s = (UChar* )start;
regset_search_body_position_lead::18::97.5763::  if (s > str)
regset_search_body_position_lead::19::288.4808::    prev = onigenc_get_prev_char_head(enc, str, s);
regset_search_body_position_lead::20::36.3779::  else
regset_search_body_position_lead::21::149.6837::    prev = (UChar* )NULL;
regset_search_body_position_lead::22::256.3950::  sr = (SearchRange* )xmalloc(sizeof(*sr) * n);
regset_search_body_position_lead::23::199.9956::  CHECK_NULL_RETURN_MEMERR(sr);
regset_search_body_position_lead::24::183.6243::  for (i = 0; i < n; i++) {
regset_search_body_position_lead::25::160.7586::    reg = set->rs[i].reg;
regset_search_body_position_lead::26::183.6033::    sr[i].state = SRS_DEAD;
regset_search_body_position_lead::27::228.7608::    if (reg->optimize != OPTIMIZE_NONE) {
regset_search_body_position_lead::28::253.8942::      if (reg->dist_max != INFINITE_LEN) {
regset_search_body_position_lead::29::281.2600::        sch_range = (UChar* )range + reg->dist_max;
regset_search_body_position_lead::30::312.2595::        if (sch_range > end) sch_range = (UChar* )end;
regset_search_body_position_lead::31::476.1252::        if (forward_search(reg, str, end, s, sch_range, &low, &high, &low_prev)) {
regset_search_body_position_lead::32::263.2355::          sr[i].state = SRS_LOW_HIGH;
regset_search_body_position_lead::34::222.4904::          sr[i].high = high;
regset_search_body_position_lead::35::279.6599::          sr[i].low_prev = low_prev;
regset_search_body_position_lead::36::261.7770::          sr[i].sch_range = sch_range;
regset_search_body_position_lead::37::84.1614::        }
regset_search_body_position_lead::38::70.7644::      }
regset_search_body_position_lead::39::87.3533::      else {
regset_search_body_position_lead::40::218.4551::        sch_range = (UChar* )end;
regset_search_body_position_lead::41::330.0107::        if (forward_search(reg, str, end, s, sch_range,
regset_search_body_position_lead::42::402.2458::                           &low, &high, (UChar** )NULL)) {
regset_search_body_position_lead::43::185.3076::          goto total_active;
regset_search_body_position_lead::44::84.3295::        }
regset_search_body_position_lead::45::68.3958::      }
regset_search_body_position_lead::46::51.4801::    }
regset_search_body_position_lead::47::69.1310::    else {
regset_search_body_position_lead::48::96.4603::    total_active:
regset_search_body_position_lead::49::258.9657::      sr[i].state    = SRS_ALL_RANGE;
regset_search_body_position_lead::50::207.4702::      sr[i].low      = s;
regset_search_body_position_lead::51::262.3542::      sr[i].high     = (UChar* )range;
regset_search_body_position_lead::52::189.4577::      sr[i].low_prev = prev;
regset_search_body_position_lead::53::50.0249::    }
regset_search_body_position_lead::54::36.1659::  }
regset_search_body_position_lead::55::363.7369::#define ACTIVATE_ALL_LOW_HIGH_SEARCH_THRESHOLD_LEN   500
regset_search_body_position_lead::56::172.1337::  if (set->all_low_high != 0
regset_search_body_position_lead::57::437.9557::      && range - start > ACTIVATE_ALL_LOW_HIGH_SEARCH_THRESHOLD_LEN) {
regset_search_body_position_lead::58::67.7073::    do {
regset_search_body_position_lead::59::151.0508::      int try_count = 0;
regset_search_body_position_lead::60::245.7558::      for (i = 0; i < n; i++) {
regset_search_body_position_lead::61::298.3614::        if (sr[i].state == SRS_DEAD) continue;
regset_search_body_position_lead::62::250.0062::        if (s <  sr[i].low) continue;
regset_search_body_position_lead::63::236.4504::        if (s >= sr[i].high) {
regset_search_body_position_lead::64::248.4312::          if (forward_search(set->rs[i].reg, str, end, s, sr[i].sch_range,
regset_search_body_position_lead::65::513.3978::                             &low, &high, &low_prev) != 0) {
regset_search_body_position_lead::66::286.0231::            sr[i].low      = low;
regset_search_body_position_lead::67::267.2645::            sr[i].high     = high;
regset_search_body_position_lead::68::293.0648::            sr[i].low_prev = low_prev;
regset_search_body_position_lead::69::228.3838::            if (s < low) continue;
regset_search_body_position_lead::70::100.8091::          }
regset_search_body_position_lead::71::117.5231::          else {
regset_search_body_position_lead::72::278.9341::            sr[i].state = SRS_DEAD;
regset_search_body_position_lead::73::144.7103::            continue;
regset_search_body_position_lead::74::99.6340::          }
regset_search_body_position_lead::75::87.0842::        }
regset_search_body_position_lead::76::221.6405::        reg = set->rs[i].reg;
regset_search_body_position_lead::77::332.6227::        REGSET_MATCH_AND_RETURN_CHECK(orig_range);
regset_search_body_position_lead::78::134.6331::        try_count++;
regset_search_body_position_lead::79::174.0322::      } /* for (i) */
regset_search_body_position_lead::80::175.5695::      if (s >= range) break;
regset_search_body_position_lead::81::184.0388::      if (try_count == 0) {
regset_search_body_position_lead::82::199.3331::        low = (UChar* )range;
regset_search_body_position_lead::83::276.1794::        for (i = 0; i < n; i++) {
regset_search_body_position_lead::84::467.1860::          if (sr[i].state == SRS_LOW_HIGH && low > sr[i].low) {
regset_search_body_position_lead::85::231.8929::            low = sr[i].low;
regset_search_body_position_lead::86::300.5899::            low_prev = sr[i].low_prev;
regset_search_body_position_lead::87::103.2493::          }
regset_search_body_position_lead::88::88.4169::        }
regset_search_body_position_lead::89::205.6759::        if (low == range) break;
regset_search_body_position_lead::90::134.9560::        s = low;
regset_search_body_position_lead::91::177.6306::        prev = low_prev;
regset_search_body_position_lead::92::76.9674::      }
regset_search_body_position_lead::93::68.3738::      else {
regset_search_body_position_lead::96::73.9763::      }
regset_search_body_position_lead::97::126.0249::    } while (1);
regset_search_body_position_lead::98::44.3084::  }
regset_search_body_position_lead::99::63.7569::  else {
regset_search_body_position_lead::100::196.8486::    int prev_is_newline = 1;
regset_search_body_position_lead::101::73.3721::    do {
regset_search_body_position_lead::102::270.7310::      for (i = 0; i < n; i++) {
regset_search_body_position_lead::103::311.5394::        if (sr[i].state == SRS_DEAD) continue;
regset_search_body_position_lead::104::325.5893::        if (sr[i].state == SRS_LOW_HIGH) {
regset_search_body_position_lead::105::272.2921::          if (s <  sr[i].low) continue;
regset_search_body_position_lead::106::249.2542::          if (s >= sr[i].high) {
regset_search_body_position_lead::107::524.1760::            if (forward_search(set->rs[i].reg, str, end, s, sr[i].sch_range,
regset_search_body_position_lead::108::472.4893::                               &low, &high, &low_prev) != 0) {
regset_search_body_position_lead::109::278.9970::              sr[i].low      = low;
regset_search_body_position_lead::110::266.7707::              sr[i].high     = high;
regset_search_body_position_lead::111::341.9163::              /* sr[i].low_prev = low_prev; */
regset_search_body_position_lead::112::245.3173::              if (s < low) continue;
regset_search_body_position_lead::113::113.8968::            }
regset_search_body_position_lead::114::135.5588::            else {
regset_search_body_position_lead::115::306.0024::              sr[i].state = SRS_DEAD;
regset_search_body_position_lead::116::164.2961::              continue;
regset_search_body_position_lead::117::117.5714::            }
regset_search_body_position_lead::118::103.3214::          }
regset_search_body_position_lead::119::88.7242::        }
regset_search_body_position_lead::120::232.5530::        reg = set->rs[i].reg;
regset_search_body_position_lead::121::520.3774::        if ((reg->anchor & ANCR_ANYCHAR_INF) == 0 || prev_is_newline != 0) {
regset_search_body_position_lead::122::57.8638::          REGSET_MATCH_AND_RETURN_CHECK(orig_range);
regset_search_body_position_lead::123::87.3224::        }
regset_search_body_position_lead::124::72.6311::      }
regset_search_body_position_lead::125::182.7693::      if (s >= range) break;
regset_search_body_position_lead::126::207.2495::      if (set->anychar_inf != 0)
regset_search_body_position_lead::127::409.1928::        prev_is_newline = ONIGENC_IS_MBC_NEWLINE(set->enc, s, end);
regset_search_body_position_lead::128::107.0987::      prev = s;
regset_search_body_position_lead::129::169.3526::      s += enclen(enc, s);
regset_search_body_position_lead::130::99.0986::    } while (1);
regset_search_body_position_lead::131::35.3742::  }
regset_search_body_position_lead::132::91.4825::  xfree(sr);
regset_search_body_position_lead::133::117.8175::  return ONIG_MISMATCH;
regset_search_body_position_lead::134::41.4552:: finish:
regset_search_body_position_lead::135::89.1362::  xfree(sr);
regset_search_body_position_lead::136::59.0488::  return r;
regset_search_body_position_lead::137::40.5085:: match:
regset_search_body_position_lead::138::86.2888::  xfree(sr);
regset_search_body_position_lead::139::169.7710::  *rmatch_pos = (int )(s - str);
regset_search_body_position_lead::140::58.0520::  return i;
regset_search_body_position_lead::141::10.9952::}
lookup1_values::1::194.1291::static int lookup1_values(int entries, int dim)
lookup1_values::2::33.3162::{
lookup1_values::3::353.0518::   int r = (int) floor(exp((float) log((float) entries) / dim));
lookup1_values::4::469.3562::   if ((int) floor(pow((float) r+1, dim)) <= entries)   // (int) cast for MinGW warning;
lookup1_values::5::591.5616::      ++r;                                              // floor() to avoid _ftol() when non-CRT
lookup1_values::6::229.9938::   assert(pow((float) r+1, dim) > entries);
lookup1_values::7::361.7980::   assert((int) floor(pow((float) r, dim)) <= entries); // (int),floor() as above
lookup1_values::8::61.0458::   return r;
lookup1_values::9::9.6791::}
draw_line::1::477.4795::static __forceinline void draw_line(float *output, int x0, int y0, int x1, int y1, int n)
draw_line::2::32.7834::{
draw_line::3::159.3079::   int dy = y1 - y0;
draw_line::4::160.2997::   int adx = x1 - x0;
draw_line::5::145.9855::   int ady = abs(dy);
draw_line::6::75.0427::   int base;
draw_line::7::174.2773::   int x=x0,y=y0;
draw_line::8::98.9115::   int err = 0;
draw_line::9::70.0349::   int sy;
draw_line::10::201.1841::#ifdef STB_VORBIS_DIVIDE_TABLE
draw_line::11::329.6472::   if (adx < DIVTAB_DENOM && ady < DIVTAB_NUMER) {
draw_line::12::138.7425::      if (dy < 0) {
draw_line::13::258.8596::         base = -integer_divide_table[ady][adx];
draw_line::14::150.6586::         sy = base-1;
draw_line::15::92.1736::      } else {
draw_line::16::259.1598::         base =  integer_divide_table[ady][adx];
draw_line::17::154.2080::         sy = base+1;
draw_line::18::66.1606::      }
draw_line::19::71.0475::   } else {
draw_line::20::146.2268::      base = dy / adx;
draw_line::21::131.3635::      if (dy < 0)
draw_line::22::151.3869::         sy = base - 1;
draw_line::23::67.4346::      else
draw_line::24::151.7551::         sy = base+1;
draw_line::25::42.0529::   }
draw_line::26::49.2391::#else
draw_line::27::123.1797::   base = dy / adx;
draw_line::28::109.7121::   if (dy < 0)
draw_line::29::130.1559::      sy = base - 1;
draw_line::30::47.0665::   else
draw_line::31::130.0653::      sy = base+1;
draw_line::32::52.0022::#endif
draw_line::33::190.9099::   ady -= abs(base) * adx;
draw_line::34::182.8303::   if (x1 > n) x1 = n;
draw_line::35::135.6498::   if (x < x1) {
draw_line::36::280.7701::      LINE_OP(output[x], inverse_db_table[y]);
draw_line::37::256.5208::      for (++x; x < x1; ++x) {
draw_line::38::146.1932::         err += ady;
draw_line::39::194.2744::         if (err >= adx) {
draw_line::40::155.4049::            err -= adx;
draw_line::43::173.0496::            y += base;
draw_line::44::306.6480::         LINE_OP(output[x], inverse_db_table[y]);
draw_line::45::65.9298::      }
draw_line::46::39.9679::   }
draw_line::47::12.2590::}
Mat_VarGetSize::1::51.7475::size_t
Mat_VarGetSize::2::201.5730::Mat_VarGetSize(matvar_t *matvar)
Mat_VarGetSize::3::32.8136::{
Mat_VarGetSize::4::104.7434::    size_t i;
Mat_VarGetSize::5::234.8807::    size_t bytes = 0, overhead = 0, ptr = 0;
Mat_VarGetSize::6::839.5264::#if defined(_WIN64) || (defined(__SIZEOF_POINTER__) && (__SIZEOF_POINTER__ == 8)) || (defined(SIZEOF_VOID_P) && (SIZEOF_VOID_P == 8))
Mat_VarGetSize::7::203.4805::    /* 112 bytes cell/struct overhead for 64-bit system */
Mat_VarGetSize::8::86.4527::    overhead = 112;
Mat_VarGetSize::9::91.8539::    ptr = 8;
Mat_VarGetSize::10::826.2623::#elif defined(_WIN32) || (defined(__SIZEOF_POINTER__) && (__SIZEOF_POINTER__ == 4)) || (defined(SIZEOF_VOID_P) && (SIZEOF_VOID_P == 4))
Mat_VarGetSize::11::212.3140::    /* 60 bytes cell/struct overhead for 32-bit system */
Mat_VarGetSize::12::93.6958::    overhead = 60;
Mat_VarGetSize::13::94.0528::    ptr = 4;
Mat_VarGetSize::14::50.2111::#endif
Mat_VarGetSize::15::235.8581::    if ( matvar->class_type == MAT_C_STRUCT ) {
Mat_VarGetSize::16::303.8921::        matvar_t **fields = (matvar_t**)matvar->data;
Mat_VarGetSize::17::161.7549::        if ( NULL != fields ) {
Mat_VarGetSize::18::354.9989::            size_t nelems_x_nfields = matvar->internal->num_fields;
Mat_VarGetSize::19::325.6912::            SafeMulDims(matvar, &nelems_x_nfields);
Mat_VarGetSize::20::329.2320::            SafeMul(&bytes, nelems_x_nfields, overhead);
Mat_VarGetSize::21::368.6779::            for ( i = 0; i < nelems_x_nfields; i++ ) {
Mat_VarGetSize::22::282.0167::                if ( NULL != fields[i] ) {
Mat_VarGetSize::23::400.2925::                    if ( MAT_C_EMPTY != fields[i]->class_type )
Mat_VarGetSize::24::107.5179::                        bytes += Mat_VarGetSize(fields[i]);
Mat_VarGetSize::25::198.6793::                    else
Mat_VarGetSize::26::341.7333::                        bytes += ptr - overhead;
Mat_VarGetSize::27::152.8117::                }
Mat_VarGetSize::28::120.8809::            }
Mat_VarGetSize::29::89.9130::        }
Mat_VarGetSize::30::386.1885::        bytes += 64 /* max field name length */ *matvar->internal->num_fields;
Mat_VarGetSize::31::314.0159::    } else if ( matvar->class_type == MAT_C_CELL ) {
Mat_VarGetSize::32::361.8597::        matvar_t **cells = (matvar_t**)matvar->data;
Mat_VarGetSize::33::192.6603::        if ( NULL != cells ) {
Mat_VarGetSize::34::393.2097::            size_t nelems = matvar->nbytes / matvar->data_size;
Mat_VarGetSize::35::231.0552::            bytes = nelems*overhead;
Mat_VarGetSize::36::339.5086::            for ( i = 0; i < nelems; i++ ) {
Mat_VarGetSize::37::297.7177::                if ( NULL != cells[i] ) {
Mat_VarGetSize::38::427.7729::                    if ( MAT_C_EMPTY != cells[i]->class_type )
Mat_VarGetSize::39::409.1678::                        bytes += Mat_VarGetSize(cells[i]);
Mat_VarGetSize::40::188.4085::                    else
Mat_VarGetSize::41::324.7773::                        bytes += ptr - overhead;
Mat_VarGetSize::42::153.7890::                }
Mat_VarGetSize::43::123.4814::            }
Mat_VarGetSize::44::91.9917::        }
Mat_VarGetSize::45::352.6809::    } else if ( matvar->class_type == MAT_C_SPARSE ) {
Mat_VarGetSize::46::436.2373::        mat_sparse_t *sparse = (mat_sparse_t*)matvar->data;
Mat_VarGetSize::47::36.2503::        if ( NULL != sparse ) {
Mat_VarGetSize::48::375.1745::            bytes = sparse->ndata*Mat_SizeOf(matvar->data_type);
Mat_VarGetSize::49::222.8122::            if ( matvar->isComplex )
Mat_VarGetSize::50::195.6886::                bytes *= 2;
Mat_VarGetSize::51::869.8201::#if defined(_WIN64) || (defined(__SIZEOF_POINTER__) && (__SIZEOF_POINTER__ == 8)) || (defined(SIZEOF_VOID_P) && (SIZEOF_VOID_P == 8))
Mat_VarGetSize::52::410.8690::            /* 8 byte integers for 64-bit system (as displayed in MATLAB (x64) whos) */
Mat_VarGetSize::53::303.3218::            bytes += (sparse->nir + sparse->njc)*8;
Mat_VarGetSize::54::870.4768::#elif defined(_WIN32) || (defined(__SIZEOF_POINTER__) && (__SIZEOF_POINTER__ == 4)) || (defined(SIZEOF_VOID_P) && (SIZEOF_VOID_P == 4))
Mat_VarGetSize::55::382.2044::            /* 4 byte integers for 32-bit system (as defined by mat_sparse_t) */
Mat_VarGetSize::56::301.1723::            bytes += (sparse->nir + sparse->njc)*4;
Mat_VarGetSize::57::53.3896::#endif
Mat_VarGetSize::58::407.9464::            if ( sparse->ndata == 0 || sparse->nir == 0 || sparse->njc == 0 )
Mat_VarGetSize::59::314.4732::                bytes += matvar->isLogical ? 1 : 8;
Mat_VarGetSize::60::82.5534::        }
Mat_VarGetSize::61::82.6012::    } else {
Mat_VarGetSize::62::202.8700::        if ( matvar->rank > 0 ) {
Mat_VarGetSize::63::306.3081::            bytes = Mat_SizeOfClass(matvar->class_type);
Mat_VarGetSize::64::269.7681::            SafeMulDims(matvar, &bytes);
Mat_VarGetSize::65::233.3230::            if ( matvar->isComplex )
Mat_VarGetSize::66::103.3039::                bytes *= 2;
Mat_VarGetSize::69::71.5649::    return bytes;
Mat_VarGetSize::70::10.9490::}
Mat_VarRead4::1::44.1184::void
Mat_VarRead4::2::311.1602::Mat_VarRead4(mat_t *mat,matvar_t *matvar)
Mat_VarRead4::3::37.1367::{
Mat_VarRead4::4::161.5762::    size_t nelems = 1;
Mat_VarRead4::5::229.8470::    SafeMulDims(matvar, &nelems);
Mat_VarRead4::6::438.5237::    (void)fseek((FILE*)mat->fp,matvar->internal->datapos,SEEK_SET);
Mat_VarRead4::7::178.1441::    switch ( matvar->class_type ) {
Mat_VarRead4::8::193.1210::        case MAT_C_DOUBLE:
Mat_VarRead4::9::263.7849::            matvar->data_size = sizeof(double);
Mat_VarRead4::10::393.5902::            SafeMul(&matvar->nbytes, nelems, matvar->data_size);
Mat_VarRead4::11::239.6689::            if ( matvar->isComplex ) {
Mat_VarRead4::12::446.5171::                mat_complex_split_t *complex_data = ComplexMalloc(matvar->nbytes);
Mat_VarRead4::13::260.8023::                if ( NULL != complex_data ) {
Mat_VarRead4::14::290.3071::                    matvar->data = complex_data;
Mat_VarRead4::15::531.2787::                    ReadDoubleData(mat, (double*)complex_data->Re, matvar->data_type, nelems);
Mat_VarRead4::16::556.3959::                    ReadDoubleData(mat, (double*)complex_data->Im, matvar->data_type, nelems);
Mat_VarRead4::17::145.8039::                }
Mat_VarRead4::18::164.1876::                else {
Mat_VarRead4::19::405.2951::                    Mat_Critical("Couldn't allocate memory for the complex data");
Mat_VarRead4::20::145.6859::                }
Mat_VarRead4::21::147.0816::            } else {
Mat_VarRead4::22::361.4950::                matvar->data = malloc(matvar->nbytes);
Mat_VarRead4::23::34.5994::                if ( NULL != matvar->data ) {
Mat_VarRead4::24::615.7642::                    ReadDoubleData(mat, (double*)matvar->data, matvar->data_type, nelems);
Mat_VarRead4::25::150.8072::                }
Mat_VarRead4::26::172.3946::                else {
Mat_VarRead4::27::391.7090::                    Mat_Critical("Couldn't allocate memory for the data");
Mat_VarRead4::28::149.2421::                }
Mat_VarRead4::29::118.0006::            }
Mat_VarRead4::30::317.2440::            /* Update data type to match format of matvar->data */
Mat_VarRead4::31::333.4047::            matvar->data_type = MAT_T_DOUBLE;
Mat_VarRead4::32::137.3539::            break;
Mat_VarRead4::33::182.3104::        case MAT_C_CHAR:
Mat_VarRead4::34::236.7588::            matvar->data_size = 1;
Mat_VarRead4::35::250.2123::            matvar->nbytes = nelems;
Mat_VarRead4::36::320.5886::            matvar->data = malloc(matvar->nbytes);
Mat_VarRead4::37::260.3405::            if ( NULL != matvar->data ) {
Mat_VarRead4::38::616.7202::                ReadUInt8Data(mat, (mat_uint8_t*)matvar->data, matvar->data_type, nelems);
Mat_VarRead4::39::121.2214::            }
Mat_VarRead4::40::138.2059::            else {
Mat_VarRead4::41::362.2709::                Mat_Critical("Couldn't allocate memory for the data");
Mat_VarRead4::42::120.9831::            }
Mat_VarRead4::43::342.1460::            matvar->data_type = MAT_T_UINT8;
Mat_VarRead4::44::138.3842::            break;
Mat_VarRead4::45::205.7132::        case MAT_C_SPARSE:
Mat_VarRead4::46::287.9841::            matvar->data_size = sizeof(mat_sparse_t);
Mat_VarRead4::47::410.1418::            matvar->data      = malloc(matvar->data_size);
Mat_VarRead4::48::278.7766::            if ( NULL != matvar->data ) {
Mat_VarRead4::49::195.8589::                double tmp;
Mat_VarRead4::50::192.1446::                int i;
Mat_VarRead4::51::277.1377::                mat_sparse_t* sparse;
Mat_VarRead4::52::194.1290::                long fpos;
Mat_VarRead4::53::376.4138::                enum matio_types data_type = MAT_T_DOUBLE;
Mat_VarRead4::54::456.7657::                /* matvar->dims[1] either is 3 for real or 4 for complex sparse */
Mat_VarRead4::55::459.4768::                matvar->isComplex = matvar->dims[1] == 4 ? 1 : 0;
Mat_VarRead4::56::352.9947::                sparse = (mat_sparse_t*)matvar->data;
Mat_VarRead4::57::351.2333::                sparse->nir = matvar->dims[0] - 1;
Mat_VarRead4::58::282.8472::                sparse->nzmax = sparse->nir;
Mat_VarRead4::59::595.4474::                sparse->ir = (mat_int32_t*)malloc(sparse->nir*sizeof(mat_int32_t));
Mat_VarRead4::60::288.0600::                if ( sparse->ir != NULL ) {
Mat_VarRead4::61::481.0863::                    ReadInt32Data(mat, sparse->ir, data_type, sparse->nir);
Mat_VarRead4::62::418.0916::                    for ( i = 0; i < sparse->nir; i++ )
Mat_VarRead4::63::357.4316::                        sparse->ir[i] = sparse->ir[i] - 1;
Mat_VarRead4::64::209.3675::                } else {
Mat_VarRead4::65::325.1858::                    free(matvar->data);
Mat_VarRead4::66::324.2676::                    matvar->data = NULL;
Mat_VarRead4::67::450.6357::                    Mat_Critical("Couldn't allocate memory for the sparse row array");
Mat_VarRead4::68::217.9616::                    return;
Mat_VarRead4::69::152.8307::                }
Mat_VarRead4::70::390.2682::                ReadDoubleData(mat, &tmp, data_type, 1);
Mat_VarRead4::71::391.9092::                matvar->dims[0] = (size_t)tmp;
Mat_VarRead4::72::351.2659::                fpos = ftell((FILE*)mat->fp);
Mat_VarRead4::73::283.4763::                if ( fpos == -1L ) {
Mat_VarRead4::74::290.1154::                    free(sparse->ir);
Mat_VarRead4::75::295.3750::                    free(matvar->data);
Mat_VarRead4::76::308.3680::                    matvar->data = NULL;
Mat_VarRead4::77::361.3480::                    Mat_Critical("Couldn't determine file position");
Mat_VarRead4::78::217.7777::                    return;
Mat_VarRead4::79::153.1856::                }
Mat_VarRead4::80::638.0989::                (void)fseek((FILE*)mat->fp,sparse->nir*Mat_SizeOf(data_type),
Mat_VarRead4::81::263.6945::                    SEEK_CUR);
Mat_VarRead4::82::329.7613::                ReadDoubleData(mat, &tmp, data_type, 1);
Mat_VarRead4::83::410.3352::                if ( tmp > INT_MAX-1 || tmp < 0 ) {
Mat_VarRead4::84::307.8929::                    free(sparse->ir);
Mat_VarRead4::85::301.9914::                    free(matvar->data);
Mat_VarRead4::86::303.9593::                    matvar->data = NULL;
Mat_VarRead4::87::358.2629::                    Mat_Critical("Invalid column dimension for sparse matrix");
Mat_VarRead4::88::209.1986::                    return;
Mat_VarRead4::89::153.2791::                }
Mat_VarRead4::90::386.4661::                matvar->dims[1] = (size_t)tmp;
Mat_VarRead4::91::498.2378::                (void)fseek((FILE*)mat->fp,fpos,SEEK_SET);
Mat_VarRead4::92::396.0416::                if ( matvar->dims[1] > INT_MAX-1 ) {
Mat_VarRead4::93::287.5795::                    free(sparse->ir);
Mat_VarRead4::94::296.2600::                    free(matvar->data);
Mat_VarRead4::95::303.1714::                    matvar->data = NULL;
Mat_VarRead4::96::366.6634::                    Mat_Critical("Invalid column dimension for sparse matrix");
Mat_VarRead4::97::215.0642::                    return;
Mat_VarRead4::98::152.6569::                }
Mat_VarRead4::99::457.3169::                sparse->njc = (int)matvar->dims[1] + 1;
Mat_VarRead4::100::554.6801::                sparse->jc = (mat_int32_t*)malloc(sparse->njc*sizeof(mat_int32_t));
Mat_VarRead4::101::348.0935::                if ( sparse->jc != NULL ) {
Mat_VarRead4::102::345.1464::                    mat_int32_t *jc;
Mat_VarRead4::103::699.7192::                    jc = (mat_int32_t*)malloc(sparse->nir*sizeof(mat_int32_t));
Mat_VarRead4::104::315.5755::                    if ( jc != NULL ) {
Mat_VarRead4::105::287.0554::                        int j = 0;
Mat_VarRead4::106::376.3002::                        sparse->jc[0] = 0;
Mat_VarRead4::107::521.4212::                        ReadInt32Data(mat, jc, data_type, sparse->nir);
Mat_VarRead4::108::529.4461::                        for ( i = 1; i < sparse->njc-1; i++ ) {
Mat_VarRead4::109::502.0202::                            while ( j < sparse->nir && jc[j] <= i )
Mat_VarRead4::110::315.2025::                                j++;
Mat_VarRead4::111::429.6146::                            sparse->jc[i] = j;
Mat_VarRead4::112::222.6670::                        }
Mat_VarRead4::113::312.0152::                        free(jc);
Mat_VarRead4::114::325.0355::                        /* terminating nnz */
Mat_VarRead4::115::420.0121::                        sparse->jc[sparse->njc-1] = sparse->nir;
Mat_VarRead4::116::254.2315::                    } else {
Mat_VarRead4::117::385.5930::                        free(sparse->jc);
Mat_VarRead4::118::357.6814::                        free(sparse->ir);
Mat_VarRead4::119::353.5293::                        free(matvar->data);
Mat_VarRead4::120::353.9504::                        matvar->data = NULL;
Mat_VarRead4::121::503.2105::                        Mat_Critical("Couldn't allocate memory for the sparse index array");
Mat_VarRead4::122::259.2507::                        return;
Mat_VarRead4::123::192.0774::                    }
Mat_VarRead4::124::194.6557::                } else {
Mat_VarRead4::125::306.6427::                    free(sparse->ir);
Mat_VarRead4::126::302.1685::                    free(matvar->data);
Mat_VarRead4::127::313.1420::                    matvar->data = NULL;
Mat_VarRead4::128::460.0806::                    Mat_Critical("Couldn't allocate memory for the sparse index array");
Mat_VarRead4::129::225.7334::                    return;
Mat_VarRead4::130::159.7284::                }
Mat_VarRead4::131::430.4461::                ReadDoubleData(mat, &tmp, data_type, 1);
Mat_VarRead4::132::334.8683::                sparse->ndata = sparse->nir;
Mat_VarRead4::133::335.0433::                data_type = matvar->data_type;
Mat_VarRead4::134::221.5061::                if ( matvar->isComplex ) {
Mat_VarRead4::135::416.8318::                    mat_complex_split_t *complex_data =
Mat_VarRead4::136::571.6428::                        ComplexMalloc(sparse->ndata*Mat_SizeOf(data_type));
Mat_VarRead4::137::347.1092::                    if ( NULL != complex_data ) {
Mat_VarRead4::138::347.8017::                        sparse->data = complex_data;
Mat_VarRead4::139::217.7397::#if defined(EXTENDED_SPARSE)
Mat_VarRead4::140::313.3962::                        switch ( data_type ) {
Mat_VarRead4::141::402.8698::                            case MAT_T_DOUBLE:
Mat_VarRead4::142::558.8468::                                ReadDoubleData(mat, (double*)complex_data->Re,
Mat_VarRead4::143::447.7327::                                    data_type, sparse->ndata);
Mat_VarRead4::144::553.0499::                                ReadDoubleData(mat, &tmp, data_type, 1);
Mat_VarRead4::145::568.8668::                                ReadDoubleData(mat, (double*)complex_data->Im,
Mat_VarRead4::146::482.1648::                                    data_type, sparse->ndata);
Mat_VarRead4::147::528.1895::                                ReadDoubleData(mat, &tmp, data_type, 1);
Mat_VarRead4::148::382.6722::                                break;
Mat_VarRead4::149::453.2481::                            case MAT_T_SINGLE:
Mat_VarRead4::150::283.6607::                            {
Mat_VarRead4::151::387.8089::                                float tmp2;
Mat_VarRead4::152::629.8902::                                ReadSingleData(mat, (float*)complex_data->Re,
Mat_VarRead4::153::506.6793::                                    data_type, sparse->ndata);
Mat_VarRead4::154::596.0153::                                ReadSingleData(mat, &tmp2, data_type, 1);
Mat_VarRead4::155::596.2383::                                ReadSingleData(mat, (float*)complex_data->Im,
Mat_VarRead4::156::499.4384::                                    data_type, sparse->ndata);
Mat_VarRead4::157::636.9099::                                ReadSingleData(mat, &tmp2, data_type, 1);
Mat_VarRead4::158::355.0397::                                break;
Mat_VarRead4::159::273.7135::                            }
Mat_VarRead4::160::313.9743::                            case MAT_T_INT32:
Mat_VarRead4::161::301.1896::                            {
Mat_VarRead4::162::493.9793::                                mat_int32_t tmp2;
Mat_VarRead4::163::711.8525::                                ReadInt32Data(mat, (mat_int32_t*)complex_data->Re,
Mat_VarRead4::164::496.2696::                                    data_type, sparse->ndata);
Mat_VarRead4::165::621.9517::                                ReadInt32Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::166::683.0568::                                ReadInt32Data(mat, (mat_int32_t*)complex_data->Im,
Mat_VarRead4::167::477.9613::                                    data_type, sparse->ndata);
Mat_VarRead4::168::628.4722::                                ReadInt32Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::169::346.4063::                                break;
Mat_VarRead4::170::276.8298::                            }
Mat_VarRead4::171::427.9611::                            case MAT_T_INT16:
Mat_VarRead4::172::243.8755::                            {
Mat_VarRead4::173::507.4660::                                mat_int16_t tmp2;
Mat_VarRead4::174::713.0167::                                ReadInt16Data(mat, (mat_int16_t*)complex_data->Re,
Mat_VarRead4::175::485.6936::                                    data_type, sparse->ndata);
Mat_VarRead4::176::612.5121::                                ReadInt16Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::177::682.5119::                                ReadInt16Data(mat, (mat_int16_t*)complex_data->Im,
Mat_VarRead4::178::476.7040::                                    data_type, sparse->ndata);
Mat_VarRead4::179::606.2505::                                ReadInt16Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::180::334.9720::                                break;
Mat_VarRead4::181::276.3196::                            }
Mat_VarRead4::182::433.3806::                            case MAT_T_UINT16:
Mat_VarRead4::183::277.8525::                            {
Mat_VarRead4::184::462.4142::                                mat_uint16_t tmp2;
Mat_VarRead4::185::765.1427::                                ReadUInt16Data(mat, (mat_uint16_t*)complex_data->Re,
Mat_VarRead4::186::500.3268::                                    data_type, sparse->ndata);
Mat_VarRead4::187::607.1360::                                ReadUInt16Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::188::704.1476::                                ReadUInt16Data(mat, (mat_uint16_t*)complex_data->Im,
Mat_VarRead4::189::478.6822::                                    data_type, sparse->ndata);
Mat_VarRead4::190::602.4676::                                ReadUInt16Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::191::331.7280::                                break;
Mat_VarRead4::192::264.8491::                            }
Mat_VarRead4::193::428.3299::                            case MAT_T_UINT8:
Mat_VarRead4::194::275.4822::                            {
Mat_VarRead4::195::493.6005::                                mat_uint8_t tmp2;
Mat_VarRead4::196::477.5477::                                ReadUInt8Data(mat, (mat_uint8_t*)complex_data->Re,
Mat_VarRead4::197::545.4062::                                    data_type, sparse->ndata);
Mat_VarRead4::198::660.9827::                                ReadUInt8Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::199::712.3686::                                ReadUInt8Data(mat, (mat_uint8_t*)complex_data->Im,
Mat_VarRead4::200::502.7281::                                    data_type, sparse->ndata);
Mat_VarRead4::201::633.6818::                                ReadUInt8Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::202::328.4990::                                break;
Mat_VarRead4::203::260.5209::                            }
Mat_VarRead4::204::299.9499::                            default:
Mat_VarRead4::205::464.2537::                                free(complex_data->Re);
Mat_VarRead4::206::472.4893::                                free(complex_data->Im);
Mat_VarRead4::207::433.2243::                                free(complex_data);
Mat_VarRead4::208::421.7687::                                free(sparse->jc);
Mat_VarRead4::209::462.9574::                                free(sparse->ir);
Mat_VarRead4::210::444.8308::                                free(matvar->data);
Mat_VarRead4::211::439.2220::                                matvar->data = NULL;
Mat_VarRead4::212::627.8076::                                Mat_Critical("Mat_VarRead4: %d is not a supported data type for "
Mat_VarRead4::213::475.9159::                                    "extended sparse", data_type);
Mat_VarRead4::214::325.7050::                                return;
Mat_VarRead4::215::222.5403::                        }
Mat_VarRead4::216::67.2153::#else
Mat_VarRead4::217::479.5654::                        ReadDoubleData(mat, (double*)complex_data->Re,
Mat_VarRead4::218::406.8177::                            data_type, sparse->ndata);
Mat_VarRead4::219::490.3923::                        ReadDoubleData(mat, &tmp, data_type, 1);
Mat_VarRead4::220::515.8092::                        ReadDoubleData(mat, (double*)complex_data->Im,
Mat_VarRead4::221::413.8966::                            data_type, sparse->ndata);
Mat_VarRead4::222::502.1007::                        ReadDoubleData(mat, &tmp, data_type, 1);
Mat_VarRead4::223::55.2198::#endif
Mat_VarRead4::224::215.6343::                    }
Mat_VarRead4::225::235.5827::                    else {
Mat_VarRead4::226::389.5004::                        free(sparse->jc);
Mat_VarRead4::227::361.1391::                        free(sparse->ir);
Mat_VarRead4::228::361.3169::                        free(matvar->data);
Mat_VarRead4::229::354.3941::                        matvar->data = NULL;
Mat_VarRead4::230::521.2338::                        Mat_Critical("Couldn't allocate memory for the complex sparse data");
Mat_VarRead4::231::256.7753::                        return;
Mat_VarRead4::232::191.7929::                    }
Mat_VarRead4::233::195.3795::                } else {
Mat_VarRead4::234::547.7918::                    sparse->data = malloc(sparse->ndata*Mat_SizeOf(data_type));
Mat_VarRead4::235::348.5997::                    if ( sparse->data != NULL ) {
Mat_VarRead4::236::223.6673::#if defined(EXTENDED_SPARSE)
Mat_VarRead4::237::323.1237::                        switch ( data_type ) {
Mat_VarRead4::238::414.5202::                            case MAT_T_DOUBLE:
Mat_VarRead4::239::582.0159::                                ReadDoubleData(mat, (double*)sparse->data,
Mat_VarRead4::240::414.7238::                                    data_type, sparse->ndata);
Mat_VarRead4::241::693.3783::                                ReadDoubleData(mat, &tmp, data_type, 1);
Mat_VarRead4::242::355.6862::                                break;
Mat_VarRead4::243::439.3037::                            case MAT_T_SINGLE:
Mat_VarRead4::244::278.6820::                            {
Mat_VarRead4::245::394.2241::                                float tmp2;
Mat_VarRead4::246::624.7274::                                ReadSingleData(mat, (float*)sparse->data,
Mat_VarRead4::247::497.1742::                                    data_type, sparse->ndata);
Mat_VarRead4::248::603.9377::                                ReadSingleData(mat, &tmp2, data_type, 1);
Mat_VarRead4::249::342.9415::                                break;
Mat_VarRead4::250::279.6924::                            }
Mat_VarRead4::251::432.3303::                            case MAT_T_INT32:
Mat_VarRead4::252::289.2112::                            {
Mat_VarRead4::253::457.2874::                                mat_int32_t tmp2;
Mat_VarRead4::254::741.2382::                                ReadInt32Data(mat, (mat_int32_t*)sparse->data,
Mat_VarRead4::255::519.3647::                                    data_type, sparse->ndata);
Mat_VarRead4::256::624.3105::                                ReadInt32Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::257::335.4586::                                break;
Mat_VarRead4::258::272.8719::                            }
Mat_VarRead4::259::404.0476::                            case MAT_T_INT16:
Mat_VarRead4::260::272.8272::                            {
Mat_VarRead4::261::445.9392::                                mat_int16_t tmp2;
Mat_VarRead4::262::674.1596::                                ReadInt16Data(mat, (mat_int16_t*)sparse->data,
Mat_VarRead4::263::507.5602::                                    data_type, sparse->ndata);
Mat_VarRead4::264::642.5646::                                ReadInt16Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::265::306.0996::                                break;
Mat_VarRead4::266::304.5894::                            }
Mat_VarRead4::267::454.8431::                            case MAT_T_UINT16:
Mat_VarRead4::268::283.5494::                            {
Mat_VarRead4::269::487.6098::                                mat_uint16_t tmp2;
Mat_VarRead4::270::717.4744::                                ReadUInt16Data(mat, (mat_uint16_t*)sparse->data,
Mat_VarRead4::271::500.7062::                                    data_type, sparse->ndata);
Mat_VarRead4::272::621.4734::                                ReadUInt16Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::273::332.6165::                                break;
Mat_VarRead4::274::272.7121::                            }
Mat_VarRead4::275::424.5337::                            case MAT_T_UINT8:
Mat_VarRead4::276::284.2097::                            {
Mat_VarRead4::277::499.4669::                                mat_uint8_t tmp2;
Mat_VarRead4::278::700.3740::                                ReadUInt8Data(mat, (mat_uint8_t*)sparse->data,
Mat_VarRead4::279::565.2682::                                    data_type, sparse->ndata);
Mat_VarRead4::280::694.9910::                                ReadUInt8Data(mat, &tmp2, data_type, 1);
Mat_VarRead4::281::352.2873::                                break;
Mat_VarRead4::282::271.3129::                            }
Mat_VarRead4::283::308.3685::                            default:
Mat_VarRead4::284::454.0514::                                free(sparse->data);
Mat_VarRead4::285::452.1309::                                free(sparse->jc);
Mat_VarRead4::286::431.8560::                                free(sparse->ir);
Mat_VarRead4::287::452.6779::                                free(matvar->data);
Mat_VarRead4::288::459.6331::                                matvar->data = NULL;
Mat_VarRead4::289::699.5510::                                Mat_Critical("Mat_VarRead4: %d is not a supported data type for "
Mat_VarRead4::290::512.6520::                                    "extended sparse", data_type);
Mat_VarRead4::291::260.2367::                                return;
Mat_VarRead4::292::238.8126::                        }
Mat_VarRead4::293::76.5198::#else
Mat_VarRead4::294::660.9600::                        ReadDoubleData(mat, (double*)sparse->data, data_type, sparse->ndata);
Mat_VarRead4::295::482.0880::                        ReadDoubleData(mat, &tmp, data_type, 1);
Mat_VarRead4::296::83.2335::#endif
Mat_VarRead4::297::223.5261::                    } else {
Mat_VarRead4::298::350.9002::                        free(sparse->jc);
Mat_VarRead4::299::348.4407::                        free(sparse->ir);
Mat_VarRead4::300::346.3043::                        free(matvar->data);
Mat_VarRead4::301::346.7385::                        matvar->data = NULL;
Mat_VarRead4::302::462.9625::                        Mat_Critical("Couldn't allocate memory for the sparse data");
Mat_VarRead4::303::252.0729::                        return;
Mat_VarRead4::304::192.7963::                    }
Mat_VarRead4::305::159.2892::                }
Mat_VarRead4::306::196.0429::                break;
Mat_VarRead4::307::130.9727::            }
Mat_VarRead4::308::151.0783::            else {
Mat_VarRead4::309::421.9179::                Mat_Critical("Couldn't allocate memory for the data");
Mat_VarRead4::310::198.8220::                return;
Mat_VarRead4::311::124.6421::            }
Mat_VarRead4::312::124.1443::        default:
Mat_VarRead4::313::323.2335::            Mat_Critical("MAT V4 data type error");
Mat_VarRead4::314::45.3737::            return;
Mat_VarReadDataLinear4::1::31.4490::int
Mat_VarReadDataLinear4::2::447.3226::Mat_VarReadDataLinear4(mat_t *mat,matvar_t *matvar,void *data,int start,
Mat_VarReadDataLinear4::3::261.8010::                       int stride,int edge)
Mat_VarReadDataLinear4::4::34.0623::{
Mat_VarReadDataLinear4::5::109.9140::    int err = 0;
Mat_VarReadDataLinear4::6::145.8509::    size_t nelems = 1;
Mat_VarReadDataLinear4::7::235.4167::    err = SafeMulDims(matvar, &nelems);
Mat_VarReadDataLinear4::8::409.2633::    (void)fseek((FILE*)mat->fp,matvar->internal->datapos,SEEK_SET);
Mat_VarReadDataLinear4::9::277.6493::    matvar->data_size = Mat_SizeOf(matvar->data_type);
Mat_VarReadDataLinear4::10::95.2784::        Expand All
Mat_VarReadDataLinear4::11::567.3151::    @@ -702,14 +726,18 @@ Mat_VarReadDataLinear4(mat_t *mat,matvar_t *matvar,void *data,int start,
Mat_VarReadDataLinear4::12::346.3246::    if ( (size_t)stride*(edge-1)+start+1 > nelems ) {
Mat_VarReadDataLinear4::13::111.8154::        return 1;
Mat_VarReadDataLinear4::14::52.2849::    }
Mat_VarReadDataLinear4::15::171.4115::    if ( matvar->isComplex ) {
Mat_VarReadDataLinear4::16::390.0512::            mat_complex_split_t *complex_data = (mat_complex_split_t*)data;
Mat_VarReadDataLinear4::17::285.7735::            long nbytes = nelems*matvar->data_size;
Mat_VarReadDataLinear4::18::382.6217::            ReadDataSlab1(mat,complex_data->Re,matvar->class_type,
Mat_VarReadDataLinear4::19::405.0244::                          matvar->data_type,start,stride,edge);
Mat_VarReadDataLinear4::20::539.1183::            (void)fseek((FILE*)mat->fp,matvar->internal->datapos+nbytes,SEEK_SET);
Mat_VarReadDataLinear4::21::395.1946::            ReadDataSlab1(mat,complex_data->Im,matvar->class_type,
Mat_VarReadDataLinear4::22::299.1737::                          matvar->data_type,start,stride,edge);
Mat_VarReadDataLinear4::24::453.9275::        ReadDataSlab1(mat,data,matvar->class_type,matvar->data_type,start,
Mat_VarReadDataLinear4::25::237.4454::                      stride,edge);
Mat_VarReadDataLinear4::26::95.8304::        Expand All
Mat_VarReadDataLinear4::27::367.3592::    @@ -732,7 +760,7 @@ Mat_VarReadNextInfo4(mat_t *mat)
Mat_VarReadDataLinear4::28::47.1983::    }
Mat_VarReadDataLinear4::29::74.5655::    return err;
Mat_VarReadDataLinear4::30::10.6771::}
if::1::82.7826::matvar_t *
if::2::213.0768::Mat_VarReadNextInfo4(mat_t *mat)
if::3::34.2673::{
if::4::260.5422::    int       M,O,data_type,class_type;
if::5::149.9104::    mat_int32_t tmp;
if::6::128.3483::    long      nBytes;
if::7::123.5807::    size_t    err;
if::8::177.8024::    matvar_t *matvar = NULL;
if::9::63.4277::    union {
if::10::171.8316::        mat_uint32_t u;
if::11::198.7434::        mat_uint8_t  c[4];
if::12::91.0023::    } endian;
if::13::206.8588::    if ( mat == NULL || mat->fp == NULL )
if::14::115.1451::        return NULL;
if::15::247.1272::    else if ( NULL == (matvar = Mat_VarCalloc()) )
if::16::114.5288::        return NULL;
if::17::332.9434::    err = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);
if::18::112.5628::    if ( !err ) {
if::19::178.6515::        Mat_VarFree(matvar);
if::20::114.3551::        return NULL;
if::21::50.9397::    }
if::22::175.1432::    endian.u = 0x01020304;
if::23::194.8381::    /* See if MOPT may need byteswapping */
if::24::185.5884::    if ( tmp < 0 || tmp > 4052 ) {
if::25::275.4424::        if ( Mat_int32Swap(&tmp) > 4052 ) {
if::26::205.6530::            Mat_VarFree(matvar);
if::27::150.0681::            return NULL;
if::28::80.2889::        }
if::29::50.9992::    }
if::30::222.4533::    M = (int)floor(tmp / 1000.0);
if::31::133.2051::    tmp -= M*1000;
if::32::221.7240::    O = (int)floor(tmp / 100.0);
if::33::131.8881::    tmp -= O*100;
if::34::242.8692::    data_type = (int)floor(tmp / 10.0);
if::35::152.9523::    tmp -= data_type*10;
if::36::253.2979::    class_type = (int)floor(tmp / 1.0);
if::37::104.2055::    switch ( M ) {
if::38::40.1515::        case 0:
if::40::394.7501::            mat->byteswap = (endian.c[0] != 4);
if::41::145.4742::            break;
if::42::124.3924::        case 1:
if::43::224.3670::            /* IEEE big endian */
if::44::370.1320::            mat->byteswap = (endian.c[0] != 1);
if::45::138.3637::            break;
if::46::105.4336::        default:
if::47::269.0718::            /* VAX, Cray, or bogus */
if::48::221.4964::            Mat_VarFree(matvar);
if::49::161.0317::            return NULL;
if::50::54.6166::    }
if::51::151.8371::    /* O must be zero */
if::52::140.7154::    if ( 0 != O ) {
if::53::195.3311::        Mat_VarFree(matvar);
if::54::128.9214::        return NULL;
if::55::55.4600::    }
if::56::169.7312::    /* Convert the V4 data type */
if::57::129.9432::    switch ( data_type ) {
if::58::118.5931::        case 0:
if::59::310.2833::            matvar->data_type = MAT_T_DOUBLE;
if::60::133.6358::            break;
if::61::118.6267::        case 1:
if::62::324.5421::            matvar->data_type = MAT_T_SINGLE;
if::63::137.7149::            break;
if::64::120.3841::        case 2:
if::65::319.1383::            matvar->data_type = MAT_T_INT32;
if::66::141.7093::            break;
if::67::127.8271::        case 3:
if::68::319.4149::            matvar->data_type = MAT_T_INT16;
if::69::138.9432::            break;
if::70::123.7219::        case 4:
if::71::337.9001::            matvar->data_type = MAT_T_UINT16;
if::72::20.9344::            break;
if::74::345.9530::            matvar->data_type = MAT_T_UINT8;
if::75::145.5572::            break;
if::76::110.3395::        default:
if::77::229.9753::            Mat_VarFree(matvar);
if::78::163.5395::            return NULL;
if::79::56.9281::    }
if::80::135.8995::    switch ( class_type ) {
if::81::117.1783::        case 0:
if::82::310.8554::            matvar->class_type = MAT_C_DOUBLE;
if::83::132.7814::            break;
if::84::114.2651::        case 1:
if::85::286.4867::            matvar->class_type = MAT_C_CHAR;
if::86::137.3655::            break;
if::87::115.6704::        case 2:
if::88::304.3157::            matvar->class_type = MAT_C_SPARSE;
if::89::134.4317::            break;
if::90::101.4827::        default:
if::91::217.7763::            Mat_VarFree(matvar);
if::92::153.4673::            return NULL;
if::93::50.8946::    }
if::94::142.0137::    matvar->rank = 2;
if::95::401.2016::    matvar->dims = (size_t*)malloc(2*sizeof(*matvar->dims));
if::96::197.7823::    if ( NULL == matvar->dims ) {
if::97::189.8221::        Mat_VarFree(matvar);
if::98::125.9237::        return NULL;
if::99::55.0163::    }
if::100::375.4151::    err = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);
if::101::151.7078::    if ( mat->byteswap )
if::102::207.4257::        Mat_int32Swap(&tmp);
if::103::204.6456::    matvar->dims[0] = tmp;
if::104::121.1133::    if ( !err ) {
if::105::196.1901::        Mat_VarFree(matvar);
if::106::134.1369::        return NULL;
if::107::55.9394::    }
if::108::58.0930::    err = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);
if::110::206.9026::        Mat_int32Swap(&tmp);
if::111::197.2340::    matvar->dims[1] = tmp;
if::112::119.8304::    if ( !err ) {
if::113::179.3421::        Mat_VarFree(matvar);
if::114::116.7641::        return NULL;
if::115::50.6337::    }
if::116::425.4702::    err = fread(&(matvar->isComplex),sizeof(int),1,(FILE*)mat->fp);
if::117::111.2234::    if ( !err ) {
if::118::175.4004::        Mat_VarFree(matvar);
if::119::113.1642::        return NULL;
if::120::49.7072::    }
if::121::323.9402::    if ( matvar->isComplex && MAT_C_CHAR == matvar->class_type ) {
if::122::175.1054::        Mat_VarFree(matvar);
if::123::110.7427::        return NULL;
if::124::51.8266::    }
if::125::331.5430::    err = fread(&tmp,sizeof(int),1,(FILE*)mat->fp);
if::126::112.0760::    if ( !err ) {
if::127::176.3641::        Mat_VarFree(matvar);
if::128::114.4368::        return NULL;
if::129::49.8124::    }
if::130::138.1115::    if ( mat->byteswap )
if::131::183.0381::        Mat_int32Swap(&tmp);
if::132::231.3714::    /* Check that the length of the variable name is at least 1 */
if::133::120.9866::    if ( tmp < 1 ) {
if::134::176.9072::        Mat_VarFree(matvar);
if::135::115.2323::        return NULL;
if::136::51.9524::    }
if::137::221.0357::    matvar->name = (char*)malloc(tmp);
if::138::181.1328::    if ( NULL == matvar->name ) {
if::139::177.5554::        Mat_VarFree(matvar);
if::140::119.3981::        return NULL;
if::141::51.0937::    }
if::142::342.0124::    err = fread(matvar->name,1,tmp,(FILE*)mat->fp);
if::143::115.6839::    if ( !err ) {
if::144::178.6436::        Mat_VarFree(matvar);
if::145::120.8710::        return NULL;
if::146::52.7020::    }
if::147::222.8601::    matvar->internal->datapos = ftell((FILE*)mat->fp);
if::149::203.9509::        Mat_VarFree(matvar);
if::150::250.0075::        Mat_Critical("Couldn't determine file position");
if::151::129.5263::        return NULL;
if::152::54.2702::    }
if::153::55.5083::    {
if::154::303.3484::        size_t tmp2 = Mat_SizeOf(matvar->data_type);
if::155::193.5188::        if ( matvar->isComplex )
if::156::184.7109::            tmp2 *= 2;
if::157::238.2308::        SafeMulDims(matvar, &tmp2);
if::158::177.0754::        nBytes = (long)tmp2;
if::159::49.7091::    }
if::160::311.7655::    (void)fseek((FILE*)mat->fp,nBytes,SEEK_CUR);
if::161::87.2874::    return matvar;
if::162::11.1894::}
if::1::322.2353::CJSON_PUBLIC(void) cJSON_Minify(char *json)
if::2::39.2771::{
if::3::232.0700::    unsigned char *into = (unsigned char*)json;
if::4::146.3107::    if (json == NULL)
if::5::57.0704::    {
if::6::106.6849::        return;
if::7::54.9454::    }
if::8::115.2033::    while (*json)
if::9::56.1261::    {
if::10::188.5577::        if (*json == ' ')
if::11::83.6685::        {
if::12::132.7150::            json++;
if::13::82.6395::        }
if::14::167.1999::        else if (*json == '	')
if::15::38.2801::        {
if::16::83.6160::            /* Whitespace characters. */
if::17::199.8293::            json++;
if::18::135.7031::        }
if::19::85.0975::        else if (*json == '
if::20::171.5737::')
if::21::36.5556::        {
if::22::84.6730::            json++;
if::23::135.3761::        }
if::24::83.8881::        else if (*json=='
if::25::167.2239::')
if::26::36.7205::        {
if::27::85.0847::            json++;
if::28::131.7036::        }
if::29::81.6726::        else if ((*json == '/') && (json[1] == '/'))
if::30::347.0239::        {
if::31::83.5429::            /* double-slash comments, to end of line. */
if::32::302.7748::            while (*json && (*json != '
if::33::243.8824::'))
if::34::50.4993::            {
if::35::117.0489::                json++;
if::36::172.1902::            }
if::37::112.0713::        }
if::38::84.6873::        else if ((*json == '/') && (json[1] == '*'))
if::39::389.3181::        {
if::40::84.8474::            /* multiline comments. */
if::41::220.4811::            while (*json && !((*json == '*') && (json[1] == '/')))
if::42::423.2523::            {
if::44::127.0342::            }
if::45::201.6686::            json += 2;
if::46::93.7979::        }
if::47::236.6642::        else if (*json == '"')
if::48::91.0258::        {
if::49::324.7080::            /* string literals, which are " sensitive. */
if::50::290.0701::            *into++ = (unsigned char)*json++;
if::51::306.5750::            while (*json && (*json != '"'))
if::52::118.9846::            {
if::53::262.7388::                if (*json == '\')
if::54::154.7565::                {
if::55::356.4331::                    *into++ = (unsigned char)*json++;
if::56::150.4630::                }
if::57::318.6006::                *into++ = (unsigned char)*json++;
if::58::117.4719::            }
if::59::279.0612::            *into++ = (unsigned char)*json++;
if::60::85.9638::        }
if::61::86.4045::        else
if::62::86.7008::        {
if::63::212.5977::            /* All other characters. */
if::64::269.2058::            *into++ = (unsigned char)*json++;
if::65::81.4925::        }
if::66::54.0409::    }
if::67::173.6325::    /* and null-terminate. */
if::68::75.6026::    *into = '
size_ready::1::381.9128::int zmq::v2_decoder_t::eight_byte_size_ready (unsigned char const *read_from_)
size_ready::2::31.5785::{
size_ready::3::211.3264::    //  The payload size is encoded as 64-bit unsigned integer.
size_ready::4::152.7328::    //  The most significant byte comes first.
size_ready::5::231.3189::    const uint64_t msg_size = get_uint64 (_tmpbuf);
size_ready::6::182.4980::    return size_ready (msg_size, read_from_);
size_ready::7::9.8142::}
copyaudiodata::1::284.6128::bool copyaudiodata (AFfilehandle infile, AFfilehandle outfile, int trackid)
copyaudiodata::2::30.0729::{
copyaudiodata::3::238.5970::	int frameSize = afGetVirtualFrameSize(infile, trackid, 1);
copyaudiodata::4::130.1811::	const int kBufferFrameCount = 65536;
copyaudiodata::5::184.7896::	void *buffer = malloc(kBufferFrameCount * frameSize);
copyaudiodata::6::275.3487::	AFframecount totalFrames = afGetFrameCount(infile, AF_DEFAULT_TRACK);
copyaudiodata::7::122.6648::	AFframecount totalFramesWritten = 0;
copyaudiodata::8::75.6288::	bool success = true;
copyaudiodata::9::126.7215::	while (totalFramesWritten < totalFrames)
copyaudiodata::10::27.9208::	{
copyaudiodata::11::181.7686::		AFframecount framesToRead = totalFrames - totalFramesWritten;
copyaudiodata::12::136.4542::		if (framesToRead > kBufferFrameCount)
copyaudiodata::13::118.2008::			framesToRead = kBufferFrameCount;
copyaudiodata::14::226.6620::		AFframecount framesRead = afReadFrames(infile, trackid, buffer,
copyaudiodata::15::62.5674::			framesToRead);
copyaudiodata::16::113.0065::		if (framesRead < framesToRead)
copyaudiodata::17::29.2043::		{
copyaudiodata::18::195.1022::			fprintf(stderr, "Bad read of audio track data.
copyaudiodata::19::31.1796::");
copyaudiodata::20::64.5948::			success = false;
copyaudiodata::21::42.0088::			break;
copyaudiodata::22::27.0273::		}
copyaudiodata::23::226.9536::		AFframecount framesWritten = afWriteFrames(outfile, trackid, buffer,
copyaudiodata::24::55.4625::			framesRead);
copyaudiodata::25::103.5812::		if (framesWritten < framesRead)
copyaudiodata::26::26.4262::		{
copyaudiodata::27::179.3987::			fprintf(stderr, "Bad write of audio track data.
copyaudiodata::28::29.9321::");
copyaudiodata::29::60.1028::			success = false;
copyaudiodata::30::40.8406::			break;
copyaudiodata::31::27.0010::		}
copyaudiodata::32::100.7860::		totalFramesWritten += framesWritten;
copyaudiodata::33::24.4860::	}
copyaudiodata::34::61.2590::	free(buffer);
copyaudiodata::35::48.7434::	return success;
copyaudiodata::36::9.0117::}
cJSON_Delete::1::282.5181::static const char *parse_string(cJSON *item,const char *str,const char **ep)
cJSON_Delete::2::28.9976::{
cJSON_Delete::3::485.9458::	const char *ptr=str+1,*end_ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
cJSON_Delete::4::201.4192::	if (*str!='"') {*ep=str;return 0;}	/* not a string! */
cJSON_Delete::5::86.7799::	while (*end_ptr!='"' && *end_ptr && ++len) if (*end_ptr++ == '\') end_ptr++;	/* Skip escaped quotes. */
cJSON_Delete::6::376.8229::	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
cJSON_Delete::7::90.9543::	if (!out) return 0;
cJSON_Delete::8::171.4028::	item->valuestring=out; /* assign here so out will be deleted during cJSON_Delete() later */
cJSON_Delete::9::186.5493::	item->type=cJSON_String;
cJSON_Delete::10::101.7077::	ptr=str+1;ptr2=out;
cJSON_Delete::11::302.4255::	while (ptr < end_ptr)
cJSON_Delete::12::109.3946::	{
cJSON_Delete::13::144.9393::		if (*ptr!='\') *ptr2++=*ptr++;
cJSON_Delete::14::106.6135::		else
cJSON_Delete::15::28.6032::		{
cJSON_Delete::16::208.7906::			ptr++;
cJSON_Delete::17::29.1302::			switch (*ptr)
cJSON_Delete::18::26.4860::			{
cJSON_Delete::19::43.5640::				case 'b': *ptr2++='';	break;
cJSON_Delete::20::71.5969::				case 'f': *ptr2++='';	break;
cJSON_Delete::21::26.7904::				case 'n': *ptr2++='
cJSON_Delete::22::141.4434::';	break;
cJSON_Delete::23::42.1605::				case 'r': *ptr2++='
cJSON_Delete::24::137.2336::';	break;
cJSON_Delete::25::42.8983::				case 't': *ptr2++='	';	break;
cJSON_Delete::26::116.8462::				case 'u':	 /* transcode utf16 to utf8. */
cJSON_Delete::27::25.0465::					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */
cJSON_Delete::28::41.2523::					if (ptr >= end_ptr) {*ep=str;return 0;}	/* invalid */
cJSON_Delete::29::117.5926::					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)    {*ep=str;return 0;}	/* check for invalid.   */
cJSON_Delete::30::25.2477::					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
cJSON_Delete::31::42.4394::					{
cJSON_Delete::32::110.3176::						if (ptr+6 > end_ptr)    {*ep=str;return 0;}	/* invalid */
cJSON_Delete::33::25.1760::						if (ptr[1]!='\' || ptr[2]!='u')    {*ep=str;return 0;}	/* missing second-half of surrogate.    */
cJSON_Delete::34::42.5085::						uc2=parse_hex4(ptr+3);ptr+=6;
cJSON_Delete::35::54.8107::						if (uc2<0xDC00 || uc2>0xDFFF)       {*ep=str;return 0;}	/* invalid second-half of surrogate.    */
cJSON_Delete::36::161.5599::						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
cJSON_Delete::37::196.1153::					}
cJSON_Delete::38::113.2796::					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
cJSON_Delete::39::209.3136::					switch (len) {
cJSON_Delete::40::60.4261::						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
cJSON_Delete::41::442.7539::						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
cJSON_Delete::42::110.5376::						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
cJSON_Delete::31::30.4569::					{
cJSON_Delete::32::274.6103::						if (ptr+6 > end_ptr)    {*ep=str;return 0;}	/* invalid */
cJSON_Delete::33::61.7635::						if (ptr[1]!='\' || ptr[2]!='u')    {*ep=str;return 0;}	/* missing second-half of surrogate.    */
cJSON_Delete::34::368.1750::						uc2=parse_hex4(ptr+3);ptr+=6;
cJSON_Delete::35::149.8406::						if (uc2<0xDC00 || uc2>0xDFFF)       {*ep=str;return 0;}	/* invalid second-half of surrogate.    */
cJSON_Delete::36::216.1988::						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
cJSON_Delete::37::374.0592::					}
cJSON_Delete::38::151.8684::					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
cJSON_Delete::39::352.0890::					switch (len) {
cJSON_Delete::40::27.9030::						case 4: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
cJSON_Delete::41::590.2666::						case 3: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
cJSON_Delete::42::74.3169::						case 2: *--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
cJSON_Delete::43::325.4438::						case 1: *--ptr2 =(uc | firstByteMark[len]);
cJSON_Delete::44::319.6438::					}
cJSON_Delete::45::328.9382::					ptr2+=len;
cJSON_Delete::46::223.0806::					break;
cJSON_Delete::47::27.8482::				default:  *ptr2++=*ptr; break;
cJSON_Delete::48::81.7632::			}
cJSON_Delete::49::45.1560::			ptr++;
cJSON_Delete::50::182.0622::		}
cJSON_Delete::51::28.7496::	}
cJSON_Delete::52::45.3907::	*ptr2=0;
cJSON_Delete::53::29.3024::	if (*ptr=='"') ptr++;
cJSON_Delete::54::27.2640::	return ptr;
cJSON_Delete::55::89.4891::}
Msg::1:78.77165222167969
	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::2:408.1647644042969
}
Msg::1:78.77165222167969
	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::2:408.1647644042969
}
Msg::1:78.77165222167969
	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::2:408.1647644042969
}
Msg::1::78.7717::void  Msg() {
Msg::2::408.1648::	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::3::10.4084::}
Add::1::139.8650::int  Add(int a, int b) {
Add::2::95.6055::	int* p = &a;
Add::3::150.6759::	*(p-1) = (int)Msg;
Add::4::69.2367::	return a + b;
Add::5::10.2770::}
main::1::54.6297::void main() {
main::2::138.8641::	printf("%d", Add(1, 2));
main::3::59.6045::	system("pause");
main::4::35.3849::	return;
main::5::10.1404::}
derive_spatial_luma_vector_prediction::1::230.1341::// 8.5.3.1.6
derive_spatial_luma_vector_prediction::2::431.3482::void derive_spatial_luma_vector_prediction(base_context* ctx,
derive_spatial_luma_vector_prediction::3::493.5695::                                           de265_image* img,
derive_spatial_luma_vector_prediction::4::531.9108::                                           const slice_segment_header* shdr,
derive_spatial_luma_vector_prediction::5::689.5804::                                           int xC,int yC,int nCS,int xP,int yP,
derive_spatial_luma_vector_prediction::6::594.9593::                                           int nPbW,int nPbH, int X,
derive_spatial_luma_vector_prediction::7::537.1721::                                           int refIdxLX, int partIdx,
derive_spatial_luma_vector_prediction::8::595.5970::                                           uint8_t out_availableFlagLXN[2],
derive_spatial_luma_vector_prediction::9::544.6716::                                           MotionVector out_mvLXN[2])
derive_spatial_luma_vector_prediction::10::39.6299::{
derive_spatial_luma_vector_prediction::11::301.2087::  if (refIdxLX >= MAX_NUM_REF_PICS) {
derive_spatial_luma_vector_prediction::12::532.1599::    ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::13::340.5375::    img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::14::92.1616::    out_availableFlagLXN[0] = false;
Msg::1::78.7717::void  Msg() {
Msg::2::408.1648::	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::3::10.4084::}
Add::1::139.8650::int  Add(int a, int b) {
Add::2::95.6055::	int* p = &a;
Add::3::150.6759::	*(p-1) = (int)Msg;
Add::4::69.2367::	return a + b;
Add::5::10.2770::}
main::1::54.6297::void main() {
main::2::138.8641::	printf("%d", Add(1, 2));
main::3::59.6045::	system("pause");
main::4::35.3849::	return;
main::5::10.1404::}
Msg::1::78.7717::void  Msg() {
Msg::2::408.1648::	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::3::10.4084::}
Add::1::139.8650::int  Add(int a, int b) {
Add::2::95.6055::	int* p = &a;
Add::3::150.6759::	*(p-1) = (int)Msg;
Add::4::69.2367::	return a + b;
Add::5::10.2770::}
main::1::54.6297::void main() {
main::2::138.8641::	printf("%d", Add(1, 2));
main::3::59.6045::	system("pause");
main::4::35.3849::	return;
main::5::10.1404::}
derive_spatial_luma_vector_prediction::1::230.1341::// 8.5.3.1.6
derive_spatial_luma_vector_prediction::2::431.3482::void derive_spatial_luma_vector_prediction(base_context* ctx,
derive_spatial_luma_vector_prediction::3::493.5695::                                           de265_image* img,
derive_spatial_luma_vector_prediction::4::531.9108::                                           const slice_segment_header* shdr,
derive_spatial_luma_vector_prediction::5::689.5804::                                           int xC,int yC,int nCS,int xP,int yP,
derive_spatial_luma_vector_prediction::6::594.9593::                                           int nPbW,int nPbH, int X,
derive_spatial_luma_vector_prediction::7::537.1721::                                           int refIdxLX, int partIdx,
derive_spatial_luma_vector_prediction::8::595.5970::                                           uint8_t out_availableFlagLXN[2],
derive_spatial_luma_vector_prediction::9::544.6716::                                           MotionVector out_mvLXN[2])
derive_spatial_luma_vector_prediction::10::39.6299::{
derive_spatial_luma_vector_prediction::11::301.2087::  if (refIdxLX >= MAX_NUM_REF_PICS) {
derive_spatial_luma_vector_prediction::12::532.1599::    ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::13::340.5375::    img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::14::92.1616::    out_availableFlagLXN[0] = false;
derive_spatial_luma_vector_prediction::15::202.5281::    out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::16::221.1711::    out_mvLXN[0] = MotionVector{};
derive_spatial_luma_vector_prediction::17::217.5882::    out_mvLXN[1] = MotionVector{};
derive_spatial_luma_vector_prediction::18::64.8187::    return;
derive_spatial_luma_vector_prediction::19::34.8934::  }
derive_spatial_luma_vector_prediction::20::144.6198::  int isScaledFlagLX = 0;
derive_spatial_luma_vector_prediction::21::97.8417::  const int A=0;
derive_spatial_luma_vector_prediction::22::97.2986::  const int B=1;
derive_spatial_luma_vector_prediction::23::169.4641::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::24::170.4811::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::25::74.3089::  // --- A ---
derive_spatial_luma_vector_prediction::26::61.9744::  // 1.
derive_spatial_luma_vector_prediction::27::155.8167::  int xA[2], yA[2];
derive_spatial_luma_vector_prediction::28::148.9188::  xA[0] = xP-1;
derive_spatial_luma_vector_prediction::29::176.0562::  yA[0] = yP + nPbH;
derive_spatial_luma_vector_prediction::30::153.7812::  xA[1] = xA[0];
derive_spatial_luma_vector_prediction::31::177.5799::  yA[1] = yA[0]-1;
derive_spatial_luma_vector_prediction::32::59.3073::  // 2.
derive_spatial_luma_vector_prediction::33::168.2144::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::34::180.2883::  out_mvLXN[A].x = 0;
derive_spatial_luma_vector_prediction::35::185.5391::  out_mvLXN[A].y = 0;
derive_spatial_luma_vector_prediction::36::97.2497::  // 3. / 4.
derive_spatial_luma_vector_prediction::37::99.0050::  bool availableA[2];
derive_spatial_luma_vector_prediction::38::644.4591::  availableA[0] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[0],yA[0]);
derive_spatial_luma_vector_prediction::39::655.7600::  availableA[1] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[1],yA[1]);
derive_spatial_luma_vector_prediction::40::62.7414::  // 5.
derive_spatial_luma_vector_prediction::41::199.4772::  if (availableA[0] || availableA[1]) {
derive_spatial_luma_vector_prediction::42::142.9057::    isScaledFlagLX = 1;
derive_spatial_luma_vector_prediction::43::35.8248::  }
derive_spatial_luma_vector_prediction::44::187.6632::  // 6.  test A0 and A1  (Ak)
derive_spatial_luma_vector_prediction::45::122.8423::  int refIdxA=-1;
derive_spatial_luma_vector_prediction::46::165.8008::  // the POC we want to reference in this PB
derive_spatial_luma_vector_prediction::47::414.5409::  const de265_image* tmpimg = ctx->get_image(shdr->RefPicList[X][ refIdxLX ]);
derive_spatial_luma_vector_prediction::48::170.4601::  if (tmpimg==NULL) { return; }
derive_spatial_luma_vector_prediction::49::44.9284::  const int referenced_POC = tmpimg->PicOrderCntVal;
derive_spatial_luma_vector_prediction::51::151.1843::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::52::377.4350::        out_availableFlagLXN[A]==0 && // no A?-predictor so far
derive_spatial_luma_vector_prediction::53::407.4319::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::54::142.5447::      int Y=1-X;
derive_spatial_luma_vector_prediction::55::381.2228::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::56::260.0481::      logtrace(LogMotion,"MVP A%d=\n",k);
derive_spatial_luma_vector_prediction::57::141.3833::      logmvcand(vi);
derive_spatial_luma_vector_prediction::58::191.9453::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::59::524.1889::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::60::196.6299::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::61::539.1241::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::62::234.8116::      // check whether the predictor X is available and references the same POC
derive_spatial_luma_vector_prediction::63::399.5859::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::64::420.3488::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::65::219.7479::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::66::288.7475::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::67::234.2914::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::68::64.9098::      }
derive_spatial_luma_vector_prediction::69::285.0236::      // check whether the other predictor (Y) is available and references the same POC
derive_spatial_luma_vector_prediction::70::423.2102::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::71::458.6632::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::72::226.0326::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::73::290.3179::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::74::228.4218::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::75::62.9539::      }
derive_spatial_luma_vector_prediction::76::47.7499::    }
derive_spatial_luma_vector_prediction::77::36.2193::  }
derive_spatial_luma_vector_prediction::78::301.8848::  // 7. If there is no predictor referencing the same POC, we take any other reference as
derive_spatial_luma_vector_prediction::79::289.9316::  //    long as it is the same type of reference (long-term / short-term)
derive_spatial_luma_vector_prediction::80::364.8517::  for (int k=0 ; k<=1 && out_availableFlagLXN[A]==0 ; k++) {
derive_spatial_luma_vector_prediction::81::128.0671::    int refPicList=-1;
derive_spatial_luma_vector_prediction::82::136.2762::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::83::318.8507::        // TODO: we could remove this call by storing the result of the similar computation above
derive_spatial_luma_vector_prediction::84::399.5252::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::85::141.6382::      int Y=1-X;
derive_spatial_luma_vector_prediction::86::381.9064::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::87::210.3310::      if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::88::556.2764::          shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::89::446.8063::        logtrace(LogMotion,"take A%D/L%d as A candidate with different POCs\n",k,X);
derive_spatial_luma_vector_prediction::90::231.6211::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::91::297.6886::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::92::245.1558::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::93::154.9092::        refPicList = X;
derive_spatial_luma_vector_prediction::94::33.4300::      }
derive_spatial_luma_vector_prediction::96::655.3190::               shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::97::457.5874::        logtrace(LogMotion,"take A%d/L%d as A candidate with different POCs\n",k,Y);
derive_spatial_luma_vector_prediction::98::221.5365::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::99::296.0308::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::100::236.2637::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::101::146.7216::        refPicList = Y;
derive_spatial_luma_vector_prediction::102::64.7599::      }
derive_spatial_luma_vector_prediction::103::53.9657::    }
derive_spatial_luma_vector_prediction::104::233.7932::    if (out_availableFlagLXN[A]==1) {
derive_spatial_luma_vector_prediction::105::177.0657::      if (refIdxA<0) {
derive_spatial_luma_vector_prediction::106::357.4395::        out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::107::129.5664::        return; // error
derive_spatial_luma_vector_prediction::108::66.2000::      }
derive_spatial_luma_vector_prediction::109::183.7471::      assert(refIdxA>=0);
derive_spatial_luma_vector_prediction::110::177.7560::      assert(refPicList>=0);
derive_spatial_luma_vector_prediction::111::491.3536::      const de265_image* refPicA = ctx->get_image(shdr->RefPicList[refPicList][refIdxA ]);
derive_spatial_luma_vector_prediction::112::546.7984::      const de265_image* refPicX = ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::113::389.2231::      //int picStateA = shdr->RefPicList_PicState[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::114::440.0976::      //int picStateX = shdr->RefPicList_PicState[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::115::367.5873::      int isLongTermA = shdr->LongTermRefPic[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::116::291.0103::      int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::117::445.6613::      logtrace(LogMotion,"scale MVP A: A-POC:%d X-POC:%d\n",
derive_spatial_luma_vector_prediction::118::393.4401::               refPicA->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::119::228.9388::      if (!isLongTermA && !isLongTermX)
derive_spatial_luma_vector_prediction::120::75.9930::      /*
derive_spatial_luma_vector_prediction::121::213.8279::      if (picStateA == UsedForShortTermReference &&
derive_spatial_luma_vector_prediction::122::220.4923::          picStateX == UsedForShortTermReference)
derive_spatial_luma_vector_prediction::123::69.7650::      */
derive_spatial_luma_vector_prediction::124::79.2694::        {
derive_spatial_luma_vector_prediction::125::361.6357::          int distA = img->PicOrderCntVal - refPicA->PicOrderCntVal;
derive_spatial_luma_vector_prediction::126::302.6607::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::127::510.5249::          if (!scale_mv(&out_mvLXN[A], out_mvLXN[A], distA, distX)) {
derive_spatial_luma_vector_prediction::128::481.5593::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::129::323.1897::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::130::92.3894::          }
derive_spatial_luma_vector_prediction::131::76.7261::        }
derive_spatial_luma_vector_prediction::132::48.9404::    }
derive_spatial_luma_vector_prediction::133::35.0834::  }
derive_spatial_luma_vector_prediction::134::77.2022::  // --- B ---
derive_spatial_luma_vector_prediction::135::68.7442::  // 1.
derive_spatial_luma_vector_prediction::136::173.7636::  int xB[3], yB[3];
derive_spatial_luma_vector_prediction::137::195.0061::  xB[0] = xP+nPbW;
derive_spatial_luma_vector_prediction::138::166.3580::  yB[0] = yP-1;
derive_spatial_luma_vector_prediction::139::192.5570::  xB[1] = xB[0]-1;
derive_spatial_luma_vector_prediction::140::168.0833::  yB[1] = yP-1;
derive_spatial_luma_vector_prediction::141::166.3864::  xB[2] = xP-1;
derive_spatial_luma_vector_prediction::142::165.2324::  yB[2] = yP-1;
derive_spatial_luma_vector_prediction::143::69.1027::  // 2.
derive_spatial_luma_vector_prediction::144::187.7793::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::145::201.7265::  out_mvLXN[B].x = 0;
derive_spatial_luma_vector_prediction::146::201.5637::  out_mvLXN[B].y = 0;
derive_spatial_luma_vector_prediction::147::6.1714::  // 3. test B0,B1,B2 (Bk)
derive_spatial_luma_vector_prediction::149::112.2920::  bool availableB[3];
derive_spatial_luma_vector_prediction::150::223.0104::  for (int k=0;k<3;k++) {
derive_spatial_luma_vector_prediction::151::713.1144::    availableB[k] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xB[k],yB[k]);
derive_spatial_luma_vector_prediction::152::294.9926::    if (availableB[k] && out_availableFlagLXN[B]==0) {
derive_spatial_luma_vector_prediction::153::139.9250::      int Y=1-X;
derive_spatial_luma_vector_prediction::154::376.8656::      const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::155::255.0467::      logtrace(LogMotion,"MVP B%d=\n",k);
derive_spatial_luma_vector_prediction::156::145.4369::      logmvcand(vi);
derive_spatial_luma_vector_prediction::157::191.1090::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::158::527.7561::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::159::194.9249::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::160::531.0328::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::161::400.5255::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::162::444.2259::        logtrace(LogMotion,"a) take B%d/L%d as B candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::163::215.9078::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::164::290.8272::        out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::165::235.7608::        refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::166::65.2578::      }
derive_spatial_luma_vector_prediction::167::438.9611::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::168::191.7245::        logtrace(LogMotion,"b) take B%d/L%d as B candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::169::238.9262::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::170::304.3784::        out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::171::237.0869::        refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::172::64.1824::      }
derive_spatial_luma_vector_prediction::173::49.5846::    }
derive_spatial_luma_vector_prediction::174::36.1761::  }
derive_spatial_luma_vector_prediction::175::70.1425::  // 4.
derive_spatial_luma_vector_prediction::176::270.6449::  if (isScaledFlagLX==0 &&      // no A predictor,
derive_spatial_luma_vector_prediction::177::280.2277::      out_availableFlagLXN[B])  // but an unscaled B predictor
derive_spatial_luma_vector_prediction::178::49.4289::    {
derive_spatial_luma_vector_prediction::179::174.5943::      // use unscaled B predictor as A predictor
derive_spatial_luma_vector_prediction::180::319.5601::      logtrace(LogMotion,"copy the same-POC B candidate as additional A candidate\n");
derive_spatial_luma_vector_prediction::181::201.9365::      out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::182::290.1046::      out_mvLXN[A] = out_mvLXN[B];
derive_spatial_luma_vector_prediction::183::169.0408::      refIdxA = refIdxB;
derive_spatial_luma_vector_prediction::184::48.8800::    }
derive_spatial_luma_vector_prediction::185::66.4957::  // 5.
derive_spatial_luma_vector_prediction::186::284.7872::  // If no A predictor, we output the unscaled B as the A predictor (above)
derive_spatial_luma_vector_prediction::187::162.5421::  // and also add a scaled B predictor here.
derive_spatial_luma_vector_prediction::188::308.5720::  // If there is (probably) an A predictor, no differing-POC B predictor is generated.
derive_spatial_luma_vector_prediction::189::168.0505::  if (isScaledFlagLX==0) {
derive_spatial_luma_vector_prediction::190::182.9907::    out_availableFlagLXN[B]=0;
derive_spatial_luma_vector_prediction::191::384.1252::    for (int k=0 ; k<=2 && out_availableFlagLXN[B]==0 ; k++) {
derive_spatial_luma_vector_prediction::192::147.5238::      int refPicList=-1;
derive_spatial_luma_vector_prediction::193::160.9897::      if (availableB[k]) {
derive_spatial_luma_vector_prediction::194::161.2850::        int Y=1-X;
derive_spatial_luma_vector_prediction::195::416.3957::        const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::196::231.5140::        if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::197::509.9434::            shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::199::350.5247::          out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::200::278.2262::          refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::201::180.2832::          refPicList = X;
derive_spatial_luma_vector_prediction::202::84.7644::        }
derive_spatial_luma_vector_prediction::203::267.2037::        else if (vi.predFlag[Y]==1 &&
derive_spatial_luma_vector_prediction::204::639.2736::                 shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::205::238.0892::          out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::206::320.1728::          out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::207::261.3892::          refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::208::170.6381::          refPicList = Y;
derive_spatial_luma_vector_prediction::209::83.1768::        }
derive_spatial_luma_vector_prediction::210::69.7717::      }
derive_spatial_luma_vector_prediction::211::259.3270::      if (out_availableFlagLXN[B]==1) {
derive_spatial_luma_vector_prediction::212::195.3437::        if (refIdxB<0) {
derive_spatial_luma_vector_prediction::213::384.1280::          out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::214::151.5025::          return; // error
derive_spatial_luma_vector_prediction::215::82.3149::        }
derive_spatial_luma_vector_prediction::216::202.8691::        assert(refPicList>=0);
derive_spatial_luma_vector_prediction::217::209.8304::        assert(refIdxB>=0);
derive_spatial_luma_vector_prediction::218::543.4222::        const de265_image* refPicB=ctx->get_image(shdr->RefPicList[refPicList][refIdxB ]);
derive_spatial_luma_vector_prediction::219::582.1950::        const de265_image* refPicX=ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::220::381.2166::        int isLongTermB = shdr->LongTermRefPic[refPicList][refIdxB ];
derive_spatial_luma_vector_prediction::221::445.4065::        int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::222::292.4482::        if (refPicB==NULL || refPicX==NULL) {
derive_spatial_luma_vector_prediction::223::567.4090::          img->decctx->add_warning(DE265_WARNING_NONEXISTING_REFERENCE_PICTURE_ACCESSED,false);
derive_spatial_luma_vector_prediction::224::326.5182::          img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::225::81.5453::        }
derive_spatial_luma_vector_prediction::226::370.4783::        else if (refPicB->PicOrderCntVal != refPicX->PicOrderCntVal &&
derive_spatial_luma_vector_prediction::227::302.8633::                 !isLongTermB && !isLongTermX) {
derive_spatial_luma_vector_prediction::228::379.0723::          int distB = img->PicOrderCntVal - refPicB->PicOrderCntVal;
derive_spatial_luma_vector_prediction::229::314.7558::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::230::702.1458::          logtrace(LogMotion,"scale MVP B: B-POC:%d X-POC:%d\n",refPicB->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::231::516.0815::          if (!scale_mv(&out_mvLXN[B], out_mvLXN[B], distB, distX)) {
derive_spatial_luma_vector_prediction::232::517.6472::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::233::348.0003::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::234::96.3086::          }
derive_spatial_luma_vector_prediction::235::83.4655::        }
derive_spatial_luma_vector_prediction::236::64.5015::      }
derive_spatial_luma_vector_prediction::237::48.9433::    }
derive_spatial_luma_vector_prediction::238::34.1502::  }
derive_spatial_luma_vector_prediction::239::12.3791::}
compute_candidates::1::119.4581::void compute_candidates(
compute_candidates::2::200.0567::    poi_t *p_poi_list,
compute_candidates::3::195.0449::    addrtree_node_t *p_candidates
compute_candidates::4::33.6997::)
compute_candidates::5::33.3258::{
compute_candidates::6::146.1955::    poi_t *poi;
compute_candidates::7::96.0046::    unsigned int cursor;
compute_candidates::8::127.1122::    uint64_t delta;
compute_candidates::9::124.5462::    uint64_t v;
compute_candidates::10::152.9931::    uint64_t freespace;
compute_candidates::11::81.8564::    int count;
compute_candidates::12::234.8857::    uint64_t max_address = 0xFFFFFFFFFFFFFFFF;
compute_candidates::13::132.8998::    int i,j,z;
compute_candidates::14::150.3068::    int nb_candidates = 0;
compute_candidates::15::103.7818::    unsigned int memsize;
compute_candidates::16::169.0826::    score_entry_t *p_scores;
compute_candidates::17::188.9108::    pthread_t *p_threads = NULL;
compute_candidates::18::222.4589::    parallel_params_t *p_threads_params = NULL;
compute_candidates::19::151.3436::    int b_has_str = 0;
compute_candidates::20::218.8510::    poi = p_poi_list->p_next;
compute_candidates::21::138.6755::    while (poi != NULL)
compute_candidates::22::52.5571::    {
compute_candidates::23::341.6998::        if ((poi->type == POI_STRING) && !b_has_str)
compute_candidates::24::80.6899::        {
compute_candidates::25::195.4537::            b_has_str = 1;
compute_candidates::26::80.5620::        }
compute_candidates::27::206.6353::        poi = poi->p_next;
compute_candidates::28::147.1554::        nb_candidates++;
compute_candidates::29::52.0868::    }
compute_candidates::30::95.0959::    i = 0;
compute_candidates::31::221.8153::    poi = p_poi_list->p_next;
compute_candidates::32::144.7396::    if (poi != NULL)
compute_candidates::33::52.3962::    {
compute_candidates::34::186.1575::        while ((poi != NULL))
compute_candidates::35::81.7370::        {
compute_candidates::36::348.2424::            progress_bar(i, nb_candidates, "Analyzing ...");
compute_candidates::37::559.0325::            for (cursor=0; cursor<g_content_size; cursor+=((g_target_arch==ARCH_32)?4:8))
compute_candidates::38::111.1291::            {
compute_candidates::39::13.5143::                v = read_pointer(g_target_arch, g_target_endian, gp_content, cursor);
compute_candidates::40::371.1565::                /* Candidate pointer must not be made of ASCII. */
compute_candidates::41::430.2658::                /* Add heuristic because pointer should be aligned on 4bytes/8bytes 
compute_candidates::42::448.9453::                 * if v % get_arch_pointer_size(arch) != 0 --> not aligned 
compute_candidates::43::176.3629::                 * */
compute_candidates::44::560.2426::                if ((v & g_mem_alignment_mask) == (poi->offset & g_mem_alignment_mask) && 
compute_candidates::45::442.5702::                    !is_ascii_ptr(v, g_target_arch) && 
compute_candidates::46::375.1840::                    is_ptr_aligned(v,g_target_arch))
compute_candidates::47::149.6078::                {
compute_candidates::48::461.3321::                    /* If PoI is a string, we expect a pointer on its first character. */
compute_candidates::49::890.0576::                    if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || ((b_has_str == 0) && (poi->type == POI_FUNCTION)) )
compute_candidates::50::797.3053::                    //if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || (poi->type == POI_FUNCTION) )
compute_candidates::51::187.1931::                    {
compute_candidates::52::359.8845::                        if (v>=poi->offset)
compute_candidates::53::191.8701::                        {
compute_candidates::54::450.6942::                            delta = (v - poi->offset);
compute_candidates::55::884.1370::                            freespace = ( ((g_target_arch==ARCH_32)?0xffffffff:0xffffffffffffffff) - delta) + 1;
compute_candidates::56::438.3932::                            if (freespace >= g_content_size)
compute_candidates::57::255.4247::                            {
compute_candidates::58::399.9975::                                /* register candidate. */
compute_candidates::59::668.0603::                                addrtree_register_address(p_candidates, (uint64_t)delta);
compute_candidates::60::251.7533::                            }
compute_candidates::61::222.6444::                        }
compute_candidates::62::192.8848::                    }
compute_candidates::63::160.5118::                }
compute_candidates::64::124.9345::            }
compute_candidates::65::342.9607::            /* Does the memory used exceed our limited space ? */
compute_candidates::66::431.2785::            memsize = addrtree_get_memsize(p_candidates);
compute_candidates::67::334.9340::            if (memsize>MAX_MEM_AMOUNT)
compute_candidates::68::129.9461::            {
compute_candidates::69::425.0841::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::70::517.7932::                info("[mem] Memory tree is too big (%d bytes), reducing...\r\n", memsize);
compute_candidates::71::386.0165::                max_votes = addrtree_max_vote(p_candidates);
compute_candidates::72::404.3957::                addrtree_filter(p_candidates, max_votes/2);   
compute_candidates::73::383.7360::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::74::407.1469::                info("[mem] Memory tree reduced to %d bytes\r\n", memsize);
compute_candidates::75::115.7695::            }
compute_candidates::76::244.5346::            poi = poi->p_next;
compute_candidates::77::135.5474::            i++;
compute_candidates::78::84.0727::        }
compute_candidates::79::159.9019::        progress_bar_done();
compute_candidates::80::247.8679::        /* Loop on candidates, keep the best one. */
compute_candidates::81::186.4807::        g_bm_votes = -1;
compute_candidates::82::196.7611::        g_bm_total_votes = 0;
compute_candidates::83::172.1345::        g_bm_count=0;
compute_candidates::84::354.1133::        addrtree_browse(p_candidates, find_best_match, 0);
compute_candidates::85::373.8572::        logm("[i] Found %d base addresses to test\n", g_bm_count);
compute_candidates::86::98.2313::        /*
compute_candidates::87::255.6565::         * Best match address corresponds to the address for which we identified
compute_candidates::88::299.2051::         * the biggest numbers of alleged pointers. The best match is not always
compute_candidates::89::329.3143::         * the correct base address, so we just display it here and try to assess
compute_candidates::90::254.9821::         * other candidates in case we missed the correct base address.
compute_candidates::91::97.8910::         */
compute_candidates::92::267.6683::        gp_ba_candidates = (base_address_candidate *)malloc(sizeof(base_address_candidate) * g_bm_count);
compute_candidates::93::257.9983::        if (gp_ba_candidates != NULL)
compute_candidates::94::90.8645::        {
compute_candidates::95::359.3020::            max_votes = addrtree_max_vote(p_candidates);
compute_candidates::96::217.5377::            g_bm_kept = 0;
compute_candidates::97::257.0464::            gp_ba_candidates_index = 0;
compute_candidates::98::401.4147::            addrtree_browse(p_candidates, fill_best_matches, 0);
compute_candidates::99::221.5223::            info("tree browsed\n");
compute_candidates::100::266.8933::            if (g_target_arch == ARCH_64)
compute_candidates::101::556.3418::                info("Best match for base address is %016lx (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::102::116.3980::            else
compute_candidates::103::534.6783::                info("Best match for base address is %08x (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::104::195.1041::            /* Sort candidates array. */
compute_candidates::105::547.9604::            qsort(gp_ba_candidates, g_bm_count, sizeof(base_address_candidate), candidate_compare_func);
compute_candidates::106::369.3596::            debug("Found %d candidates !\n", gp_ba_candidates_index);
compute_candidates::107::383.9564::            for (i=0; i<gp_ba_candidates_index; i++)
compute_candidates::108::115.8476::            {
compute_candidates::109::837.6441::                debug("Found candidate address %016lx (votes: %d, position: %d)\n", gp_ba_candidates[i].address, gp_ba_candidates[i].votes, i+1);
compute_candidates::110::114.2636::            }
compute_candidates::111::134.9592::            if (!g_deepmode)
compute_candidates::113::534.4821::                for (i=max_votes;i>=0;i--)
compute_candidates::114::177.0377::                {
compute_candidates::115::343.8321::                    g_bm_kept = 0;
compute_candidates::116::521.2549::                    for (j=0;j<g_bm_count;j++)
compute_candidates::117::201.6758::                    {
compute_candidates::118::492.9790::                        if (gp_ba_candidates[j].votes >= i)
compute_candidates::119::242.2797::                        {
compute_candidates::120::377.8985::                            g_bm_kept++;
compute_candidates::121::235.4446::                        }
compute_candidates::122::198.9693::                    }
compute_candidates::123::372.2316::                    if (g_bm_kept>=30)
compute_candidates::124::204.7925::                    {
compute_candidates::125::373.5859::                        max_votes = i+1;
compute_candidates::126::277.6299::                        break;
compute_candidates::127::205.0152::                    }
compute_candidates::128::173.7680::                }
compute_candidates::129::141.7870::            }
compute_candidates::130::143.1487::            else
compute_candidates::131::141.6301::            {
compute_candidates::132::448.6540::                g_bm_kept = gp_ba_candidates_index;
compute_candidates::133::118.4992::                max_votes = 0;
compute_candidates::134::223.3545::            }            
compute_candidates::135::507.0530::            info("Keep %d candidates with max vote=%d\n", g_bm_kept, max_votes);
compute_candidates::136::138.4861::            /*
compute_candidates::137::313.6420::             * Loop on candidate base addresses and check if arrays of values may
compute_candidates::138::325.6885::             * point to known point of interests (text strings or other arrays).
compute_candidates::139::132.8885::             * 
compute_candidates::140::322.8318::             * This method gives good results when at least one array contains a
compute_candidates::141::238.1838::             * list of pointers to text strings.
compute_candidates::142::131.6328::             */
compute_candidates::143::274.5800::            /* Allocate memory for our score table. */
compute_candidates::144::551.5130::            p_scores = (score_entry_t*)malloc(sizeof(score_entry_t) * g_bm_kept);
compute_candidates::145::161.6787::            z=0;
compute_candidates::146::234.2716::            if (p_scores != NULL)
compute_candidates::147::114.8529::            {
compute_candidates::148::502.6000::                memset(p_scores, 0, sizeof(score_entry_t)*g_bm_kept);
compute_candidates::149::383.6968::                /* Compute the number of candidates each thread is going to check. */
compute_candidates::150::345.8688::                z = g_bm_kept / g_nb_threads;
compute_candidates::151::345.2003::                /* Allocate some space to store the threads id. */
compute_candidates::152::544.8922::                p_threads = (pthread_t *)malloc(sizeof(pthread_t) * g_nb_threads);
compute_candidates::153::726.9273::                p_threads_params = (parallel_params_t *)malloc(sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::154::470.2502::                if ((p_threads != NULL) && (p_threads_params != NULL))
compute_candidates::155::147.9779::                {
compute_candidates::156::550.0946::                    memset(p_threads, 0, sizeof(pthread_t) * g_nb_threads);
compute_candidates::157::619.0482::                    memset(p_threads_params, 0, sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::158::298.0390::                    g_bm_processed = 0;
compute_candidates::159::423.7026::                    info("Starting %d threads ...\n", g_nb_threads);
compute_candidates::160::341.1245::                    /* Create `g_nb_threads`. */
compute_candidates::161::437.5537::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::162::184.0810::                    {
compute_candidates::163::483.3433::                        p_threads_params[i].p_scores = p_scores;
compute_candidates::164::548.2199::                        p_threads_params[i].p_poi_list = p_poi_list;
compute_candidates::165::459.6764::                        p_threads_params[i].p_candidates = p_candidates;
compute_candidates::166::538.5135::                        p_threads_params[i].arch = g_target_arch;
compute_candidates::167::543.4697::                        p_threads_params[i].endian = g_target_endian;
compute_candidates::168::461.7510::                        p_threads_params[i].content = gp_content;
compute_candidates::169::549.7848::                        p_threads_params[i].ui_content_size = g_content_size;
compute_candidates::170::476.6974::                        p_threads_params[i].lock = &deep_lock;
compute_candidates::171::463.3126::                        p_threads_params[i].start = i*z;
compute_candidates::172::421.7335::                        p_threads_params[i].count = z;
compute_candidates::173::440.2706::                        if (i == (g_nb_threads - 1))
compute_candidates::174::227.5212::                        {
compute_candidates::175::518.0968::                            if ((i*z + z) < g_bm_kept)
compute_candidates::176::268.6962::                            {
compute_candidates::177::794.8373::                                p_threads_params[i].count = g_bm_kept -   p_threads_params[i].start;
compute_candidates::178::240.2217::                            }
compute_candidates::179::244.0601::                        }
compute_candidates::180::1148.6722::                        info("Thread #%d will cover %d to %d\n", i, p_threads_params[i].start, p_threads_params[i].start+p_threads_params[i].count);
compute_candidates::181::308.0058::                        pthread_create(
compute_candidates::182::379.9752::                            &p_threads[i],
compute_candidates::183::302.5558::                            NULL,
compute_candidates::184::384.3703::                            parallel_refine_candidates,
compute_candidates::185::485.7870::                            (void *)&p_threads_params[i]
compute_candidates::186::232.7768::                        );
compute_candidates::187::188.0028::                    }
compute_candidates::188::390.8441::                    /* Wait for these threads to finish. */
compute_candidates::189::498.0531::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::190::196.9986::                    {
compute_candidates::191::506.4117::                        pthread_join(p_threads[i], NULL);
compute_candidates::192::195.5263::                    }
compute_candidates::193::306.0726::                    progress_bar_done();
compute_candidates::194::171.9416::                    max_address = g_max_address;
compute_candidates::195::369.4427::                    /* Free pthreads. */
compute_candidates::196::329.5096::                    free(p_threads);
compute_candidates::197::348.6776::                    free(p_threads_params);
compute_candidates::198::163.9911::                }
compute_candidates::199::164.9054::                else
compute_candidates::200::163.5907::                {
compute_candidates::201::451.3418::                    error("Cannot allocate memory for multi-threaded search.");
compute_candidates::202::160.3268::                }
compute_candidates::203::499.8896::                info("Best match based on pointers count: %016lx\n", max_address);
compute_candidates::204::391.6694::                /* Check if we have a single candidate with valid array. */
compute_candidates::205::209.1476::                count = 0;
compute_candidates::206::426.6831::                for (i=0; i<g_bm_kept; i++)
compute_candidates::207::158.0412::                {
compute_candidates::208::464.3743::                    if (p_scores[i].has_valid_array > 0)
compute_candidates::209::196.8852::                    {
compute_candidates::210::270.3919::                        count++;
compute_candidates::211::197.0369::                    }
compute_candidates::212::169.2236::                }
compute_candidates::213::272.5481::                if (count == 1)
compute_candidates::214::162.9337::                {
compute_candidates::215::371.5960::                    for (i=0; i<g_bm_kept; i++)
compute_candidates::216::217.9393::                    {
compute_candidates::217::541.0117::                        if (p_scores[i].has_valid_array > 0)
compute_candidates::218::238.4014::                        {
compute_candidates::219::514.5494::                            max_address = p_scores[i].base_address;
compute_candidates::220::290.0705::                            break;
compute_candidates::221::229.1822::                        }
compute_candidates::222::201.1554::                    }
compute_candidates::223::346.1169::                    /* Display 100% matching address. */
compute_candidates::224::375.7148::                    if (g_target_arch == ARCH_64)
compute_candidates::225::666.6891::                        printf("[i] Base address found (valid array): 0x%016lx.\n", max_address);
compute_candidates::226::194.2751::                    else
compute_candidates::227::797.0832::                        printf("[i] Base address found (valid array): 0x%08x.\n", (uint32_t)max_address);
compute_candidates::228::160.6448::                }
compute_candidates::229::167.7816::                else
compute_candidates::230::168.5700::                {
compute_candidates::231::463.1350::                    /* Check if g_bm_address == max_address. */
compute_candidates::232::363.7175::                    if (g_bm_address == max_address)
compute_candidates::233::206.8730::                    {
compute_candidates::234::403.2153::                        /* Display 100% matching address. */
compute_candidates::235::419.7913::                        if (g_target_arch == ARCH_64)
compute_candidates::236::685.4150::                            printf("[i] Base address found: 0x%016lx.\n", g_bm_address);
compute_candidates::237::218.2642::                        else
compute_candidates::238::770.9865::                            printf("[i] Base address found: 0x%08x.\n", (uint32_t)g_bm_address);
compute_candidates::239::186.6045::                    }
compute_candidates::240::406.3215::                    else if (max_address != 0xFFFFFFFFFFFFFFFF)
compute_candidates::241::209.7231::                    {   
compute_candidates::242::403.9929::                        if (g_target_arch == ARCH_64)
compute_candidates::243::730.1940::                            printf("[i] Base address seems to be 0x%016lx (not sure).\n", max_address);
compute_candidates::244::226.4148::                        else
compute_candidates::245::837.6876::                            printf("[i] Base address seems to be 0x%08x (not sure).\n", (uint32_t)max_address);
compute_candidates::246::194.9353::                    }
compute_candidates::247::52.2629::                    else
compute_candidates::248::202.1177::                    {
compute_candidates::249::412.3021::                        if (g_target_arch == ARCH_64)
compute_candidates::250::734.5150::                            printf("[i] Base address seems to be 0x%016lx (not sure).\n", g_bm_address);
compute_candidates::251::218.7441::                        else
compute_candidates::252::796.6873::                            printf("[i] Base address seems to be 0x%08x (not sure).\n", (uint32_t)g_bm_address);
compute_candidates::253::180.5925::                    }
compute_candidates::254::152.3548::                }
compute_candidates::255::250.7069::                /* Sort remaining candidates. */
compute_candidates::256::575.0845::                qsort(p_scores, g_bm_kept, sizeof(score_entry_t), score_compare_func);
compute_candidates::257::493.2864::                /* Tell the user he/she should use the -m/--more to get all the candidates. */
compute_candidates::258::425.0822::                if ((nb_candidates > 0) && (g_bm_kept > 1))
compute_candidates::259::154.4650::                {
compute_candidates::260::455.8667::                    printf(" More base addresses to consider (just in case):\n");
compute_candidates::261::633.1733::                    for (i=0; i<((g_bm_kept>30)?30:g_bm_kept); i++)
compute_candidates::262::160.9353::                    {
compute_candidates::263::756.1221::                        if ((p_scores[i].base_address != max_address) && (p_scores[i].score > 0))
compute_candidates::264::223.0354::                        {
compute_candidates::265::432.8214::                            if (g_target_arch == ARCH_64)
compute_candidates::266::1046.4387::                                printf("  0x%016lx (%f)\n", p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
compute_candidates::267::251.9628::                            else
compute_candidates::268::1116.0314::                                printf("  0x%08x (%.02f)\n", (uint32_t)p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
compute_candidates::269::215.2139::                        }
compute_candidates::270::187.4942::                    }
compute_candidates::271::160.1411::                }
compute_candidates::272::127.1676::            }
compute_candidates::273::132.5635::            else
compute_candidates::274::126.5582::            {
compute_candidates::275::380.3451::                error("Cannot evaluate, low memory !\n");
compute_candidates::276::126.3684::            }
compute_candidates::277::234.6037::            /* Free scores. */
compute_candidates::278::239.4672::            free(p_scores);
compute_candidates::279::92.3881::        }
compute_candidates::280::59.9701::    }
compute_candidates::281::40.2582::    else
compute_candidates::282::255.9803::        error("No point of interests found, cannot deduce loading address.");
compute_candidates::283::10.2218::}
Msg::1::78.7717::void  Msg() {
Msg::2::408.1648::	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::3::10.4084::}
Add::1::139.8650::int  Add(int a, int b) {
Add::2::95.6055::	int* p = &a;
Add::3::150.6759::	*(p-1) = (int)Msg;
Add::4::69.2367::	return a + b;
Add::5::10.2770::}
main::1::54.6297::void main() {
main::2::138.8641::	printf("%d", Add(1, 2));
main::3::59.6045::	system("pause");
main::4::35.3849::	return;
main::5::10.1404::}
derive_spatial_luma_vector_prediction::1::230.1341::// 8.5.3.1.6
derive_spatial_luma_vector_prediction::2::431.3482::void derive_spatial_luma_vector_prediction(base_context* ctx,
derive_spatial_luma_vector_prediction::3::493.5695::                                           de265_image* img,
derive_spatial_luma_vector_prediction::4::531.9108::                                           const slice_segment_header* shdr,
derive_spatial_luma_vector_prediction::5::689.5804::                                           int xC,int yC,int nCS,int xP,int yP,
derive_spatial_luma_vector_prediction::6::594.9593::                                           int nPbW,int nPbH, int X,
derive_spatial_luma_vector_prediction::7::537.1721::                                           int refIdxLX, int partIdx,
derive_spatial_luma_vector_prediction::8::595.5970::                                           uint8_t out_availableFlagLXN[2],
derive_spatial_luma_vector_prediction::9::544.6716::                                           MotionVector out_mvLXN[2])
derive_spatial_luma_vector_prediction::10::39.6299::{
derive_spatial_luma_vector_prediction::11::301.2087::  if (refIdxLX >= MAX_NUM_REF_PICS) {
derive_spatial_luma_vector_prediction::12::532.1599::    ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::13::340.5375::    img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::14::92.1616::    out_availableFlagLXN[0] = false;
derive_spatial_luma_vector_prediction::15::202.5281::    out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::16::221.1711::    out_mvLXN[0] = MotionVector{};
derive_spatial_luma_vector_prediction::17::217.5882::    out_mvLXN[1] = MotionVector{};
derive_spatial_luma_vector_prediction::18::64.8187::    return;
derive_spatial_luma_vector_prediction::19::34.8934::  }
derive_spatial_luma_vector_prediction::20::144.6198::  int isScaledFlagLX = 0;
derive_spatial_luma_vector_prediction::21::97.8417::  const int A=0;
derive_spatial_luma_vector_prediction::22::97.2986::  const int B=1;
derive_spatial_luma_vector_prediction::23::169.4641::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::24::170.4811::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::25::74.3089::  // --- A ---
derive_spatial_luma_vector_prediction::26::61.9744::  // 1.
derive_spatial_luma_vector_prediction::27::155.8167::  int xA[2], yA[2];
derive_spatial_luma_vector_prediction::28::148.9188::  xA[0] = xP-1;
derive_spatial_luma_vector_prediction::29::176.0562::  yA[0] = yP + nPbH;
derive_spatial_luma_vector_prediction::30::153.7812::  xA[1] = xA[0];
derive_spatial_luma_vector_prediction::31::177.5799::  yA[1] = yA[0]-1;
derive_spatial_luma_vector_prediction::32::59.3073::  // 2.
derive_spatial_luma_vector_prediction::33::168.2144::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::34::180.2883::  out_mvLXN[A].x = 0;
derive_spatial_luma_vector_prediction::35::185.5391::  out_mvLXN[A].y = 0;
derive_spatial_luma_vector_prediction::36::97.2497::  // 3. / 4.
derive_spatial_luma_vector_prediction::37::99.0050::  bool availableA[2];
derive_spatial_luma_vector_prediction::38::644.4591::  availableA[0] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[0],yA[0]);
derive_spatial_luma_vector_prediction::39::655.7600::  availableA[1] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[1],yA[1]);
derive_spatial_luma_vector_prediction::40::62.7414::  // 5.
derive_spatial_luma_vector_prediction::41::199.4772::  if (availableA[0] || availableA[1]) {
derive_spatial_luma_vector_prediction::42::142.9057::    isScaledFlagLX = 1;
derive_spatial_luma_vector_prediction::43::35.8248::  }
derive_spatial_luma_vector_prediction::44::187.6632::  // 6.  test A0 and A1  (Ak)
derive_spatial_luma_vector_prediction::45::122.8423::  int refIdxA=-1;
derive_spatial_luma_vector_prediction::46::165.8008::  // the POC we want to reference in this PB
derive_spatial_luma_vector_prediction::47::414.5409::  const de265_image* tmpimg = ctx->get_image(shdr->RefPicList[X][ refIdxLX ]);
derive_spatial_luma_vector_prediction::48::170.4601::  if (tmpimg==NULL) { return; }
derive_spatial_luma_vector_prediction::49::44.9284::  const int referenced_POC = tmpimg->PicOrderCntVal;
derive_spatial_luma_vector_prediction::51::151.1843::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::52::377.4350::        out_availableFlagLXN[A]==0 && // no A?-predictor so far
derive_spatial_luma_vector_prediction::53::407.4319::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::54::142.5447::      int Y=1-X;
derive_spatial_luma_vector_prediction::55::381.2228::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::56::260.0481::      logtrace(LogMotion,"MVP A%d=\n",k);
derive_spatial_luma_vector_prediction::57::141.3833::      logmvcand(vi);
derive_spatial_luma_vector_prediction::58::191.9453::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::59::524.1889::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::60::196.6299::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::61::539.1241::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::62::234.8116::      // check whether the predictor X is available and references the same POC
derive_spatial_luma_vector_prediction::63::399.5859::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::64::420.3488::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::65::219.7479::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::66::288.7475::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::67::234.2914::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::68::64.9098::      }
derive_spatial_luma_vector_prediction::69::285.0236::      // check whether the other predictor (Y) is available and references the same POC
derive_spatial_luma_vector_prediction::70::423.2102::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::71::458.6632::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::72::226.0326::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::73::290.3179::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::74::228.4218::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::75::62.9539::      }
derive_spatial_luma_vector_prediction::76::47.7499::    }
derive_spatial_luma_vector_prediction::77::36.2193::  }
derive_spatial_luma_vector_prediction::78::301.8848::  // 7. If there is no predictor referencing the same POC, we take any other reference as
derive_spatial_luma_vector_prediction::79::289.9316::  //    long as it is the same type of reference (long-term / short-term)
derive_spatial_luma_vector_prediction::80::364.8517::  for (int k=0 ; k<=1 && out_availableFlagLXN[A]==0 ; k++) {
derive_spatial_luma_vector_prediction::81::128.0671::    int refPicList=-1;
derive_spatial_luma_vector_prediction::82::136.2762::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::83::318.8507::        // TODO: we could remove this call by storing the result of the similar computation above
derive_spatial_luma_vector_prediction::84::399.5252::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::85::141.6382::      int Y=1-X;
derive_spatial_luma_vector_prediction::86::381.9064::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::87::210.3310::      if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::88::556.2764::          shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::89::446.8063::        logtrace(LogMotion,"take A%D/L%d as A candidate with different POCs\n",k,X);
derive_spatial_luma_vector_prediction::90::231.6211::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::91::297.6886::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::92::245.1558::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::93::154.9092::        refPicList = X;
derive_spatial_luma_vector_prediction::94::33.4300::      }
derive_spatial_luma_vector_prediction::96::655.3190::               shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::97::457.5874::        logtrace(LogMotion,"take A%d/L%d as A candidate with different POCs\n",k,Y);
derive_spatial_luma_vector_prediction::98::221.5365::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::99::296.0308::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::100::236.2637::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::101::146.7216::        refPicList = Y;
derive_spatial_luma_vector_prediction::102::64.7599::      }
derive_spatial_luma_vector_prediction::103::53.9657::    }
derive_spatial_luma_vector_prediction::104::233.7932::    if (out_availableFlagLXN[A]==1) {
derive_spatial_luma_vector_prediction::105::177.0657::      if (refIdxA<0) {
derive_spatial_luma_vector_prediction::106::357.4395::        out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::107::129.5664::        return; // error
derive_spatial_luma_vector_prediction::108::66.2000::      }
derive_spatial_luma_vector_prediction::109::183.7471::      assert(refIdxA>=0);
derive_spatial_luma_vector_prediction::110::177.7560::      assert(refPicList>=0);
derive_spatial_luma_vector_prediction::111::491.3536::      const de265_image* refPicA = ctx->get_image(shdr->RefPicList[refPicList][refIdxA ]);
derive_spatial_luma_vector_prediction::112::546.7984::      const de265_image* refPicX = ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::113::389.2231::      //int picStateA = shdr->RefPicList_PicState[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::114::440.0976::      //int picStateX = shdr->RefPicList_PicState[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::115::367.5873::      int isLongTermA = shdr->LongTermRefPic[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::116::291.0103::      int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::117::445.6613::      logtrace(LogMotion,"scale MVP A: A-POC:%d X-POC:%d\n",
derive_spatial_luma_vector_prediction::118::393.4401::               refPicA->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::119::228.9388::      if (!isLongTermA && !isLongTermX)
derive_spatial_luma_vector_prediction::120::75.9930::      /*
derive_spatial_luma_vector_prediction::121::213.8279::      if (picStateA == UsedForShortTermReference &&
derive_spatial_luma_vector_prediction::122::220.4923::          picStateX == UsedForShortTermReference)
derive_spatial_luma_vector_prediction::123::69.7650::      */
derive_spatial_luma_vector_prediction::124::79.2694::        {
derive_spatial_luma_vector_prediction::125::361.6357::          int distA = img->PicOrderCntVal - refPicA->PicOrderCntVal;
derive_spatial_luma_vector_prediction::126::302.6607::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::127::510.5249::          if (!scale_mv(&out_mvLXN[A], out_mvLXN[A], distA, distX)) {
derive_spatial_luma_vector_prediction::128::481.5593::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::129::323.1897::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::130::92.3894::          }
derive_spatial_luma_vector_prediction::131::76.7261::        }
derive_spatial_luma_vector_prediction::132::48.9404::    }
derive_spatial_luma_vector_prediction::133::35.0834::  }
derive_spatial_luma_vector_prediction::134::77.2022::  // --- B ---
derive_spatial_luma_vector_prediction::135::68.7442::  // 1.
derive_spatial_luma_vector_prediction::136::173.7636::  int xB[3], yB[3];
derive_spatial_luma_vector_prediction::137::195.0061::  xB[0] = xP+nPbW;
derive_spatial_luma_vector_prediction::138::166.3580::  yB[0] = yP-1;
derive_spatial_luma_vector_prediction::139::192.5570::  xB[1] = xB[0]-1;
derive_spatial_luma_vector_prediction::140::168.0833::  yB[1] = yP-1;
derive_spatial_luma_vector_prediction::141::166.3864::  xB[2] = xP-1;
derive_spatial_luma_vector_prediction::142::165.2324::  yB[2] = yP-1;
derive_spatial_luma_vector_prediction::143::69.1027::  // 2.
derive_spatial_luma_vector_prediction::144::187.7793::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::145::201.7265::  out_mvLXN[B].x = 0;
derive_spatial_luma_vector_prediction::146::201.5637::  out_mvLXN[B].y = 0;
derive_spatial_luma_vector_prediction::147::6.1714::  // 3. test B0,B1,B2 (Bk)
derive_spatial_luma_vector_prediction::149::112.2920::  bool availableB[3];
derive_spatial_luma_vector_prediction::150::223.0104::  for (int k=0;k<3;k++) {
derive_spatial_luma_vector_prediction::151::713.1144::    availableB[k] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xB[k],yB[k]);
derive_spatial_luma_vector_prediction::152::294.9926::    if (availableB[k] && out_availableFlagLXN[B]==0) {
derive_spatial_luma_vector_prediction::153::139.9250::      int Y=1-X;
derive_spatial_luma_vector_prediction::154::376.8656::      const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::155::255.0467::      logtrace(LogMotion,"MVP B%d=\n",k);
derive_spatial_luma_vector_prediction::156::145.4369::      logmvcand(vi);
derive_spatial_luma_vector_prediction::157::191.1090::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::158::527.7561::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::159::194.9249::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::160::531.0328::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::161::400.5255::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::162::444.2259::        logtrace(LogMotion,"a) take B%d/L%d as B candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::163::215.9078::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::164::290.8272::        out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::165::235.7608::        refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::166::65.2578::      }
derive_spatial_luma_vector_prediction::167::438.9611::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::168::191.7245::        logtrace(LogMotion,"b) take B%d/L%d as B candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::169::238.9262::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::170::304.3784::        out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::171::237.0869::        refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::172::64.1824::      }
derive_spatial_luma_vector_prediction::173::49.5846::    }
derive_spatial_luma_vector_prediction::174::36.1761::  }
derive_spatial_luma_vector_prediction::175::70.1425::  // 4.
derive_spatial_luma_vector_prediction::176::270.6449::  if (isScaledFlagLX==0 &&      // no A predictor,
derive_spatial_luma_vector_prediction::177::280.2277::      out_availableFlagLXN[B])  // but an unscaled B predictor
derive_spatial_luma_vector_prediction::178::49.4289::    {
derive_spatial_luma_vector_prediction::179::174.5943::      // use unscaled B predictor as A predictor
derive_spatial_luma_vector_prediction::180::319.5601::      logtrace(LogMotion,"copy the same-POC B candidate as additional A candidate\n");
derive_spatial_luma_vector_prediction::181::201.9365::      out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::182::290.1046::      out_mvLXN[A] = out_mvLXN[B];
derive_spatial_luma_vector_prediction::183::169.0408::      refIdxA = refIdxB;
derive_spatial_luma_vector_prediction::184::48.8800::    }
derive_spatial_luma_vector_prediction::185::66.4957::  // 5.
derive_spatial_luma_vector_prediction::186::284.7872::  // If no A predictor, we output the unscaled B as the A predictor (above)
derive_spatial_luma_vector_prediction::187::162.5421::  // and also add a scaled B predictor here.
derive_spatial_luma_vector_prediction::188::308.5720::  // If there is (probably) an A predictor, no differing-POC B predictor is generated.
derive_spatial_luma_vector_prediction::189::168.0505::  if (isScaledFlagLX==0) {
derive_spatial_luma_vector_prediction::190::182.9907::    out_availableFlagLXN[B]=0;
derive_spatial_luma_vector_prediction::191::384.1252::    for (int k=0 ; k<=2 && out_availableFlagLXN[B]==0 ; k++) {
derive_spatial_luma_vector_prediction::192::147.5238::      int refPicList=-1;
derive_spatial_luma_vector_prediction::193::160.9897::      if (availableB[k]) {
derive_spatial_luma_vector_prediction::194::161.2850::        int Y=1-X;
derive_spatial_luma_vector_prediction::195::416.3957::        const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::196::231.5140::        if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::197::509.9434::            shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::199::350.5247::          out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::200::278.2262::          refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::201::180.2832::          refPicList = X;
derive_spatial_luma_vector_prediction::202::84.7644::        }
derive_spatial_luma_vector_prediction::203::267.2037::        else if (vi.predFlag[Y]==1 &&
derive_spatial_luma_vector_prediction::204::639.2736::                 shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::205::238.0892::          out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::206::320.1728::          out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::207::261.3892::          refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::208::170.6381::          refPicList = Y;
derive_spatial_luma_vector_prediction::209::83.1768::        }
derive_spatial_luma_vector_prediction::210::69.7717::      }
derive_spatial_luma_vector_prediction::211::259.3270::      if (out_availableFlagLXN[B]==1) {
derive_spatial_luma_vector_prediction::212::195.3437::        if (refIdxB<0) {
derive_spatial_luma_vector_prediction::213::384.1280::          out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::214::151.5025::          return; // error
derive_spatial_luma_vector_prediction::215::82.3149::        }
derive_spatial_luma_vector_prediction::216::202.8691::        assert(refPicList>=0);
derive_spatial_luma_vector_prediction::217::209.8304::        assert(refIdxB>=0);
derive_spatial_luma_vector_prediction::218::543.4222::        const de265_image* refPicB=ctx->get_image(shdr->RefPicList[refPicList][refIdxB ]);
derive_spatial_luma_vector_prediction::219::582.1950::        const de265_image* refPicX=ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::220::381.2166::        int isLongTermB = shdr->LongTermRefPic[refPicList][refIdxB ];
derive_spatial_luma_vector_prediction::221::445.4065::        int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::222::292.4482::        if (refPicB==NULL || refPicX==NULL) {
derive_spatial_luma_vector_prediction::223::567.4090::          img->decctx->add_warning(DE265_WARNING_NONEXISTING_REFERENCE_PICTURE_ACCESSED,false);
derive_spatial_luma_vector_prediction::224::326.5182::          img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::225::81.5453::        }
derive_spatial_luma_vector_prediction::226::370.4783::        else if (refPicB->PicOrderCntVal != refPicX->PicOrderCntVal &&
derive_spatial_luma_vector_prediction::227::302.8633::                 !isLongTermB && !isLongTermX) {
derive_spatial_luma_vector_prediction::228::379.0723::          int distB = img->PicOrderCntVal - refPicB->PicOrderCntVal;
derive_spatial_luma_vector_prediction::229::314.7558::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::230::702.1458::          logtrace(LogMotion,"scale MVP B: B-POC:%d X-POC:%d\n",refPicB->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::231::516.0815::          if (!scale_mv(&out_mvLXN[B], out_mvLXN[B], distB, distX)) {
derive_spatial_luma_vector_prediction::232::517.6472::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::233::348.0003::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::234::96.3086::          }
derive_spatial_luma_vector_prediction::235::83.4655::        }
derive_spatial_luma_vector_prediction::236::64.5015::      }
derive_spatial_luma_vector_prediction::237::48.9433::    }
derive_spatial_luma_vector_prediction::238::34.1502::  }
derive_spatial_luma_vector_prediction::239::12.3791::}
compute_candidates::1::119.4581::void compute_candidates(
compute_candidates::2::200.0567::    poi_t *p_poi_list,
compute_candidates::3::195.0449::    addrtree_node_t *p_candidates
compute_candidates::4::33.6997::)
compute_candidates::5::33.3258::{
compute_candidates::6::146.1955::    poi_t *poi;
compute_candidates::7::96.0046::    unsigned int cursor;
compute_candidates::8::127.1122::    uint64_t delta;
compute_candidates::9::124.5462::    uint64_t v;
compute_candidates::10::152.9931::    uint64_t freespace;
compute_candidates::11::81.8564::    int count;
compute_candidates::12::234.8857::    uint64_t max_address = 0xFFFFFFFFFFFFFFFF;
compute_candidates::13::132.8998::    int i,j,z;
compute_candidates::14::150.3068::    int nb_candidates = 0;
compute_candidates::15::103.7818::    unsigned int memsize;
compute_candidates::16::169.0826::    score_entry_t *p_scores;
compute_candidates::17::188.9108::    pthread_t *p_threads = NULL;
compute_candidates::18::222.4589::    parallel_params_t *p_threads_params = NULL;
compute_candidates::19::151.3436::    int b_has_str = 0;
compute_candidates::20::218.8510::    poi = p_poi_list->p_next;
compute_candidates::21::138.6755::    while (poi != NULL)
compute_candidates::22::52.5571::    {
compute_candidates::23::341.6998::        if ((poi->type == POI_STRING) && !b_has_str)
compute_candidates::24::80.6899::        {
compute_candidates::25::195.4537::            b_has_str = 1;
compute_candidates::26::80.5620::        }
compute_candidates::27::206.6353::        poi = poi->p_next;
compute_candidates::28::147.1554::        nb_candidates++;
compute_candidates::29::52.0868::    }
compute_candidates::30::95.0959::    i = 0;
compute_candidates::31::221.8153::    poi = p_poi_list->p_next;
compute_candidates::32::144.7396::    if (poi != NULL)
compute_candidates::33::52.3962::    {
compute_candidates::34::186.1575::        while ((poi != NULL))
compute_candidates::35::81.7370::        {
compute_candidates::36::348.2424::            progress_bar(i, nb_candidates, "Analyzing ...");
compute_candidates::37::559.0325::            for (cursor=0; cursor<g_content_size; cursor+=((g_target_arch==ARCH_32)?4:8))
compute_candidates::38::111.1291::            {
compute_candidates::39::13.5143::                v = read_pointer(g_target_arch, g_target_endian, gp_content, cursor);
compute_candidates::40::371.1565::                /* Candidate pointer must not be made of ASCII. */
compute_candidates::41::430.2658::                /* Add heuristic because pointer should be aligned on 4bytes/8bytes 
compute_candidates::42::448.9453::                 * if v % get_arch_pointer_size(arch) != 0 --> not aligned 
compute_candidates::43::176.3629::                 * */
compute_candidates::44::560.2426::                if ((v & g_mem_alignment_mask) == (poi->offset & g_mem_alignment_mask) && 
compute_candidates::45::442.5702::                    !is_ascii_ptr(v, g_target_arch) && 
compute_candidates::46::375.1840::                    is_ptr_aligned(v,g_target_arch))
compute_candidates::47::149.6078::                {
compute_candidates::48::461.3321::                    /* If PoI is a string, we expect a pointer on its first character. */
compute_candidates::49::890.0576::                    if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || ((b_has_str == 0) && (poi->type == POI_FUNCTION)) )
compute_candidates::50::797.3053::                    //if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || (poi->type == POI_FUNCTION) )
compute_candidates::51::187.1931::                    {
compute_candidates::52::359.8845::                        if (v>=poi->offset)
compute_candidates::53::191.8701::                        {
compute_candidates::54::450.6942::                            delta = (v - poi->offset);
compute_candidates::55::884.1370::                            freespace = ( ((g_target_arch==ARCH_32)?0xffffffff:0xffffffffffffffff) - delta) + 1;
compute_candidates::56::438.3932::                            if (freespace >= g_content_size)
compute_candidates::57::255.4247::                            {
compute_candidates::58::399.9975::                                /* register candidate. */
compute_candidates::59::668.0603::                                addrtree_register_address(p_candidates, (uint64_t)delta);
compute_candidates::60::251.7533::                            }
compute_candidates::61::222.6444::                        }
compute_candidates::62::192.8848::                    }
compute_candidates::63::160.5118::                }
compute_candidates::64::124.9345::            }
compute_candidates::65::342.9607::            /* Does the memory used exceed our limited space ? */
compute_candidates::66::431.2785::            memsize = addrtree_get_memsize(p_candidates);
compute_candidates::67::334.9340::            if (memsize>MAX_MEM_AMOUNT)
compute_candidates::68::129.9461::            {
compute_candidates::69::425.0841::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::70::517.7932::                info("[mem] Memory tree is too big (%d bytes), reducing...\r\n", memsize);
compute_candidates::71::386.0165::                max_votes = addrtree_max_vote(p_candidates);
compute_candidates::72::404.3957::                addrtree_filter(p_candidates, max_votes/2);   
compute_candidates::73::383.7360::                memsize = addrtree_get_memsize(p_candidates);
compute_candidates::74::407.1469::                info("[mem] Memory tree reduced to %d bytes\r\n", memsize);
compute_candidates::75::115.7695::            }
compute_candidates::76::244.5346::            poi = poi->p_next;
compute_candidates::77::135.5474::            i++;
compute_candidates::78::84.0727::        }
compute_candidates::79::159.9019::        progress_bar_done();
compute_candidates::80::247.8679::        /* Loop on candidates, keep the best one. */
compute_candidates::81::186.4807::        g_bm_votes = -1;
compute_candidates::82::196.7611::        g_bm_total_votes = 0;
compute_candidates::83::172.1345::        g_bm_count=0;
compute_candidates::84::354.1133::        addrtree_browse(p_candidates, find_best_match, 0);
compute_candidates::85::373.8572::        logm("[i] Found %d base addresses to test\n", g_bm_count);
compute_candidates::86::98.2313::        /*
compute_candidates::87::255.6565::         * Best match address corresponds to the address for which we identified
compute_candidates::88::299.2051::         * the biggest numbers of alleged pointers. The best match is not always
compute_candidates::89::329.3143::         * the correct base address, so we just display it here and try to assess
compute_candidates::90::254.9821::         * other candidates in case we missed the correct base address.
compute_candidates::91::97.8910::         */
compute_candidates::92::267.6683::        gp_ba_candidates = (base_address_candidate *)malloc(sizeof(base_address_candidate) * g_bm_count);
compute_candidates::93::257.9983::        if (gp_ba_candidates != NULL)
compute_candidates::94::90.8645::        {
compute_candidates::95::359.3020::            max_votes = addrtree_max_vote(p_candidates);
compute_candidates::96::217.5377::            g_bm_kept = 0;
compute_candidates::97::257.0464::            gp_ba_candidates_index = 0;
compute_candidates::98::401.4147::            addrtree_browse(p_candidates, fill_best_matches, 0);
compute_candidates::99::221.5223::            info("tree browsed\n");
compute_candidates::100::266.8933::            if (g_target_arch == ARCH_64)
compute_candidates::101::556.3418::                info("Best match for base address is %016lx (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::102::116.3980::            else
compute_candidates::103::534.6783::                info("Best match for base address is %08x (%d votes)\n", g_bm_address, g_bm_votes);
compute_candidates::104::195.1041::            /* Sort candidates array. */
compute_candidates::105::547.9604::            qsort(gp_ba_candidates, g_bm_count, sizeof(base_address_candidate), candidate_compare_func);
compute_candidates::106::369.3596::            debug("Found %d candidates !\n", gp_ba_candidates_index);
compute_candidates::107::383.9564::            for (i=0; i<gp_ba_candidates_index; i++)
compute_candidates::108::115.8476::            {
compute_candidates::109::837.6441::                debug("Found candidate address %016lx (votes: %d, position: %d)\n", gp_ba_candidates[i].address, gp_ba_candidates[i].votes, i+1);
compute_candidates::110::114.2636::            }
compute_candidates::111::134.9592::            if (!g_deepmode)
compute_candidates::113::534.4821::                for (i=max_votes;i>=0;i--)
compute_candidates::114::177.0377::                {
compute_candidates::115::343.8321::                    g_bm_kept = 0;
compute_candidates::116::521.2549::                    for (j=0;j<g_bm_count;j++)
compute_candidates::117::201.6758::                    {
compute_candidates::118::492.9790::                        if (gp_ba_candidates[j].votes >= i)
compute_candidates::119::242.2797::                        {
compute_candidates::120::377.8985::                            g_bm_kept++;
compute_candidates::121::235.4446::                        }
compute_candidates::122::198.9693::                    }
compute_candidates::123::372.2316::                    if (g_bm_kept>=30)
compute_candidates::124::204.7925::                    {
compute_candidates::125::373.5859::                        max_votes = i+1;
compute_candidates::126::277.6299::                        break;
compute_candidates::127::205.0152::                    }
compute_candidates::128::173.7680::                }
compute_candidates::129::141.7870::            }
compute_candidates::130::143.1487::            else
compute_candidates::131::141.6301::            {
compute_candidates::132::448.6540::                g_bm_kept = gp_ba_candidates_index;
compute_candidates::133::118.4992::                max_votes = 0;
compute_candidates::134::223.3545::            }            
compute_candidates::135::507.0530::            info("Keep %d candidates with max vote=%d\n", g_bm_kept, max_votes);
compute_candidates::136::138.4861::            /*
compute_candidates::137::313.6420::             * Loop on candidate base addresses and check if arrays of values may
compute_candidates::138::325.6885::             * point to known point of interests (text strings or other arrays).
compute_candidates::139::132.8885::             * 
compute_candidates::140::322.8318::             * This method gives good results when at least one array contains a
compute_candidates::141::238.1838::             * list of pointers to text strings.
compute_candidates::142::131.6328::             */
compute_candidates::143::274.5800::            /* Allocate memory for our score table. */
compute_candidates::144::551.5130::            p_scores = (score_entry_t*)malloc(sizeof(score_entry_t) * g_bm_kept);
compute_candidates::145::161.6787::            z=0;
compute_candidates::146::234.2716::            if (p_scores != NULL)
compute_candidates::147::114.8529::            {
compute_candidates::148::502.6000::                memset(p_scores, 0, sizeof(score_entry_t)*g_bm_kept);
compute_candidates::149::383.6968::                /* Compute the number of candidates each thread is going to check. */
compute_candidates::150::345.8688::                z = g_bm_kept / g_nb_threads;
compute_candidates::151::345.2003::                /* Allocate some space to store the threads id. */
compute_candidates::152::544.8922::                p_threads = (pthread_t *)malloc(sizeof(pthread_t) * g_nb_threads);
compute_candidates::153::726.9273::                p_threads_params = (parallel_params_t *)malloc(sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::154::470.2502::                if ((p_threads != NULL) && (p_threads_params != NULL))
compute_candidates::155::147.9779::                {
compute_candidates::156::550.0946::                    memset(p_threads, 0, sizeof(pthread_t) * g_nb_threads);
compute_candidates::157::619.0482::                    memset(p_threads_params, 0, sizeof(parallel_params_t) * g_nb_threads);
compute_candidates::158::298.0390::                    g_bm_processed = 0;
compute_candidates::159::423.7026::                    info("Starting %d threads ...\n", g_nb_threads);
compute_candidates::160::341.1245::                    /* Create `g_nb_threads`. */
compute_candidates::161::437.5537::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::162::184.0810::                    {
compute_candidates::163::483.3433::                        p_threads_params[i].p_scores = p_scores;
compute_candidates::164::548.2199::                        p_threads_params[i].p_poi_list = p_poi_list;
compute_candidates::165::459.6764::                        p_threads_params[i].p_candidates = p_candidates;
compute_candidates::166::538.5135::                        p_threads_params[i].arch = g_target_arch;
compute_candidates::167::543.4697::                        p_threads_params[i].endian = g_target_endian;
compute_candidates::168::461.7510::                        p_threads_params[i].content = gp_content;
compute_candidates::169::549.7848::                        p_threads_params[i].ui_content_size = g_content_size;
compute_candidates::170::476.6974::                        p_threads_params[i].lock = &deep_lock;
compute_candidates::171::463.3126::                        p_threads_params[i].start = i*z;
compute_candidates::172::421.7335::                        p_threads_params[i].count = z;
compute_candidates::173::440.2706::                        if (i == (g_nb_threads - 1))
compute_candidates::174::227.5212::                        {
compute_candidates::175::518.0968::                            if ((i*z + z) < g_bm_kept)
compute_candidates::176::268.6962::                            {
compute_candidates::177::794.8373::                                p_threads_params[i].count = g_bm_kept -   p_threads_params[i].start;
compute_candidates::178::240.2217::                            }
compute_candidates::179::244.0601::                        }
compute_candidates::180::1148.6722::                        info("Thread #%d will cover %d to %d\n", i, p_threads_params[i].start, p_threads_params[i].start+p_threads_params[i].count);
compute_candidates::181::308.0058::                        pthread_create(
compute_candidates::182::379.9752::                            &p_threads[i],
compute_candidates::183::302.5558::                            NULL,
compute_candidates::184::384.3703::                            parallel_refine_candidates,
compute_candidates::185::485.7870::                            (void *)&p_threads_params[i]
compute_candidates::186::232.7768::                        );
compute_candidates::187::188.0028::                    }
compute_candidates::188::390.8441::                    /* Wait for these threads to finish. */
compute_candidates::189::498.0531::                    for (i=0; i<g_nb_threads; i++)
compute_candidates::190::196.9986::                    {
compute_candidates::191::506.4117::                        pthread_join(p_threads[i], NULL);
compute_candidates::192::195.5263::                    }
compute_candidates::193::306.0726::                    progress_bar_done();
compute_candidates::194::171.9416::                    max_address = g_max_address;
compute_candidates::195::369.4427::                    /* Free pthreads. */
compute_candidates::196::329.5096::                    free(p_threads);
compute_candidates::197::348.6776::                    free(p_threads_params);
compute_candidates::198::163.9911::                }
compute_candidates::199::164.9054::                else
compute_candidates::200::163.5907::                {
compute_candidates::201::451.3418::                    error("Cannot allocate memory for multi-threaded search.");
compute_candidates::202::160.3268::                }
compute_candidates::203::499.8896::                info("Best match based on pointers count: %016lx\n", max_address);
compute_candidates::204::391.6694::                /* Check if we have a single candidate with valid array. */
compute_candidates::205::209.1476::                count = 0;
compute_candidates::206::426.6831::                for (i=0; i<g_bm_kept; i++)
compute_candidates::207::158.0412::                {
compute_candidates::208::464.3743::                    if (p_scores[i].has_valid_array > 0)
compute_candidates::209::196.8852::                    {
compute_candidates::210::270.3919::                        count++;
compute_candidates::211::197.0369::                    }
compute_candidates::212::169.2236::                }
compute_candidates::213::272.5481::                if (count == 1)
compute_candidates::214::162.9337::                {
compute_candidates::215::371.5960::                    for (i=0; i<g_bm_kept; i++)
compute_candidates::216::217.9393::                    {
compute_candidates::217::541.0117::                        if (p_scores[i].has_valid_array > 0)
compute_candidates::218::238.4014::                        {
compute_candidates::219::514.5494::                            max_address = p_scores[i].base_address;
compute_candidates::220::290.0705::                            break;
compute_candidates::221::229.1822::                        }
compute_candidates::222::201.1554::                    }
compute_candidates::223::346.1169::                    /* Display 100% matching address. */
compute_candidates::224::375.7148::                    if (g_target_arch == ARCH_64)
compute_candidates::225::666.6891::                        printf("[i] Base address found (valid array): 0x%016lx.\n", max_address);
compute_candidates::226::194.2751::                    else
compute_candidates::227::797.0832::                        printf("[i] Base address found (valid array): 0x%08x.\n", (uint32_t)max_address);
compute_candidates::228::160.6448::                }
compute_candidates::229::167.7816::                else
compute_candidates::230::168.5700::                {
compute_candidates::231::463.1350::                    /* Check if g_bm_address == max_address. */
compute_candidates::232::363.7175::                    if (g_bm_address == max_address)
compute_candidates::233::206.8730::                    {
compute_candidates::234::403.2153::                        /* Display 100% matching address. */
compute_candidates::235::419.7913::                        if (g_target_arch == ARCH_64)
compute_candidates::236::685.4150::                            printf("[i] Base address found: 0x%016lx.\n", g_bm_address);
compute_candidates::237::218.2642::                        else
compute_candidates::238::770.9865::                            printf("[i] Base address found: 0x%08x.\n", (uint32_t)g_bm_address);
compute_candidates::239::186.6045::                    }
compute_candidates::240::406.3215::                    else if (max_address != 0xFFFFFFFFFFFFFFFF)
compute_candidates::241::209.7231::                    {   
compute_candidates::242::403.9929::                        if (g_target_arch == ARCH_64)
compute_candidates::243::730.1940::                            printf("[i] Base address seems to be 0x%016lx (not sure).\n", max_address);
compute_candidates::244::226.4148::                        else
compute_candidates::245::837.6876::                            printf("[i] Base address seems to be 0x%08x (not sure).\n", (uint32_t)max_address);
compute_candidates::246::194.9353::                    }
compute_candidates::247::52.2629::                    else
compute_candidates::248::202.1177::                    {
compute_candidates::249::412.3021::                        if (g_target_arch == ARCH_64)
compute_candidates::250::734.5150::                            printf("[i] Base address seems to be 0x%016lx (not sure).\n", g_bm_address);
compute_candidates::251::218.7441::                        else
compute_candidates::252::796.6873::                            printf("[i] Base address seems to be 0x%08x (not sure).\n", (uint32_t)g_bm_address);
compute_candidates::253::180.5925::                    }
compute_candidates::254::152.3548::                }
compute_candidates::255::250.7069::                /* Sort remaining candidates. */
compute_candidates::256::575.0845::                qsort(p_scores, g_bm_kept, sizeof(score_entry_t), score_compare_func);
compute_candidates::257::493.2864::                /* Tell the user he/she should use the -m/--more to get all the candidates. */
compute_candidates::258::425.0822::                if ((nb_candidates > 0) && (g_bm_kept > 1))
compute_candidates::259::154.4650::                {
compute_candidates::260::455.8667::                    printf(" More base addresses to consider (just in case):\n");
compute_candidates::261::633.1733::                    for (i=0; i<((g_bm_kept>30)?30:g_bm_kept); i++)
compute_candidates::262::160.9353::                    {
compute_candidates::263::756.1221::                        if ((p_scores[i].base_address != max_address) && (p_scores[i].score > 0))
compute_candidates::264::223.0354::                        {
compute_candidates::265::432.8214::                            if (g_target_arch == ARCH_64)
compute_candidates::266::1046.4387::                                printf("  0x%016lx (%f)\n", p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
compute_candidates::267::251.9628::                            else
compute_candidates::268::1116.0314::                                printf("  0x%08x (%.02f)\n", (uint32_t)p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
compute_candidates::269::215.2139::                        }
compute_candidates::270::187.4942::                    }
compute_candidates::271::160.1411::                }
compute_candidates::272::127.1676::            }
compute_candidates::273::132.5635::            else
compute_candidates::274::126.5582::            {
compute_candidates::275::380.3451::                error("Cannot evaluate, low memory !\n");
compute_candidates::276::126.3684::            }
compute_candidates::277::234.6037::            /* Free scores. */
compute_candidates::278::239.4672::            free(p_scores);
compute_candidates::279::92.3881::        }
compute_candidates::280::59.9701::    }
compute_candidates::281::40.2582::    else
compute_candidates::282::255.9803::        error("No point of interests found, cannot deduce loading address.");
compute_candidates::283::10.2218::}
Msg::1::78.7717::void  Msg() {
Msg::2::408.1648::	MessageBoxA(NULL, "嘿嘿！", "堆栈溢出测试", 0);
Msg::3::10.4084::}
Add::1::139.8650::int  Add(int a, int b) {
Add::2::95.6055::	int* p = &a;
Add::3::150.6759::	*(p-1) = (int)Msg;
Add::4::69.2367::	return a + b;
Add::5::10.2770::}
main::1::54.6297::void main() {
main::2::138.8641::	printf("%d", Add(1, 2));
main::3::59.6045::	system("pause");
main::4::35.3849::	return;
main::5::10.1404::}
derive_spatial_luma_vector_prediction::1::230.1341::// 8.5.3.1.6
derive_spatial_luma_vector_prediction::2::431.3482::void derive_spatial_luma_vector_prediction(base_context* ctx,
derive_spatial_luma_vector_prediction::3::493.5695::                                           de265_image* img,
derive_spatial_luma_vector_prediction::4::531.9108::                                           const slice_segment_header* shdr,
derive_spatial_luma_vector_prediction::5::689.5804::                                           int xC,int yC,int nCS,int xP,int yP,
derive_spatial_luma_vector_prediction::6::594.9593::                                           int nPbW,int nPbH, int X,
derive_spatial_luma_vector_prediction::7::537.1721::                                           int refIdxLX, int partIdx,
derive_spatial_luma_vector_prediction::8::595.5970::                                           uint8_t out_availableFlagLXN[2],
derive_spatial_luma_vector_prediction::9::544.6716::                                           MotionVector out_mvLXN[2])
derive_spatial_luma_vector_prediction::10::39.6299::{
derive_spatial_luma_vector_prediction::11::301.2087::  if (refIdxLX >= MAX_NUM_REF_PICS) {
derive_spatial_luma_vector_prediction::12::532.1599::    ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::13::340.5375::    img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::14::92.1616::    out_availableFlagLXN[0] = false;
derive_spatial_luma_vector_prediction::15::202.5281::    out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::16::221.1711::    out_mvLXN[0] = MotionVector{};
derive_spatial_luma_vector_prediction::17::217.5882::    out_mvLXN[1] = MotionVector{};
derive_spatial_luma_vector_prediction::18::64.8187::    return;
derive_spatial_luma_vector_prediction::19::34.8934::  }
derive_spatial_luma_vector_prediction::20::144.6198::  int isScaledFlagLX = 0;
derive_spatial_luma_vector_prediction::21::97.8417::  const int A=0;
derive_spatial_luma_vector_prediction::22::97.2986::  const int B=1;
derive_spatial_luma_vector_prediction::23::169.4641::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::24::170.4811::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::25::74.3089::  // --- A ---
derive_spatial_luma_vector_prediction::26::61.9744::  // 1.
derive_spatial_luma_vector_prediction::27::155.8167::  int xA[2], yA[2];
derive_spatial_luma_vector_prediction::28::148.9188::  xA[0] = xP-1;
derive_spatial_luma_vector_prediction::29::176.0562::  yA[0] = yP + nPbH;
derive_spatial_luma_vector_prediction::30::153.7812::  xA[1] = xA[0];
derive_spatial_luma_vector_prediction::31::177.5799::  yA[1] = yA[0]-1;
derive_spatial_luma_vector_prediction::32::59.3073::  // 2.
derive_spatial_luma_vector_prediction::33::168.2144::  out_availableFlagLXN[A] = 0;
derive_spatial_luma_vector_prediction::34::180.2883::  out_mvLXN[A].x = 0;
derive_spatial_luma_vector_prediction::35::185.5391::  out_mvLXN[A].y = 0;
derive_spatial_luma_vector_prediction::36::97.2497::  // 3. / 4.
derive_spatial_luma_vector_prediction::37::99.0050::  bool availableA[2];
derive_spatial_luma_vector_prediction::38::644.4591::  availableA[0] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[0],yA[0]);
derive_spatial_luma_vector_prediction::39::655.7600::  availableA[1] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[1],yA[1]);
derive_spatial_luma_vector_prediction::40::62.7414::  // 5.
derive_spatial_luma_vector_prediction::41::199.4772::  if (availableA[0] || availableA[1]) {
derive_spatial_luma_vector_prediction::42::142.9057::    isScaledFlagLX = 1;
derive_spatial_luma_vector_prediction::43::35.8248::  }
derive_spatial_luma_vector_prediction::44::187.6632::  // 6.  test A0 and A1  (Ak)
derive_spatial_luma_vector_prediction::45::122.8423::  int refIdxA=-1;
derive_spatial_luma_vector_prediction::46::165.8008::  // the POC we want to reference in this PB
derive_spatial_luma_vector_prediction::47::414.5409::  const de265_image* tmpimg = ctx->get_image(shdr->RefPicList[X][ refIdxLX ]);
derive_spatial_luma_vector_prediction::48::170.4601::  if (tmpimg==NULL) { return; }
derive_spatial_luma_vector_prediction::49::44.9284::  const int referenced_POC = tmpimg->PicOrderCntVal;
derive_spatial_luma_vector_prediction::51::151.1843::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::52::377.4350::        out_availableFlagLXN[A]==0 && // no A?-predictor so far
derive_spatial_luma_vector_prediction::53::407.4319::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::54::142.5447::      int Y=1-X;
derive_spatial_luma_vector_prediction::55::381.2228::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::56::260.0481::      logtrace(LogMotion,"MVP A%d=\n",k);
derive_spatial_luma_vector_prediction::57::141.3833::      logmvcand(vi);
derive_spatial_luma_vector_prediction::58::191.9453::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::59::524.1889::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::60::196.6299::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::61::539.1241::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::62::234.8116::      // check whether the predictor X is available and references the same POC
derive_spatial_luma_vector_prediction::63::399.5859::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::64::420.3488::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::65::219.7479::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::66::288.7475::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::67::234.2914::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::68::64.9098::      }
derive_spatial_luma_vector_prediction::69::285.0236::      // check whether the other predictor (Y) is available and references the same POC
derive_spatial_luma_vector_prediction::70::423.2102::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::71::458.6632::        logtrace(LogMotion,"take A%d/L%d as A candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::72::226.0326::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::73::290.3179::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::74::228.4218::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::75::62.9539::      }
derive_spatial_luma_vector_prediction::76::47.7499::    }
derive_spatial_luma_vector_prediction::77::36.2193::  }
derive_spatial_luma_vector_prediction::78::301.8848::  // 7. If there is no predictor referencing the same POC, we take any other reference as
derive_spatial_luma_vector_prediction::79::289.9316::  //    long as it is the same type of reference (long-term / short-term)
derive_spatial_luma_vector_prediction::80::364.8517::  for (int k=0 ; k<=1 && out_availableFlagLXN[A]==0 ; k++) {
derive_spatial_luma_vector_prediction::81::128.0671::    int refPicList=-1;
derive_spatial_luma_vector_prediction::82::136.2762::    if (availableA[k] &&
derive_spatial_luma_vector_prediction::83::318.8507::        // TODO: we could remove this call by storing the result of the similar computation above
derive_spatial_luma_vector_prediction::84::399.5252::        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {
derive_spatial_luma_vector_prediction::85::141.6382::      int Y=1-X;
derive_spatial_luma_vector_prediction::86::381.9064::      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
derive_spatial_luma_vector_prediction::87::210.3310::      if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::88::556.2764::          shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::89::446.8063::        logtrace(LogMotion,"take A%D/L%d as A candidate with different POCs\n",k,X);
derive_spatial_luma_vector_prediction::90::231.6211::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::91::297.6886::        out_mvLXN[A] = vi.mv[X];
derive_spatial_luma_vector_prediction::92::245.1558::        refIdxA = vi.refIdx[X];
derive_spatial_luma_vector_prediction::93::154.9092::        refPicList = X;
derive_spatial_luma_vector_prediction::94::33.4300::      }
derive_spatial_luma_vector_prediction::96::655.3190::               shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::97::457.5874::        logtrace(LogMotion,"take A%d/L%d as A candidate with different POCs\n",k,Y);
derive_spatial_luma_vector_prediction::98::221.5365::        out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::99::296.0308::        out_mvLXN[A] = vi.mv[Y];
derive_spatial_luma_vector_prediction::100::236.2637::        refIdxA = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::101::146.7216::        refPicList = Y;
derive_spatial_luma_vector_prediction::102::64.7599::      }
derive_spatial_luma_vector_prediction::103::53.9657::    }
derive_spatial_luma_vector_prediction::104::233.7932::    if (out_availableFlagLXN[A]==1) {
derive_spatial_luma_vector_prediction::105::177.0657::      if (refIdxA<0) {
derive_spatial_luma_vector_prediction::106::357.4395::        out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::107::129.5664::        return; // error
derive_spatial_luma_vector_prediction::108::66.2000::      }
derive_spatial_luma_vector_prediction::109::183.7471::      assert(refIdxA>=0);
derive_spatial_luma_vector_prediction::110::177.7560::      assert(refPicList>=0);
derive_spatial_luma_vector_prediction::111::491.3536::      const de265_image* refPicA = ctx->get_image(shdr->RefPicList[refPicList][refIdxA ]);
derive_spatial_luma_vector_prediction::112::546.7984::      const de265_image* refPicX = ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::113::389.2231::      //int picStateA = shdr->RefPicList_PicState[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::114::440.0976::      //int picStateX = shdr->RefPicList_PicState[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::115::367.5873::      int isLongTermA = shdr->LongTermRefPic[refPicList][refIdxA ];
derive_spatial_luma_vector_prediction::116::291.0103::      int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];
derive_spatial_luma_vector_prediction::117::445.6613::      logtrace(LogMotion,"scale MVP A: A-POC:%d X-POC:%d\n",
derive_spatial_luma_vector_prediction::118::393.4401::               refPicA->PicOrderCntVal,refPicX->PicOrderCntVal);
derive_spatial_luma_vector_prediction::119::228.9388::      if (!isLongTermA && !isLongTermX)
derive_spatial_luma_vector_prediction::120::75.9930::      /*
derive_spatial_luma_vector_prediction::121::213.8279::      if (picStateA == UsedForShortTermReference &&
derive_spatial_luma_vector_prediction::122::220.4923::          picStateX == UsedForShortTermReference)
derive_spatial_luma_vector_prediction::123::69.7650::      */
derive_spatial_luma_vector_prediction::124::79.2694::        {
derive_spatial_luma_vector_prediction::125::361.6357::          int distA = img->PicOrderCntVal - refPicA->PicOrderCntVal;
derive_spatial_luma_vector_prediction::126::302.6607::          int distX = img->PicOrderCntVal - referenced_POC;
derive_spatial_luma_vector_prediction::127::510.5249::          if (!scale_mv(&out_mvLXN[A], out_mvLXN[A], distA, distX)) {
derive_spatial_luma_vector_prediction::128::481.5593::            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
derive_spatial_luma_vector_prediction::129::323.1897::            img->integrity = INTEGRITY_DECODING_ERRORS;
derive_spatial_luma_vector_prediction::130::92.3894::          }
derive_spatial_luma_vector_prediction::131::76.7261::        }
derive_spatial_luma_vector_prediction::132::48.9404::    }
derive_spatial_luma_vector_prediction::133::35.0834::  }
derive_spatial_luma_vector_prediction::134::77.2022::  // --- B ---
derive_spatial_luma_vector_prediction::135::68.7442::  // 1.
derive_spatial_luma_vector_prediction::136::173.7636::  int xB[3], yB[3];
derive_spatial_luma_vector_prediction::137::195.0061::  xB[0] = xP+nPbW;
derive_spatial_luma_vector_prediction::138::166.3580::  yB[0] = yP-1;
derive_spatial_luma_vector_prediction::139::192.5570::  xB[1] = xB[0]-1;
derive_spatial_luma_vector_prediction::140::168.0833::  yB[1] = yP-1;
derive_spatial_luma_vector_prediction::141::166.3864::  xB[2] = xP-1;
derive_spatial_luma_vector_prediction::142::165.2324::  yB[2] = yP-1;
derive_spatial_luma_vector_prediction::143::69.1027::  // 2.
derive_spatial_luma_vector_prediction::144::187.7793::  out_availableFlagLXN[B] = 0;
derive_spatial_luma_vector_prediction::145::201.7265::  out_mvLXN[B].x = 0;
derive_spatial_luma_vector_prediction::146::201.5637::  out_mvLXN[B].y = 0;
derive_spatial_luma_vector_prediction::147::6.1714::  // 3. test B0,B1,B2 (Bk)
derive_spatial_luma_vector_prediction::149::112.2920::  bool availableB[3];
derive_spatial_luma_vector_prediction::150::223.0104::  for (int k=0;k<3;k++) {
derive_spatial_luma_vector_prediction::151::713.1144::    availableB[k] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xB[k],yB[k]);
derive_spatial_luma_vector_prediction::152::294.9926::    if (availableB[k] && out_availableFlagLXN[B]==0) {
derive_spatial_luma_vector_prediction::153::139.9250::      int Y=1-X;
derive_spatial_luma_vector_prediction::154::376.8656::      const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::155::255.0467::      logtrace(LogMotion,"MVP B%d=\n",k);
derive_spatial_luma_vector_prediction::156::145.4369::      logmvcand(vi);
derive_spatial_luma_vector_prediction::157::191.1090::      const de265_image* imgX = NULL;
derive_spatial_luma_vector_prediction::158::527.7561::      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
derive_spatial_luma_vector_prediction::159::194.9249::      const de265_image* imgY = NULL;
derive_spatial_luma_vector_prediction::160::531.0328::      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);
derive_spatial_luma_vector_prediction::161::400.5255::      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::162::444.2259::        logtrace(LogMotion,"a) take B%d/L%d as B candidate with same POC\n",k,X);
derive_spatial_luma_vector_prediction::163::215.9078::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::164::290.8272::        out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::165::235.7608::        refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::166::65.2578::      }
derive_spatial_luma_vector_prediction::167::438.9611::      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
derive_spatial_luma_vector_prediction::168::191.7245::        logtrace(LogMotion,"b) take B%d/L%d as B candidate with same POC\n",k,Y);
derive_spatial_luma_vector_prediction::169::238.9262::        out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::170::304.3784::        out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::171::237.0869::        refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::172::64.1824::      }
derive_spatial_luma_vector_prediction::173::49.5846::    }
derive_spatial_luma_vector_prediction::174::36.1761::  }
derive_spatial_luma_vector_prediction::175::70.1425::  // 4.
derive_spatial_luma_vector_prediction::176::270.6449::  if (isScaledFlagLX==0 &&      // no A predictor,
derive_spatial_luma_vector_prediction::177::280.2277::      out_availableFlagLXN[B])  // but an unscaled B predictor
derive_spatial_luma_vector_prediction::178::49.4289::    {
derive_spatial_luma_vector_prediction::179::174.5943::      // use unscaled B predictor as A predictor
derive_spatial_luma_vector_prediction::180::319.5601::      logtrace(LogMotion,"copy the same-POC B candidate as additional A candidate\n");
derive_spatial_luma_vector_prediction::181::201.9365::      out_availableFlagLXN[A]=1;
derive_spatial_luma_vector_prediction::182::290.1046::      out_mvLXN[A] = out_mvLXN[B];
derive_spatial_luma_vector_prediction::183::169.0408::      refIdxA = refIdxB;
derive_spatial_luma_vector_prediction::184::48.8800::    }
derive_spatial_luma_vector_prediction::185::66.4957::  // 5.
derive_spatial_luma_vector_prediction::186::284.7872::  // If no A predictor, we output the unscaled B as the A predictor (above)
derive_spatial_luma_vector_prediction::187::162.5421::  // and also add a scaled B predictor here.
derive_spatial_luma_vector_prediction::188::308.5720::  // If there is (probably) an A predictor, no differing-POC B predictor is generated.
derive_spatial_luma_vector_prediction::189::168.0505::  if (isScaledFlagLX==0) {
derive_spatial_luma_vector_prediction::190::182.9907::    out_availableFlagLXN[B]=0;
derive_spatial_luma_vector_prediction::191::384.1252::    for (int k=0 ; k<=2 && out_availableFlagLXN[B]==0 ; k++) {
derive_spatial_luma_vector_prediction::192::147.5238::      int refPicList=-1;
derive_spatial_luma_vector_prediction::193::160.9897::      if (availableB[k]) {
derive_spatial_luma_vector_prediction::194::161.2850::        int Y=1-X;
derive_spatial_luma_vector_prediction::195::416.3957::        const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
derive_spatial_luma_vector_prediction::196::231.5140::        if (vi.predFlag[X]==1 &&
derive_spatial_luma_vector_prediction::197::509.9434::            shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
derive_spatial_luma_vector_prediction::199::350.5247::          out_mvLXN[B] = vi.mv[X];
derive_spatial_luma_vector_prediction::200::278.2262::          refIdxB = vi.refIdx[X];
derive_spatial_luma_vector_prediction::201::180.2832::          refPicList = X;
derive_spatial_luma_vector_prediction::202::84.7644::        }
derive_spatial_luma_vector_prediction::203::267.2037::        else if (vi.predFlag[Y]==1 &&
derive_spatial_luma_vector_prediction::204::639.2736::                 shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
derive_spatial_luma_vector_prediction::205::238.0892::          out_availableFlagLXN[B]=1;
derive_spatial_luma_vector_prediction::206::320.1728::          out_mvLXN[B] = vi.mv[Y];
derive_spatial_luma_vector_prediction::207::261.3892::          refIdxB = vi.refIdx[Y];
derive_spatial_luma_vector_prediction::208::170.6381::          refPicList = Y;
derive_spatial_luma_vector_prediction::209::83.1768::        }
derive_spatial_luma_vector_prediction::210::69.7717::      }
derive_spatial_luma_vector_prediction::211::259.3270::      if (out_availableFlagLXN[B]==1) {
derive_spatial_luma_vector_prediction::212::195.3437::        if (refIdxB<0) {
derive_spatial_luma_vector_prediction::213::384.1280::          out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
derive_spatial_luma_vector_prediction::214::151.5025::          return; // error
derive_spatial_luma_vector_prediction::215::82.3149::        }
derive_spatial_luma_vector_prediction::216::202.8691::        assert(refPicList>=0);
derive_spatial_luma_vector_prediction::217::209.8304::        assert(refIdxB>=0);
derive_spatial_luma_vector_prediction::218::543.4222::        const de265_image* refPicB=ctx->get_image(shdr->RefPicList[refPicList][refIdxB ]);
derive_spatial_luma_vector_prediction::219::582.1950::        const de265_image* refPicX=ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);
derive_spatial_luma_vector_prediction::220::381.2166::        int isLongTermB = shdr->LongTermRefPic[refPicList][refIdxB ];
