"void  Msg() {
	MessageBoxA(NULL, ""嘿嘿！"", ""堆栈溢出测试"", 0);
}"
"int  Add(int a, int b) {
	int* p = &a;
	*(p-1) = (int)Msg;
	return a + b;
}"
"void main() {
	printf(""%d"", Add(1, 2));
	system(""pause"");
	return;
}"
"// 8.5.3.1.6
void derive_spatial_luma_vector_prediction(base_context* ctx,
                                           de265_image* img,
                                           const slice_segment_header* shdr,
                                           int xC,int yC,int nCS,int xP,int yP,
                                           int nPbW,int nPbH, int X,
                                           int refIdxLX, int partIdx,
                                           uint8_t out_availableFlagLXN[2],
                                           MotionVector out_mvLXN[2])
{
  if (refIdxLX >= MAX_NUM_REF_PICS) {
    ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
    img->integrity = INTEGRITY_DECODING_ERRORS;

    out_availableFlagLXN[0] = false;
    out_availableFlagLXN[1] = false;
    out_mvLXN[0] = MotionVector{};
    out_mvLXN[1] = MotionVector{};
    return;
  }

  int isScaledFlagLX = 0;

  const int A=0;
  const int B=1;

  out_availableFlagLXN[A] = 0;
  out_availableFlagLXN[B] = 0;


  // --- A ---

  // 1.

  int xA[2], yA[2];
  xA[0] = xP-1;
  yA[0] = yP + nPbH;
  xA[1] = xA[0];
  yA[1] = yA[0]-1;

  // 2.

  out_availableFlagLXN[A] = 0;
  out_mvLXN[A].x = 0;
  out_mvLXN[A].y = 0;

  // 3. / 4.

  bool availableA[2];
  availableA[0] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[0],yA[0]);
  availableA[1] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xA[1],yA[1]);

  // 5.

  if (availableA[0] || availableA[1]) {
    isScaledFlagLX = 1;
  }

  // 6.  test A0 and A1  (Ak)

  int refIdxA=-1;

  // the POC we want to reference in this PB
  const de265_image* tmpimg = ctx->get_image(shdr->RefPicList[X][ refIdxLX ]);
  if (tmpimg==NULL) { return; }
  const int referenced_POC = tmpimg->PicOrderCntVal;

  for (int k=0;k<=1;k++) {

    if (availableA[k] &&
        out_availableFlagLXN[A]==0 && // no A?-predictor so far
        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {

      int Y=1-X;

      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
      logtrace(LogMotion,""MVP A%d=\n"",k);
      logmvcand(vi);

      const de265_image* imgX = NULL;
      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
      const de265_image* imgY = NULL;
      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);

      // check whether the predictor X is available and references the same POC
      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {

        logtrace(LogMotion,""take A%d/L%d as A candidate with same POC\n"",k,X);

        out_availableFlagLXN[A]=1;
        out_mvLXN[A] = vi.mv[X];
        refIdxA = vi.refIdx[X];
      }
      // check whether the other predictor (Y) is available and references the same POC
      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {

        logtrace(LogMotion,""take A%d/L%d as A candidate with same POC\n"",k,Y);

        out_availableFlagLXN[A]=1;
        out_mvLXN[A] = vi.mv[Y];
        refIdxA = vi.refIdx[Y];
      }
    }
  }

  // 7. If there is no predictor referencing the same POC, we take any other reference as
  //    long as it is the same type of reference (long-term / short-term)

  for (int k=0 ; k<=1 && out_availableFlagLXN[A]==0 ; k++) {
    int refPicList=-1;

    if (availableA[k] &&
        // TODO: we could remove this call by storing the result of the similar computation above
        img->get_pred_mode(xA[k],yA[k]) != MODE_INTRA) {

      int Y=1-X;

      const PBMotion& vi = img->get_mv_info(xA[k],yA[k]);
      if (vi.predFlag[X]==1 &&
          shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {

        logtrace(LogMotion,""take A%D/L%d as A candidate with different POCs\n"",k,X);

        out_availableFlagLXN[A]=1;
        out_mvLXN[A] = vi.mv[X];
        refIdxA = vi.refIdx[X];
        refPicList = X;
      }
      else if (vi.predFlag[Y]==1 &&
               shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {

        logtrace(LogMotion,""take A%d/L%d as A candidate with different POCs\n"",k,Y);

        out_availableFlagLXN[A]=1;
        out_mvLXN[A] = vi.mv[Y];
        refIdxA = vi.refIdx[Y];
        refPicList = Y;
      }
    }

    if (out_availableFlagLXN[A]==1) {
      if (refIdxA<0) {
        out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
        return; // error
      }

      assert(refIdxA>=0);
      assert(refPicList>=0);

      const de265_image* refPicA = ctx->get_image(shdr->RefPicList[refPicList][refIdxA ]);
      const de265_image* refPicX = ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);

      //int picStateA = shdr->RefPicList_PicState[refPicList][refIdxA ];
      //int picStateX = shdr->RefPicList_PicState[X         ][refIdxLX];

      int isLongTermA = shdr->LongTermRefPic[refPicList][refIdxA ];
      int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];

      logtrace(LogMotion,""scale MVP A: A-POC:%d X-POC:%d\n"",
               refPicA->PicOrderCntVal,refPicX->PicOrderCntVal);

      if (!isLongTermA && !isLongTermX)
      /*
      if (picStateA == UsedForShortTermReference &&
          picStateX == UsedForShortTermReference)
      */
        {
          int distA = img->PicOrderCntVal - refPicA->PicOrderCntVal;
          int distX = img->PicOrderCntVal - referenced_POC;

          if (!scale_mv(&out_mvLXN[A], out_mvLXN[A], distA, distX)) {
            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
            img->integrity = INTEGRITY_DECODING_ERRORS;
          }
        }
    }
  }

  // --- B ---

  // 1.

  int xB[3], yB[3];
  xB[0] = xP+nPbW;
  yB[0] = yP-1;
  xB[1] = xB[0]-1;
  yB[1] = yP-1;
  xB[2] = xP-1;
  yB[2] = yP-1;

  // 2.

  out_availableFlagLXN[B] = 0;
  out_mvLXN[B].x = 0;
  out_mvLXN[B].y = 0;

  // 3. test B0,B1,B2 (Bk)

  int refIdxB=-1;

  bool availableB[3];
  for (int k=0;k<3;k++) {
    availableB[k] = img->available_pred_blk(xC,yC, nCS, xP,yP, nPbW,nPbH,partIdx, xB[k],yB[k]);

    if (availableB[k] && out_availableFlagLXN[B]==0) {

      int Y=1-X;

      const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);
      logtrace(LogMotion,""MVP B%d=\n"",k);
      logmvcand(vi);

      const de265_image* imgX = NULL;
      if (vi.predFlag[X]) imgX = ctx->get_image(shdr->RefPicList[X][ vi.refIdx[X] ]);
      const de265_image* imgY = NULL;
      if (vi.predFlag[Y]) imgY = ctx->get_image(shdr->RefPicList[Y][ vi.refIdx[Y] ]);

      if (vi.predFlag[X] && imgX && imgX->PicOrderCntVal == referenced_POC) {
        logtrace(LogMotion,""a) take B%d/L%d as B candidate with same POC\n"",k,X);

        out_availableFlagLXN[B]=1;
        out_mvLXN[B] = vi.mv[X];
        refIdxB = vi.refIdx[X];
      }
      else if (vi.predFlag[Y] && imgY && imgY->PicOrderCntVal == referenced_POC) {
        logtrace(LogMotion,""b) take B%d/L%d as B candidate with same POC\n"",k,Y);

        out_availableFlagLXN[B]=1;
        out_mvLXN[B] = vi.mv[Y];
        refIdxB = vi.refIdx[Y];
      }
    }
  }

  // 4.

  if (isScaledFlagLX==0 &&      // no A predictor,
      out_availableFlagLXN[B])  // but an unscaled B predictor
    {
      // use unscaled B predictor as A predictor

      logtrace(LogMotion,""copy the same-POC B candidate as additional A candidate\n"");

      out_availableFlagLXN[A]=1;
      out_mvLXN[A] = out_mvLXN[B];
      refIdxA = refIdxB;
    }

  // 5.

  // If no A predictor, we output the unscaled B as the A predictor (above)
  // and also add a scaled B predictor here.
  // If there is (probably) an A predictor, no differing-POC B predictor is generated.
  if (isScaledFlagLX==0) {
    out_availableFlagLXN[B]=0;

    for (int k=0 ; k<=2 && out_availableFlagLXN[B]==0 ; k++) {
      int refPicList=-1;

      if (availableB[k]) {
        int Y=1-X;

        const PBMotion& vi = img->get_mv_info(xB[k],yB[k]);

        if (vi.predFlag[X]==1 &&
            shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[X][ vi.refIdx[X] ]) {
          out_availableFlagLXN[B]=1;
          out_mvLXN[B] = vi.mv[X];
          refIdxB = vi.refIdx[X];
          refPicList = X;
        }
        else if (vi.predFlag[Y]==1 &&
                 shdr->LongTermRefPic[X][refIdxLX] == shdr->LongTermRefPic[Y][ vi.refIdx[Y] ]) {
          out_availableFlagLXN[B]=1;
          out_mvLXN[B] = vi.mv[Y];
          refIdxB = vi.refIdx[Y];
          refPicList = Y;
        }
      }

      if (out_availableFlagLXN[B]==1) {
        if (refIdxB<0) {
          out_availableFlagLXN[0] = out_availableFlagLXN[1] = false;
          return; // error
        }

        assert(refPicList>=0);
        assert(refIdxB>=0);

        const de265_image* refPicB=ctx->get_image(shdr->RefPicList[refPicList][refIdxB ]);
        const de265_image* refPicX=ctx->get_image(shdr->RefPicList[X         ][refIdxLX]);

        int isLongTermB = shdr->LongTermRefPic[refPicList][refIdxB ];
        int isLongTermX = shdr->LongTermRefPic[X         ][refIdxLX];

        if (refPicB==NULL || refPicX==NULL) {
          img->decctx->add_warning(DE265_WARNING_NONEXISTING_REFERENCE_PICTURE_ACCESSED,false);
          img->integrity = INTEGRITY_DECODING_ERRORS;
        }
        else if (refPicB->PicOrderCntVal != refPicX->PicOrderCntVal &&
                 !isLongTermB && !isLongTermX) {
          int distB = img->PicOrderCntVal - refPicB->PicOrderCntVal;
          int distX = img->PicOrderCntVal - referenced_POC;

          logtrace(LogMotion,""scale MVP B: B-POC:%d X-POC:%d\n"",refPicB->PicOrderCntVal,refPicX->PicOrderCntVal);

          if (!scale_mv(&out_mvLXN[B], out_mvLXN[B], distB, distX)) {
            ctx->add_warning(DE265_WARNING_INCORRECT_MOTION_VECTOR_SCALING, false);
            img->integrity = INTEGRITY_DECODING_ERRORS;
          }
        }
      }
    }
  }
}"
"void *gmalloc(int size) GMEM_EXCEP {
#ifdef DEBUG_MEM
  int size1;
  char *mem;
  GMemHdr *hdr;
  void *data;
  unsigned long *trl, *p;

  if (size < 0) {
    gMemError(""Invalid memory allocation size"");
  }
  if (size == 0) {
    return NULL;
  }
  size1 = gMemDataSize(size);
  if (!(mem = (char *)malloc(size1 + gMemHdrSize + gMemTrlSize))) {
    gMemError(""Out of memory"");
  }
  hdr = (GMemHdr *)mem;
  data = (void *)(mem + gMemHdrSize);
  trl = (unsigned long *)(mem + gMemHdrSize + size1);
  hdr->magic = gMemMagic;
  hdr->size = size;
  hdr->index = gMemIndex++;
  if (gMemTail) {
    gMemTail->next = hdr;
    hdr->prev = gMemTail;
    gMemTail = hdr;
  } else {
    hdr->prev = NULL;
    gMemHead = gMemTail = hdr;
  }
  hdr->next = NULL;
  ++gMemAlloc;
  gMemInUse += size;
  if (gMemInUse > gMaxMemInUse) {
    gMaxMemInUse = gMemInUse;
  }
  for (p = (unsigned long *)data; p <= trl; ++p) {
    *p = gMemDeadVal;
  }
  return data;
#else
  void *p;

  if (size < 0) {
    gMemError(""Invalid memory allocation size"");
  }
  if (size == 0) {
    return NULL;
  }
  if (!(p = malloc(size))) {
    gMemError(""Out of memory"");
  }
  return p;
#endif
}"
"void compute_candidates(
    poi_t *p_poi_list,
    addrtree_node_t *p_candidates
)
{
    poi_t *poi;
    unsigned int cursor;
    uint64_t delta;
    uint64_t v;
    uint64_t freespace;
    int count;
    uint64_t max_address = 0xFFFFFFFFFFFFFFFF;
    int i,j,z;
    int nb_candidates = 0;
    unsigned int memsize;
    score_entry_t *p_scores;
    pthread_t *p_threads = NULL;
    parallel_params_t *p_threads_params = NULL;
    int b_has_str = 0;

    poi = p_poi_list->p_next;
    while (poi != NULL)
    {
        if ((poi->type == POI_STRING) && !b_has_str)
        {
            b_has_str = 1;
        }

        poi = poi->p_next;
        nb_candidates++;
    }

    i = 0;
    poi = p_poi_list->p_next;
    if (poi != NULL)
    {
        while ((poi != NULL))
        {
            progress_bar(i, nb_candidates, ""Analyzing ..."");
            for (cursor=0; cursor<g_content_size; cursor+=((g_target_arch==ARCH_32)?4:8))
            {
                v = read_pointer(g_target_arch, g_target_endian, gp_content, cursor);

                /* Candidate pointer must not be made of ASCII. */
                /* Add heuristic because pointer should be aligned on 4bytes/8bytes 
                 * if v % get_arch_pointer_size(arch) != 0 --> not aligned 
                 * */
                if ((v & g_mem_alignment_mask) == (poi->offset & g_mem_alignment_mask) && 
                    !is_ascii_ptr(v, g_target_arch) && 
                    is_ptr_aligned(v,g_target_arch))
                {
                    /* If PoI is a string, we expect a pointer on its first character. */
                    if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || ((b_has_str == 0) && (poi->type == POI_FUNCTION)) )
                    //if ( ((b_has_str == 1) && (poi->type == POI_STRING)) || (poi->type == POI_FUNCTION) )
                    {
                        if (v>=poi->offset)
                        {
                            delta = (v - poi->offset);

                            freespace = ( ((g_target_arch==ARCH_32)?0xffffffff:0xffffffffffffffff) - delta) + 1;
                            if (freespace >= g_content_size)
                            {
                                /* register candidate. */
                                addrtree_register_address(p_candidates, (uint64_t)delta);
                            }
                        }
                    }
                }
            }

            /* Does the memory used exceed our limited space ? */
            memsize = addrtree_get_memsize(p_candidates);
            if (memsize>MAX_MEM_AMOUNT)
            {
                memsize = addrtree_get_memsize(p_candidates);
                info(""[mem] Memory tree is too big (%d bytes), reducing...\r\n"", memsize);
                max_votes = addrtree_max_vote(p_candidates);
                addrtree_filter(p_candidates, max_votes/2);   
                memsize = addrtree_get_memsize(p_candidates);
                info(""[mem] Memory tree reduced to %d bytes\r\n"", memsize);
            }

            poi = poi->p_next;
            i++;
        }
        progress_bar_done();

        /* Loop on candidates, keep the best one. */
        g_bm_votes = -1;
        g_bm_total_votes = 0;
        g_bm_count=0;
        addrtree_browse(p_candidates, find_best_match, 0);

        logm(""[i] Found %d base addresses to test\n"", g_bm_count);

        /*
         * Best match address corresponds to the address for which we identified
         * the biggest numbers of alleged pointers. The best match is not always
         * the correct base address, so we just display it here and try to assess
         * other candidates in case we missed the correct base address.
         */
        
        gp_ba_candidates = (base_address_candidate *)malloc(sizeof(base_address_candidate) * g_bm_count);
        if (gp_ba_candidates != NULL)
        {
            max_votes = addrtree_max_vote(p_candidates);
            g_bm_kept = 0;
            gp_ba_candidates_index = 0;
            addrtree_browse(p_candidates, fill_best_matches, 0);
            info(""tree browsed\n"");

            if (g_target_arch == ARCH_64)
                info(""Best match for base address is %016lx (%d votes)\n"", g_bm_address, g_bm_votes);
            else
                info(""Best match for base address is %08x (%d votes)\n"", g_bm_address, g_bm_votes);

            /* Sort candidates array. */
            qsort(gp_ba_candidates, g_bm_count, sizeof(base_address_candidate), candidate_compare_func);

            debug(""Found %d candidates !\n"", gp_ba_candidates_index);
            for (i=0; i<gp_ba_candidates_index; i++)
            {
                debug(""Found candidate address %016lx (votes: %d, position: %d)\n"", gp_ba_candidates[i].address, gp_ba_candidates[i].votes, i+1);
            }

            if (!g_deepmode)
            {
                for (i=max_votes;i>=0;i--)
                {
                    g_bm_kept = 0;
                    for (j=0;j<g_bm_count;j++)
                    {
                        if (gp_ba_candidates[j].votes >= i)
                        {
                            g_bm_kept++;
                        }
                    }
                    if (g_bm_kept>=30)
                    {
                        max_votes = i+1;
                        break;
                    }
                }
            }
            else
            {
                g_bm_kept = gp_ba_candidates_index;
                max_votes = 0;
            }            
            info(""Keep %d candidates with max vote=%d\n"", g_bm_kept, max_votes);

            /*
             * Loop on candidate base addresses and check if arrays of values may
             * point to known point of interests (text strings or other arrays).
             * 
             * This method gives good results when at least one array contains a
             * list of pointers to text strings.
             */

            /* Allocate memory for our score table. */
            p_scores = (score_entry_t*)malloc(sizeof(score_entry_t) * g_bm_kept);
            

            z=0;
            if (p_scores != NULL)
            {
                memset(p_scores, 0, sizeof(score_entry_t)*g_bm_kept);

                /* Compute the number of candidates each thread is going to check. */
                z = g_bm_kept / g_nb_threads;

                /* Allocate some space to store the threads id. */
                p_threads = (pthread_t *)malloc(sizeof(pthread_t) * g_nb_threads);
                p_threads_params = (parallel_params_t *)malloc(sizeof(parallel_params_t) * g_nb_threads);
                if ((p_threads != NULL) && (p_threads_params != NULL))
                {
                    memset(p_threads, 0, sizeof(pthread_t) * g_nb_threads);
                    memset(p_threads_params, 0, sizeof(parallel_params_t) * g_nb_threads);

                    g_bm_processed = 0;

                    info(""Starting %d threads ...\n"", g_nb_threads);

                    /* Create `g_nb_threads`. */
                    for (i=0; i<g_nb_threads; i++)
                    {
                        p_threads_params[i].p_scores = p_scores;
                        p_threads_params[i].p_poi_list = p_poi_list;
                        p_threads_params[i].p_candidates = p_candidates;
                        p_threads_params[i].arch = g_target_arch;
                        p_threads_params[i].endian = g_target_endian;
                        p_threads_params[i].content = gp_content;
                        p_threads_params[i].ui_content_size = g_content_size;
                        p_threads_params[i].lock = &deep_lock;
                        p_threads_params[i].start = i*z;
                        p_threads_params[i].count = z;
                        if (i == (g_nb_threads - 1))
                        {
                            if ((i*z + z) < g_bm_kept)
                            {
                                p_threads_params[i].count = g_bm_kept -   p_threads_params[i].start;
                            }
                        }
                        info(""Thread #%d will cover %d to %d\n"", i, p_threads_params[i].start, p_threads_params[i].start+p_threads_params[i].count);

                        pthread_create(
                            &p_threads[i],
                            NULL,
                            parallel_refine_candidates,
                            (void *)&p_threads_params[i]
                        );
                    }

                    /* Wait for these threads to finish. */
                    for (i=0; i<g_nb_threads; i++)
                    {
                        pthread_join(p_threads[i], NULL);
                    }
                    progress_bar_done();

                    max_address = g_max_address;

                    /* Free pthreads. */
                    free(p_threads);
                    free(p_threads_params);
                }
                else
                {
                    error(""Cannot allocate memory for multi-threaded search."");
                }

                info(""Best match based on pointers count: %016lx\n"", max_address);

                /* Check if we have a single candidate with valid array. */
                count = 0;
                for (i=0; i<g_bm_kept; i++)
                {
                    if (p_scores[i].has_valid_array > 0)
                    {
                        count++;
                    }
                }

                if (count == 1)
                {
                    for (i=0; i<g_bm_kept; i++)
                    {
                        if (p_scores[i].has_valid_array > 0)
                        {
                            max_address = p_scores[i].base_address;
                            break;
                        }
                    }

                    /* Display 100% matching address. */
                    if (g_target_arch == ARCH_64)
                        printf(""[i] Base address found (valid array): 0x%016lx.\n"", max_address);
                    else
                        printf(""[i] Base address found (valid array): 0x%08x.\n"", (uint32_t)max_address);
                }
                else
                {
                    /* Check if g_bm_address == max_address. */
                    if (g_bm_address == max_address)
                    {
                        /* Display 100% matching address. */
                        if (g_target_arch == ARCH_64)
                            printf(""[i] Base address found: 0x%016lx.\n"", g_bm_address);
                        else
                            printf(""[i] Base address found: 0x%08x.\n"", (uint32_t)g_bm_address);
                    }
                    else if (max_address != 0xFFFFFFFFFFFFFFFF)
                    {   
                        if (g_target_arch == ARCH_64)
                            printf(""[i] Base address seems to be 0x%016lx (not sure).\n"", max_address);
                        else
                            printf(""[i] Base address seems to be 0x%08x (not sure).\n"", (uint32_t)max_address);
                    }
                    else
                    {
                        if (g_target_arch == ARCH_64)
                            printf(""[i] Base address seems to be 0x%016lx (not sure).\n"", g_bm_address);
                        else
                            printf(""[i] Base address seems to be 0x%08x (not sure).\n"", (uint32_t)g_bm_address);
                    }
                }

                /* Sort remaining candidates. */
                qsort(p_scores, g_bm_kept, sizeof(score_entry_t), score_compare_func);

                /* Tell the user he/she should use the -m/--more to get all the candidates. */
                if ((nb_candidates > 0) && (g_bm_kept > 1))
                {
                    printf("" More base addresses to consider (just in case):\n"");
                    for (i=0; i<((g_bm_kept>30)?30:g_bm_kept); i++)
                    {
                        if ((p_scores[i].base_address != max_address) && (p_scores[i].score > 0))
                        {
                            if (g_target_arch == ARCH_64)
                                printf(""  0x%016lx (%f)\n"", p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
                            else
                                printf(""  0x%08x (%.02f)\n"", (uint32_t)p_scores[i].base_address, (float)p_scores[i].score/p_scores[0].score);
                        }
                    }
                }
            }
            else
            {
                error(""Cannot evaluate, low memory !\n"");
            }

            /* Free scores. */
            free(p_scores);
        }

    }
    else
        error(""No point of interests found, cannot deduce loading address."");
}"
